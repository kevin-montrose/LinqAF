using LinqAF.Config;
using LinqAF.Impl;
using System;
using System.Collections;
using System.Collections.Generic;

namespace LinqAF
{
    public static class RangeExtensionMethods
    {
        //// Aggregate

        //public static int Aggregate(this RangeEnumerable source, Func<int, int, int> func)
        //=> CommonImplementation.Aggregate<int, RangeEnumerable, RangeEnumerator>(ref source, func);

        //public static TItemOut Aggregate<TItemOut>(this RangeEnumerable source, TItemOut seed, Func<TItemOut, int, TItemOut> func)
        //=> CommonImplementation.Aggregate<int, TItemOut, RangeEnumerable, RangeEnumerator>(ref source, seed, func);

        //public static TItemOut Aggregate<TItemMid, TItemOut>(this RangeEnumerable source, TItemMid seed, Func<TItemMid, int, TItemMid> func, Func<TItemMid, TItemOut> resultSelector)
        //=> CommonImplementation.Aggregate<int, TItemMid, TItemOut, RangeEnumerable, RangeEnumerator>(ref source, seed, func, resultSelector);

        //// All

        //public static bool All(this RangeEnumerable source, Func<int, bool> predicate)
        //=> CommonImplementation.All<int, RangeEnumerable, RangeEnumerator>(ref source, predicate);

        //// Any

        //public static bool Any(this RangeEnumerable source)
        //{
        //    if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));

        //    return source.InnerCount > 0;
        //}

        //public static bool Any(this RangeEnumerable source, Func<int, bool> predicate)
        //=> CommonImplementation.Any<int, RangeEnumerable, RangeEnumerator>(ref source, predicate);

        //// Append

        //public static AppendEnumerable<int, RangeEnumerable, RangeEnumerator> Append(this RangeEnumerable source, int element)
        //=> CommonImplementation.Append<int, RangeEnumerable, RangeEnumerator>(ref source, element);

        //// AsEnumerable

        //public static IEnumerable<int> AsEnumerable(this RangeEnumerable source)
        //=> CommonImplementation.AsEnumerable<int, RangeEnumerable, RangeEnumerator>(ref source);

//        // Average

//        public static double Average(this RangeEnumerable source, Func<int, long> selector)
//        => CommonImplementation.AverageSelector<int, RangeEnumerable, RangeEnumerator>(ref source, selector);

//        public static float Average(this RangeEnumerable source, Func<int, float> selector)
//        => CommonImplementation.AverageSelector<int, RangeEnumerable, RangeEnumerator>(ref source, selector);

//        public static double Average(this RangeEnumerable source, Func<int, double> selector)
//        => CommonImplementation.AverageSelector<int, RangeEnumerable, RangeEnumerator>(ref source, selector);

//        public static decimal Average(this RangeEnumerable source, Func<int, decimal> selector)
//        => CommonImplementation.AverageSelector<int, RangeEnumerable, RangeEnumerator>(ref source, selector);

//        public static decimal? Average(this RangeEnumerable source, Func<int, decimal?> selector)
//        => CommonImplementation.AverageSelector<int, RangeEnumerable, RangeEnumerator>(ref source, selector);

//        public static double? Average(this RangeEnumerable source, Func<int, double?> selector)
//        => CommonImplementation.AverageSelector<int, RangeEnumerable, RangeEnumerator>(ref source, selector);

//        public static float? Average(this RangeEnumerable source, Func<int, float?> selector)
//        => CommonImplementation.AverageSelector<int, RangeEnumerable, RangeEnumerator>(ref source, selector);

//        public static double? Average(this RangeEnumerable source, Func<int, long?> selector)
//        => CommonImplementation.AverageSelector<int, RangeEnumerable, RangeEnumerator>(ref source, selector);

//        public static double? Average(this RangeEnumerable source, Func<int, int?> selector)
//        => CommonImplementation.AverageSelector<int, RangeEnumerable, RangeEnumerator>(ref source, selector);

//        public static double Average(this RangeEnumerable source, Func<int, int> selector)
//        => CommonImplementation.AverageSelector<int, RangeEnumerable, RangeEnumerator>(ref source, selector);

//        // Cast

//        public static CastEnumerable<int, TCastOutItem, RangeEnumerable, RangeEnumerator> Cast<TCastOutItem>(this RangeEnumerable source)
//        => CommonImplementation.Cast<int, TCastOutItem, RangeEnumerable, RangeEnumerator>(ref source);

//        // Concat

//        public static ConcatEnumerable<int, RangeEnumerable, RangeEnumerator, OrderByEnumerable<int, TOrderByKey, TOrderByEnumerable, TOrderByEnumerator, TOrderByComparer>, OrderByEnumerator<int, TOrderByKey, TOrderByEnumerator, TOrderByComparer>> Concat<TOrderByKey, TOrderByEnumerable, TOrderByEnumerator, TOrderByComparer>(this RangeEnumerable source, OrderByEnumerable<int, TOrderByKey, TOrderByEnumerable, TOrderByEnumerator, TOrderByComparer> second)
//            where TOrderByEnumerable : struct, IStructEnumerable<int, TOrderByEnumerator>
//            where TOrderByEnumerator : struct, IStructEnumerator<int>
//            where TOrderByComparer : struct, IStructComparer<int, TOrderByKey>
//        => CommonImplementation.Concat<int, RangeEnumerable, RangeEnumerator, OrderByEnumerable<int, TOrderByKey, TOrderByEnumerable, TOrderByEnumerator, TOrderByComparer>, OrderByEnumerator<int, TOrderByKey, TOrderByEnumerator, TOrderByComparer>>(ref source, ref second);

//        public static ConcatEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, IEnumerable<int>, IEnumerableBridger<int>, IdentityEnumerator<int>>, IdentityEnumerator<int>> Concat(this RangeEnumerable source, IEnumerable<int> second)
//        {
//            var bridge = CommonImplementation.Bridge(second, nameof(second));
//            return CommonImplementation.Concat<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, IEnumerable<int>, IEnumerableBridger<int>, IdentityEnumerator<int>>, IdentityEnumerator<int>>(ref source, ref bridge);
//        }

//        public static ConcatEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, HashSet<int>, HashSetBridger<int>, HashSetEnumerator<int>>, HashSetEnumerator<int>> Concat(this RangeEnumerable source, HashSet<int> second)
//        {
//            var bridge = CommonImplementation.Bridge(second, nameof(second));
//            return CommonImplementation.Concat<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, HashSet<int>, HashSetBridger<int>, HashSetEnumerator<int>>, HashSetEnumerator<int>>(ref source, ref bridge);
//        }

//        public static ConcatEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, List<int>, ListBridger<int>, ListEnumerator<int>>, ListEnumerator<int>> Concat(this RangeEnumerable source, List<int> second)
//        {
//            var bridge = CommonImplementation.Bridge(second, nameof(second));
//            return CommonImplementation.Concat<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, List<int>, ListBridger<int>, ListEnumerator<int>>, ListEnumerator<int>>(ref source, ref bridge);
//        }

//        public static ConcatEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, Queue<int>, QueueBridger<int>, QueueEnumerator<int>>, QueueEnumerator<int>> Concat(this RangeEnumerable source, Queue<int> second)
//        {
//            var bridge = CommonImplementation.Bridge(second, nameof(second));
//            return CommonImplementation.Concat<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, Queue<int>, QueueBridger<int>, QueueEnumerator<int>>, QueueEnumerator<int>>(ref source, ref bridge);
//        }

//        public static ConcatEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, SortedSet<int>, SortedSetBridger<int>, SortedSetEnumerator<int>>, SortedSetEnumerator<int>> Concat(this RangeEnumerable source, SortedSet<int> second)
//        {
//            var bridge = CommonImplementation.Bridge(second, nameof(second));
//            return CommonImplementation.Concat<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, SortedSet<int>, SortedSetBridger<int>, SortedSetEnumerator<int>>, SortedSetEnumerator<int>>(ref source, ref bridge);
//        }

//        public static ConcatEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, int[], ArrayBridger<int>, ArrayEnumerator<int>>, ArrayEnumerator<int>> Concat(this RangeEnumerable source, int[] second)
//        {
//            var bridge = CommonImplementation.Bridge(second, nameof(second));
//            return CommonImplementation.Concat<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, int[], ArrayBridger<int>, ArrayEnumerator<int>>, ArrayEnumerator<int>>(ref source, ref bridge);
//        }

//        public static ConcatEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, Stack<int>, StackBridger<int>, StackEnumerator<int>>, StackEnumerator<int>> Concat(this RangeEnumerable source, Stack<int> second)
//        {
//            var bridge = CommonImplementation.Bridge(second, nameof(second));
//            return CommonImplementation.Concat<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, Stack<int>, StackBridger<int>, StackEnumerator<int>>, StackEnumerator<int>>(ref source, ref bridge);
//        }

//        public static ConcatEnumerable<int, RangeEnumerable, RangeEnumerator, RepeatEnumerable<int>, RepeatEnumerator<int>> Concat(this RangeEnumerable source, RepeatEnumerable<int> second)
//        => CommonImplementation.Concat<int, RangeEnumerable, RangeEnumerator, RepeatEnumerable<int>, RepeatEnumerator<int>>(ref source, ref second);

//        public static RangeEnumerable Concat(this RangeEnumerable source, EmptyEnumerable<int> second)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized("first");
//            if (second.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(second));

//            return source;
//        }

//        public static ConcatEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, LinkedList<int>, LinkedListBridger<int>, LinkedListEnumerator<int>>, LinkedListEnumerator<int>> Concat(this RangeEnumerable source, LinkedList<int> second)
//        {
//            var bridge = CommonImplementation.Bridge(second, nameof(second));
//            return CommonImplementation.Concat<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, LinkedList<int>, LinkedListBridger<int>, LinkedListEnumerator<int>>, LinkedListEnumerator<int>>(ref source, ref bridge);
//        }

//        public static RangeEnumerable Concat(this RangeEnumerable source, EmptyOrderedEnumerable<int> second)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized("first");
//            if (second.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(second));

//            return source;
//        }

//        public static ConcatEnumerable<int, RangeEnumerable, RangeEnumerator, BoxedEnumerable<int>, BoxedEnumerator<int>> Concat(this RangeEnumerable source, BoxedEnumerable<int> second)
//        => CommonImplementation.Concat<int, RangeEnumerable, RangeEnumerator, BoxedEnumerable<int>, BoxedEnumerator<int>>(ref source, ref second);

//        public static ConcatEnumerable<int, RangeEnumerable, RangeEnumerator, GroupingEnumerable<TGroupedKey, int>, GroupingEnumerator<int>> Concat<TGroupedKey>(this RangeEnumerable source, GroupingEnumerable<TGroupedKey, int> second)
//        => CommonImplementation.Concat<int, RangeEnumerable, RangeEnumerator, GroupingEnumerable<TGroupedKey, int>, GroupingEnumerator<int>>(ref source, ref second);

//        public static ConcatEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, SortedDictionary<TDictionaryKey, int>.ValueCollection, SortedDictionaryValuesBridger<TDictionaryKey, int>, SortedDictionaryValuesEnumerator<TDictionaryKey, int>>, SortedDictionaryValuesEnumerator<TDictionaryKey, int>> Concat<TDictionaryKey>(this RangeEnumerable source, SortedDictionary<TDictionaryKey, int>.ValueCollection second)
//        {
//            var bridge = CommonImplementation.Bridge(second, nameof(second));
//            return CommonImplementation.Concat<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, SortedDictionary<TDictionaryKey, int>.ValueCollection, SortedDictionaryValuesBridger<TDictionaryKey, int>, SortedDictionaryValuesEnumerator<TDictionaryKey, int>>, SortedDictionaryValuesEnumerator<TDictionaryKey, int>>(ref source, ref bridge);
//        }

//        public static ConcatEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, SortedDictionary<int, TDictionaryValue>.KeyCollection, SortedDictionaryKeysBridger<int, TDictionaryValue>, SortedDictionaryKeysEnumerator<int, TDictionaryValue>>, SortedDictionaryKeysEnumerator<int, TDictionaryValue>> Concat<TDictionaryValue>(this RangeEnumerable source, SortedDictionary<int, TDictionaryValue>.KeyCollection second)
//        {
//            var bridge = CommonImplementation.Bridge(second, nameof(second));
//            return CommonImplementation.Concat<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, SortedDictionary<int, TDictionaryValue>.KeyCollection, SortedDictionaryKeysBridger<int, TDictionaryValue>, SortedDictionaryKeysEnumerator<int, TDictionaryValue>>, SortedDictionaryKeysEnumerator<int, TDictionaryValue>>(ref source, ref bridge);
//        }

//        public static ConcatEnumerable<int, RangeEnumerable, RangeEnumerator, GroupedEnumerable<TGroupedKey, int>, GroupedEnumerator<int>> Concat<TGroupedKey>(this RangeEnumerable source, GroupedEnumerable<TGroupedKey, int> second)
//        => CommonImplementation.Concat<int, RangeEnumerable, RangeEnumerator, GroupedEnumerable<TGroupedKey, int>, GroupedEnumerator<int>>(ref source, ref second);

//        public static ConcatEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, Dictionary<TDictionaryKey, int>.ValueCollection, DictionaryValuesBridger<TDictionaryKey, int>, DictionaryValuesEnumerator<TDictionaryKey, int>>, DictionaryValuesEnumerator<TDictionaryKey, int>> Concat<TDictionaryKey>(this RangeEnumerable source, Dictionary<TDictionaryKey, int>.ValueCollection second)
//        {
//            var bridge = CommonImplementation.Bridge(second, nameof(second));
//            return CommonImplementation.Concat<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, Dictionary<TDictionaryKey, int>.ValueCollection, DictionaryValuesBridger<TDictionaryKey, int>, DictionaryValuesEnumerator<TDictionaryKey, int>>, DictionaryValuesEnumerator<TDictionaryKey, int>>(ref source, ref bridge);
//        }

//        public static ConcatEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, Dictionary<int, TDictionaryValue>.KeyCollection, DictionaryKeysBridger<int, TDictionaryValue>, DictionaryKeysEnumerator<int, TDictionaryValue>>, DictionaryKeysEnumerator<int, TDictionaryValue>> Concat<TDictionaryValue>(this RangeEnumerable source, Dictionary<int, TDictionaryValue>.KeyCollection second)
//        {
//            var bridge = CommonImplementation.Bridge(second, nameof(second));
//            return CommonImplementation.Concat<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, Dictionary<int, TDictionaryValue>.KeyCollection, DictionaryKeysBridger<int, TDictionaryValue>, DictionaryKeysEnumerator<int, TDictionaryValue>>, DictionaryKeysEnumerator<int, TDictionaryValue>>(ref source, ref bridge);
//        }

//        public static ConcatEnumerable<int, RangeEnumerable, RangeEnumerator, SkipWhileEnumerable<int, TInnerEnumerable, TInnerEnumerator>, SkipWhileEnumerator<int, TInnerEnumerator>> Concat<TInnerEnumerable, TInnerEnumerator>(this RangeEnumerable source, SkipWhileEnumerable<int, TInnerEnumerable, TInnerEnumerator> second)
//            where TInnerEnumerable : struct, IStructEnumerable<int, TInnerEnumerator>
//            where TInnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Concat<int, RangeEnumerable, RangeEnumerator, SkipWhileEnumerable<int, TInnerEnumerable, TInnerEnumerator>, SkipWhileEnumerator<int, TInnerEnumerator>>(ref source, ref second);

//        public static ConcatEnumerable<int, RangeEnumerable, RangeEnumerator, SkipWhileIndexedEnumerable<int, TInnerEnumerable, TInnerEnumerator>, SkipWhileIndexedEnumerator<int, TInnerEnumerator>> Concat<TInnerEnumerable, TInnerEnumerator>(this RangeEnumerable source, SkipWhileIndexedEnumerable<int, TInnerEnumerable, TInnerEnumerator> second)
//            where TInnerEnumerable : struct, IStructEnumerable<int, TInnerEnumerator>
//            where TInnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Concat<int, RangeEnumerable, RangeEnumerator, SkipWhileIndexedEnumerable<int, TInnerEnumerable, TInnerEnumerator>, SkipWhileIndexedEnumerator<int, TInnerEnumerator>>(ref source, ref second);

//        public static ConcatEnumerable<int, RangeEnumerable, RangeEnumerator, SkipEnumerable<int, TInnerEnumerable, TInnerEnumerator>, SkipEnumerator<int, TInnerEnumerator>> Concat<TInnerEnumerable, TInnerEnumerator>(this RangeEnumerable source, SkipEnumerable<int, TInnerEnumerable, TInnerEnumerator> second)
//            where TInnerEnumerable : struct, IStructEnumerable<int, TInnerEnumerator>
//            where TInnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Concat<int, RangeEnumerable, RangeEnumerator, SkipEnumerable<int, TInnerEnumerable, TInnerEnumerator>, SkipEnumerator<int, TInnerEnumerator>>(ref source, ref second);

//        public static ConcatEnumerable<int, RangeEnumerable, RangeEnumerator, WhereEnumerable<int, TInnerEnumerable, TInnerEnumerator>, WhereEnumerator<int, TInnerEnumerator>> Concat<TInnerEnumerable, TInnerEnumerator>(this RangeEnumerable source, WhereEnumerable<int, TInnerEnumerable, TInnerEnumerator> second)
//            where TInnerEnumerable : struct, IStructEnumerable<int, TInnerEnumerator>
//            where TInnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Concat<int, RangeEnumerable, RangeEnumerator, WhereEnumerable<int, TInnerEnumerable, TInnerEnumerator>, WhereEnumerator<int, TInnerEnumerator>>(ref source, ref second);

//        public static ConcatEnumerable<int, RangeEnumerable, RangeEnumerator, DefaultIfEmptyDefaultEnumerable<int, TInnerEnumerable, TInnerEnumerator>, DefaultIfEmptyDefaultEnumerator<int, TInnerEnumerator>> Concat<TInnerEnumerable, TInnerEnumerator>(this RangeEnumerable source, DefaultIfEmptyDefaultEnumerable<int, TInnerEnumerable, TInnerEnumerator> second)
//            where TInnerEnumerable : struct, IStructEnumerable<int, TInnerEnumerator>
//            where TInnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Concat<int, RangeEnumerable, RangeEnumerator, DefaultIfEmptyDefaultEnumerable<int, TInnerEnumerable, TInnerEnumerator>, DefaultIfEmptyDefaultEnumerator<int, TInnerEnumerator>>(ref source, ref second);

//        public static ConcatEnumerable<int, RangeEnumerable, RangeEnumerator, DistinctDefaultEnumerable<int, TConcat_DistinctInnerEnumerable, TConcat_DistinctInnerEnumerator>, DistinctDefaultEnumerator<int, TConcat_DistinctInnerEnumerator>> Concat<TConcat_DistinctInnerEnumerable, TConcat_DistinctInnerEnumerator>(this RangeEnumerable source, DistinctDefaultEnumerable<int, TConcat_DistinctInnerEnumerable, TConcat_DistinctInnerEnumerator> second)
//            where TConcat_DistinctInnerEnumerable : struct, IStructEnumerable<int, TConcat_DistinctInnerEnumerator>
//            where TConcat_DistinctInnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Concat<int, RangeEnumerable, RangeEnumerator, DistinctDefaultEnumerable<int, TConcat_DistinctInnerEnumerable, TConcat_DistinctInnerEnumerator>, DistinctDefaultEnumerator<int, TConcat_DistinctInnerEnumerator>>(ref source, ref second);

//        public static ConcatEnumerable<int, RangeEnumerable, RangeEnumerator, WhereIndexedEnumerable<int, TConcat_InnerEnumerable, TConcat_InnerEnumerator>, WhereIndexedEnumerator<int, TConcat_InnerEnumerator>> Concat<TConcat_InnerEnumerable, TConcat_InnerEnumerator>(this RangeEnumerable source, WhereIndexedEnumerable<int, TConcat_InnerEnumerable, TConcat_InnerEnumerator> second)
//            where TConcat_InnerEnumerable : struct, IStructEnumerable<int, TConcat_InnerEnumerator>
//            where TConcat_InnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Concat<int, RangeEnumerable, RangeEnumerator, WhereIndexedEnumerable<int, TConcat_InnerEnumerable, TConcat_InnerEnumerator>, WhereIndexedEnumerator<int, TConcat_InnerEnumerator>>(ref source, ref second);

//        public static ConcatEnumerable<int, RangeEnumerable, RangeEnumerator, DistinctSpecificEnumerable<int, TConcat_DistinctInnerEnumerable, TConcat_DistinctInnerEnumerator>, DistinctSpecificEnumerator<int, TConcat_DistinctInnerEnumerator>> Concat<TConcat_DistinctInnerEnumerable, TConcat_DistinctInnerEnumerator>(this RangeEnumerable source, DistinctSpecificEnumerable<int, TConcat_DistinctInnerEnumerable, TConcat_DistinctInnerEnumerator> second)
//            where TConcat_DistinctInnerEnumerable : struct, IStructEnumerable<int, TConcat_DistinctInnerEnumerator>
//            where TConcat_DistinctInnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Concat<int, RangeEnumerable, RangeEnumerator, DistinctSpecificEnumerable<int, TConcat_DistinctInnerEnumerable, TConcat_DistinctInnerEnumerator>, DistinctSpecificEnumerator<int, TConcat_DistinctInnerEnumerator>>(ref source, ref second);

//        public static ConcatEnumerable<int, RangeEnumerable, RangeEnumerator, ReverseEnumerable<int, TReverseEnumerable, TReverseEnumerator>, ReverseEnumerator<int>> Concat<TReverseEnumerable, TReverseEnumerator>(this RangeEnumerable source, ReverseEnumerable<int, TReverseEnumerable, TReverseEnumerator> second)
//            where TReverseEnumerable : struct, IStructEnumerable<int, TReverseEnumerator>
//            where TReverseEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Concat<int, RangeEnumerable, RangeEnumerator, ReverseEnumerable<int, TReverseEnumerable, TReverseEnumerator>, ReverseEnumerator<int>>(ref source, ref second);

//        public static ConcatEnumerable<int, RangeEnumerable, RangeEnumerator, TakeEnumerable<int, TInnerEnumerable, TInnerEnumerator>, TakeEnumerator<int, TInnerEnumerator>> Concat<TInnerEnumerable, TInnerEnumerator>(this RangeEnumerable source, TakeEnumerable<int, TInnerEnumerable, TInnerEnumerator> second)
//            where TInnerEnumerable : struct, IStructEnumerable<int, TInnerEnumerator>
//            where TInnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Concat<int, RangeEnumerable, RangeEnumerator, TakeEnumerable<int, TInnerEnumerable, TInnerEnumerator>, TakeEnumerator<int, TInnerEnumerator>>(ref source, ref second);

//        public static ConcatEnumerable<int, RangeEnumerable, RangeEnumerator, TakeWhileIndexedEnumerable<int, TInnerEnumerable, TInnerEnumerator>, TakeWhileIndexedEnumerator<int, TInnerEnumerator>> Concat<TInnerEnumerable, TInnerEnumerator>(this RangeEnumerable source, TakeWhileIndexedEnumerable<int, TInnerEnumerable, TInnerEnumerator> second)
//            where TInnerEnumerable : struct, IStructEnumerable<int, TInnerEnumerator>
//            where TInnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Concat<int, RangeEnumerable, RangeEnumerator, TakeWhileIndexedEnumerable<int, TInnerEnumerable, TInnerEnumerator>, TakeWhileIndexedEnumerator<int, TInnerEnumerator>>(ref source, ref second);

//        public static ConcatEnumerable<int, RangeEnumerable, RangeEnumerator, TakeWhileEnumerable<int, TInnerEnumerable, TInnerEnumerator>, TakeWhileEnumerator<int, TInnerEnumerator>> Concat<TInnerEnumerable, TInnerEnumerator>(this RangeEnumerable source, TakeWhileEnumerable<int, TInnerEnumerable, TInnerEnumerator> second)
//            where TInnerEnumerable : struct, IStructEnumerable<int, TInnerEnumerator>
//            where TInnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Concat<int, RangeEnumerable, RangeEnumerator, TakeWhileEnumerable<int, TInnerEnumerable, TInnerEnumerator>, TakeWhileEnumerator<int, TInnerEnumerator>>(ref source, ref second);

//        public static ConcatEnumerable<int, RangeEnumerable, RangeEnumerator, DefaultIfEmptySpecificEnumerable<int, TInnerEnumerable, TInnerEnumerator>, DefaultIfEmptySpecificEnumerator<int, TInnerEnumerator>> Concat<TInnerEnumerable, TInnerEnumerator>(this RangeEnumerable source, DefaultIfEmptySpecificEnumerable<int, TInnerEnumerable, TInnerEnumerator> second)
//            where TInnerEnumerable : struct, IStructEnumerable<int, TInnerEnumerator>
//            where TInnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Concat<int, RangeEnumerable, RangeEnumerator, DefaultIfEmptySpecificEnumerable<int, TInnerEnumerable, TInnerEnumerator>, DefaultIfEmptySpecificEnumerator<int, TInnerEnumerator>>(ref source, ref second);

//        public static ConcatEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, TIdentityBridgeType, TIdentityBridger, TIdentityEnumerator>, TIdentityEnumerator> Concat<TIdentityBridgeType, TIdentityBridger, TIdentityEnumerator>(this RangeEnumerable source, IdentityEnumerable<int, TIdentityBridgeType, TIdentityBridger, TIdentityEnumerator> second)
//            where TIdentityBridgeType : class
//            where TIdentityEnumerator : struct, IStructEnumerator<int>
//            where TIdentityBridger : struct, IStructBridger<int, TIdentityBridgeType, TIdentityEnumerator>
//        => CommonImplementation.Concat<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, TIdentityBridgeType, TIdentityBridger, TIdentityEnumerator>, TIdentityEnumerator>(ref source, ref second);

//        public static ConcatEnumerable<int, RangeEnumerable, RangeEnumerator, SelectIndexedEnumerable<TSelectInItem, int, TInnerEnumerable, TInnerEnumerator>, SelectIndexedEnumerator<TSelectInItem, int, TInnerEnumerator>> Concat<TSelectInItem, TInnerEnumerable, TInnerEnumerator>(this RangeEnumerable source, SelectIndexedEnumerable<TSelectInItem, int, TInnerEnumerable, TInnerEnumerator> second)
//            where TInnerEnumerable : struct, IStructEnumerable<TSelectInItem, TInnerEnumerator>
//            where TInnerEnumerator : struct, IStructEnumerator<TSelectInItem>
//        => CommonImplementation.Concat<int, RangeEnumerable, RangeEnumerator, SelectIndexedEnumerable<TSelectInItem, int, TInnerEnumerable, TInnerEnumerator>, SelectIndexedEnumerator<TSelectInItem, int, TInnerEnumerator>>(ref source, ref second);

//        public static ConcatEnumerable<int, RangeEnumerable, RangeEnumerator, CastEnumerable<TInItem, int, TInnerEnumerable, TInnerEnumerator>, CastEnumerator<TInItem, int, TInnerEnumerator>> Concat<TInItem, TInnerEnumerable, TInnerEnumerator>(this RangeEnumerable source, CastEnumerable<TInItem, int, TInnerEnumerable, TInnerEnumerator> second)
//            where TInnerEnumerable : struct, IStructEnumerable<TInItem, TInnerEnumerator>
//            where TInnerEnumerator : struct, IStructEnumerator<TInItem>
//        => CommonImplementation.Concat<int, RangeEnumerable, RangeEnumerator, CastEnumerable<TInItem, int, TInnerEnumerable, TInnerEnumerator>, CastEnumerator<TInItem, int, TInnerEnumerator>>(ref source, ref second);

//        public static ConcatEnumerable<int, RangeEnumerable, RangeEnumerator, WhereWhereEnumerable<int, TConcat_WhereInnerEnumerable, TConcat_WhereInnerEnumerator, TConcat_WherePredicate>, WhereWhereEnumerator<int, TConcat_WhereInnerEnumerator, TConcat_WherePredicate>> Concat<TConcat_WhereInnerEnumerable, TConcat_WhereInnerEnumerator, TConcat_WherePredicate>(this RangeEnumerable source, WhereWhereEnumerable<int, TConcat_WhereInnerEnumerable, TConcat_WhereInnerEnumerator, TConcat_WherePredicate> second)
//            where TConcat_WhereInnerEnumerable : struct, IStructEnumerable<int, TConcat_WhereInnerEnumerator>
//            where TConcat_WhereInnerEnumerator : struct, IStructEnumerator<int>
//            where TConcat_WherePredicate : struct, IStructPredicate<int>
//        => CommonImplementation.Concat<int, RangeEnumerable, RangeEnumerator, WhereWhereEnumerable<int, TConcat_WhereInnerEnumerable, TConcat_WhereInnerEnumerator, TConcat_WherePredicate>, WhereWhereEnumerator<int, TConcat_WhereInnerEnumerator, TConcat_WherePredicate>>(ref source, ref second);

//        public static ConcatEnumerable<int, RangeEnumerable, RangeEnumerator, OfTypeEnumerable<TInItem, int, TInnerEnumerable, TInnerEnumerator>, OfTypeEnumerator<TInItem, int, TInnerEnumerator>> Concat<TInItem, TInnerEnumerable, TInnerEnumerator>(this RangeEnumerable source, OfTypeEnumerable<TInItem, int, TInnerEnumerable, TInnerEnumerator> second)
//            where TInnerEnumerable : struct, IStructEnumerable<TInItem, TInnerEnumerator>
//            where TInnerEnumerator : struct, IStructEnumerator<TInItem>
//        => CommonImplementation.Concat<int, RangeEnumerable, RangeEnumerator, OfTypeEnumerable<TInItem, int, TInnerEnumerable, TInnerEnumerator>, OfTypeEnumerator<TInItem, int, TInnerEnumerator>>(ref source, ref second);

//        public static ConcatEnumerable<int, RangeEnumerable, RangeEnumerator, SelectEnumerable<TSelectInItem, int, TInnerEnumerable, TInnerEnumerator>, SelectEnumerator<TSelectInItem, int, TInnerEnumerator>> Concat<TSelectInItem, TInnerEnumerable, TInnerEnumerator>(this RangeEnumerable source, SelectEnumerable<TSelectInItem, int, TInnerEnumerable, TInnerEnumerator> second)
//            where TInnerEnumerable : struct, IStructEnumerable<TSelectInItem, TInnerEnumerator>
//            where TInnerEnumerator : struct, IStructEnumerator<TSelectInItem>
//        => CommonImplementation.Concat<int, RangeEnumerable, RangeEnumerator, SelectEnumerable<TSelectInItem, int, TInnerEnumerable, TInnerEnumerator>, SelectEnumerator<TSelectInItem, int, TInnerEnumerator>>(ref source, ref second);

//        public static ConcatEnumerable<int, RangeEnumerable, RangeEnumerator, ExceptDefaultEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>, ExceptDefaultEnumerator<int, TExceptFirstEnumerator, TExceptSecondEnumerator>> Concat<TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>(this RangeEnumerable source, ExceptDefaultEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator> second)
//            where TExceptFirstEnumerable : struct, IStructEnumerable<int, TExceptFirstEnumerator>
//            where TExceptFirstEnumerator : struct, IStructEnumerator<int>
//            where TExceptSecondEnumerable : struct, IStructEnumerable<int, TExceptSecondEnumerator>
//            where TExceptSecondEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Concat<int, RangeEnumerable, RangeEnumerator, ExceptDefaultEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>, ExceptDefaultEnumerator<int, TExceptFirstEnumerator, TExceptSecondEnumerator>>(ref source, ref second);

//        public static ConcatEnumerable<int, RangeEnumerable, RangeEnumerator, ExceptSpecificEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>, ExceptSpecificEnumerator<int, TExceptFirstEnumerator, TExceptSecondEnumerator>> Concat<TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>(this RangeEnumerable source, ExceptSpecificEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator> second)
//            where TExceptFirstEnumerable : struct, IStructEnumerable<int, TExceptFirstEnumerator>
//            where TExceptFirstEnumerator : struct, IStructEnumerator<int>
//            where TExceptSecondEnumerable : struct, IStructEnumerable<int, TExceptSecondEnumerator>
//            where TExceptSecondEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Concat<int, RangeEnumerable, RangeEnumerator, ExceptSpecificEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>, ExceptSpecificEnumerator<int, TExceptFirstEnumerator, TExceptSecondEnumerator>>(ref source, ref second);

//        public static ConcatEnumerable<int, RangeEnumerable, RangeEnumerator, IntersectDefaultEnumerable<int, TIntersectFirstEnumerable, TIntersectFirstEnumerator, TIntersectSecondEnumerable, TIntersectSecondEnumerator>, IntersectDefaultEnumerator<int, TIntersectFirstEnumerator, TIntersectSecondEnumerator>> Concat<TIntersectFirstEnumerable, TIntersectFirstEnumerator, TIntersectSecondEnumerable, TIntersectSecondEnumerator>(this RangeEnumerable source, IntersectDefaultEnumerable<int, TIntersectFirstEnumerable, TIntersectFirstEnumerator, TIntersectSecondEnumerable, TIntersectSecondEnumerator> second)
//            where TIntersectFirstEnumerable : struct, IStructEnumerable<int, TIntersectFirstEnumerator>
//            where TIntersectFirstEnumerator : struct, IStructEnumerator<int>
//            where TIntersectSecondEnumerable : struct, IStructEnumerable<int, TIntersectSecondEnumerator>
//            where TIntersectSecondEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Concat<int, RangeEnumerable, RangeEnumerator, IntersectDefaultEnumerable<int, TIntersectFirstEnumerable, TIntersectFirstEnumerator, TIntersectSecondEnumerable, TIntersectSecondEnumerator>, IntersectDefaultEnumerator<int, TIntersectFirstEnumerator, TIntersectSecondEnumerator>>(ref source, ref second);

//        public static ConcatEnumerable<int, RangeEnumerable, RangeEnumerator, UnionDefaultEnumerable<int, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator>, UnionDefaultEnumerator<int, TUnionFirstEnumerator, TUnionSecondEnumerator>> Concat<TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator>(this RangeEnumerable source, UnionDefaultEnumerable<int, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator> second)
//            where TUnionFirstEnumerable : struct, IStructEnumerable<int, TUnionFirstEnumerator>
//            where TUnionFirstEnumerator : struct, IStructEnumerator<int>
//            where TUnionSecondEnumerable : struct, IStructEnumerable<int, TUnionSecondEnumerator>
//            where TUnionSecondEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Concat<int, RangeEnumerable, RangeEnumerator, UnionDefaultEnumerable<int, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator>, UnionDefaultEnumerator<int, TUnionFirstEnumerator, TUnionSecondEnumerator>>(ref source, ref second);

//        public static ConcatEnumerable<int, RangeEnumerable, RangeEnumerator, UnionSpecificEnumerable<int, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator>, UnionSpecificEnumerator<int, TUnionFirstEnumerator, TUnionSecondEnumerator>> Concat<TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator>(this RangeEnumerable source, UnionSpecificEnumerable<int, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator> second)
//            where TUnionFirstEnumerable : struct, IStructEnumerable<int, TUnionFirstEnumerator>
//            where TUnionFirstEnumerator : struct, IStructEnumerator<int>
//            where TUnionSecondEnumerable : struct, IStructEnumerable<int, TUnionSecondEnumerator>
//            where TUnionSecondEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Concat<int, RangeEnumerable, RangeEnumerator, UnionSpecificEnumerable<int, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator>, UnionSpecificEnumerator<int, TUnionFirstEnumerator, TUnionSecondEnumerator>>(ref source, ref second);

//        public static ConcatEnumerable<int, RangeEnumerable, RangeEnumerator, IntersectSpecificEnumerable<int, TIntersectFirstEnumerable, TIntersectFirstEnumerator, TIntersectSecondEnumerable, TIntersectSecondEnumerator>, IntersectSpecificEnumerator<int, TIntersectFirstEnumerator, TIntersectSecondEnumerator>> Concat<TIntersectFirstEnumerable, TIntersectFirstEnumerator, TIntersectSecondEnumerable, TIntersectSecondEnumerator>(this RangeEnumerable source, IntersectSpecificEnumerable<int, TIntersectFirstEnumerable, TIntersectFirstEnumerator, TIntersectSecondEnumerable, TIntersectSecondEnumerator> second)
//            where TIntersectFirstEnumerable : struct, IStructEnumerable<int, TIntersectFirstEnumerator>
//            where TIntersectFirstEnumerator : struct, IStructEnumerator<int>
//            where TIntersectSecondEnumerable : struct, IStructEnumerable<int, TIntersectSecondEnumerator>
//            where TIntersectSecondEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Concat<int, RangeEnumerable, RangeEnumerator, IntersectSpecificEnumerable<int, TIntersectFirstEnumerable, TIntersectFirstEnumerator, TIntersectSecondEnumerable, TIntersectSecondEnumerator>, IntersectSpecificEnumerator<int, TIntersectFirstEnumerator, TIntersectSecondEnumerator>>(ref source, ref second);

//        public static ConcatEnumerable<int, RangeEnumerable, RangeEnumerator, SelectSelectEnumerable<int, TConcat_SelectInnerItem, TConcat_SelectInnerEnumerable, TConcat_SelectInnerEnumerator, TConcat_SelectProjection>, SelectSelectEnumerator<int, TConcat_SelectInnerItem, TConcat_SelectInnerEnumerator, TConcat_SelectProjection>> Concat<TConcat_SelectInnerItem, TConcat_SelectInnerEnumerable, TConcat_SelectInnerEnumerator, TConcat_SelectProjection>(this RangeEnumerable source, SelectSelectEnumerable<int, TConcat_SelectInnerItem, TConcat_SelectInnerEnumerable, TConcat_SelectInnerEnumerator, TConcat_SelectProjection> second)
//            where TConcat_SelectInnerEnumerable : struct, IStructEnumerable<TConcat_SelectInnerItem, TConcat_SelectInnerEnumerator>
//            where TConcat_SelectInnerEnumerator : struct, IStructEnumerator<TConcat_SelectInnerItem>
//            where TConcat_SelectProjection : struct, IStructProjection<int, TConcat_SelectInnerItem>
//        => CommonImplementation.Concat<int, RangeEnumerable, RangeEnumerator, SelectSelectEnumerable<int, TConcat_SelectInnerItem, TConcat_SelectInnerEnumerable, TConcat_SelectInnerEnumerator, TConcat_SelectProjection>, SelectSelectEnumerator<int, TConcat_SelectInnerItem, TConcat_SelectInnerEnumerator, TConcat_SelectProjection>>(ref source, ref second);

//        public static ConcatEnumerable<int, RangeEnumerable, RangeEnumerator, ConcatEnumerable<int, TInnerLeftEnumerable, TInnerLeftEnumerator, TInnerRightEnumerable, TInnerRightEnumerator>, ConcatEnumerator<int, TInnerLeftEnumerator, TInnerRightEnumerator>> Concat<TInnerLeftEnumerable, TInnerLeftEnumerator, TInnerRightEnumerable, TInnerRightEnumerator>(this RangeEnumerable source, ConcatEnumerable<int, TInnerLeftEnumerable, TInnerLeftEnumerator, TInnerRightEnumerable, TInnerRightEnumerator> second)
//            where TInnerLeftEnumerable : struct, IStructEnumerable<int, TInnerLeftEnumerator>
//            where TInnerLeftEnumerator : struct, IStructEnumerator<int>
//            where TInnerRightEnumerable : struct, IStructEnumerable<int, TInnerRightEnumerator>
//            where TInnerRightEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Concat<int, RangeEnumerable, RangeEnumerator, ConcatEnumerable<int, TInnerLeftEnumerable, TInnerLeftEnumerator, TInnerRightEnumerable, TInnerRightEnumerator>, ConcatEnumerator<int, TInnerLeftEnumerator, TInnerRightEnumerator>>(ref source, ref second);

//        public static ConcatEnumerable<int, RangeEnumerable, RangeEnumerator, SelectManyEnumerable<TSelectManyInItem, int, TInnerEnumerable, TInnerEnumerator, TProjectedEnumerable, TProjectedEnumerator>, SelectManyEnumerator<TSelectManyInItem, int, TInnerEnumerator, TProjectedEnumerable, TProjectedEnumerator>> Concat<TSelectManyInItem, TInnerEnumerable, TInnerEnumerator, TProjectedEnumerable, TProjectedEnumerator>(this RangeEnumerable source, SelectManyEnumerable<TSelectManyInItem, int, TInnerEnumerable, TInnerEnumerator, TProjectedEnumerable, TProjectedEnumerator> second)
//            where TInnerEnumerable : struct, IStructEnumerable<TSelectManyInItem, TInnerEnumerator>
//            where TInnerEnumerator : struct, IStructEnumerator<TSelectManyInItem>
//            where TProjectedEnumerable : struct, IStructEnumerable<int, TProjectedEnumerator>
//            where TProjectedEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Concat<int, RangeEnumerable, RangeEnumerator, SelectManyEnumerable<TSelectManyInItem, int, TInnerEnumerable, TInnerEnumerator, TProjectedEnumerable, TProjectedEnumerator>, SelectManyEnumerator<TSelectManyInItem, int, TInnerEnumerator, TProjectedEnumerable, TProjectedEnumerator>>(ref source, ref second);

//        public static ConcatEnumerable<int, RangeEnumerable, RangeEnumerator, SelectManyIndexedEnumerable<TSelectManyInItem, int, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>, SelectManyIndexedEnumerator<TSelectManyInItem, int, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>> Concat<TSelectManyInItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyIndexedEnumerable<TSelectManyInItem, int, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator> second)
//            where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectManyInItem, TSelectManyInnerEnumerator>
//            where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectManyInItem>
//            where TSelectManyProjectedEnumerable : struct, IStructEnumerable<int, TSelectManyProjectedEnumerator>
//            where TSelectManyProjectedEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Concat<int, RangeEnumerable, RangeEnumerator, SelectManyIndexedEnumerable<TSelectManyInItem, int, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>, SelectManyIndexedEnumerator<TSelectManyInItem, int, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>>(ref source, ref second);

//        public static ConcatEnumerable<int, RangeEnumerable, RangeEnumerator, SelectManyIndexedBridgeEnumerable<TSelectManyInItem, int, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyIndexedBridgeEnumerator<TSelectManyInItem, int, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>> Concat<TSelectManyInItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyIndexedBridgeEnumerable<TSelectManyInItem, int, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator> second)
//            where TSelectManyBridgeType : class
//            where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectManyInItem, TSelectManyInnerEnumerator>
//            where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectManyInItem>
//            where TSelectManyProjectedEnumerator : struct, IStructEnumerator<int>
//            where TSelectManyBridger : struct, IStructBridger<int, TSelectManyBridgeType, TSelectManyProjectedEnumerator>
//        => CommonImplementation.Concat<int, RangeEnumerable, RangeEnumerator, SelectManyIndexedBridgeEnumerable<TSelectManyInItem, int, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyIndexedBridgeEnumerator<TSelectManyInItem, int, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>>(ref source, ref second);

//        public static ConcatEnumerable<int, RangeEnumerable, RangeEnumerator, SelectWhereEnumerable<int, TConcat_SelectInnerItem, TConcat_SelectInnerEnumerable, TConcat_SelectInnerEnumerator, TConcat_SelectProjection, TConcat_SelectPredicate>, SelectWhereEnumerator<int, TConcat_SelectInnerItem, TConcat_SelectInnerEnumerator, TConcat_SelectProjection, TConcat_SelectPredicate>> Concat<TConcat_SelectInnerItem, TConcat_SelectInnerEnumerable, TConcat_SelectInnerEnumerator, TConcat_SelectProjection, TConcat_SelectPredicate>(this RangeEnumerable source, SelectWhereEnumerable<int, TConcat_SelectInnerItem, TConcat_SelectInnerEnumerable, TConcat_SelectInnerEnumerator, TConcat_SelectProjection, TConcat_SelectPredicate> second)
//            where TConcat_SelectInnerEnumerable : struct, IStructEnumerable<TConcat_SelectInnerItem, TConcat_SelectInnerEnumerator>
//            where TConcat_SelectInnerEnumerator : struct, IStructEnumerator<TConcat_SelectInnerItem>
//            where TConcat_SelectProjection : struct, IStructProjection<int, TConcat_SelectInnerItem>
//            where TConcat_SelectPredicate : struct, IStructPredicate<int>
//        => CommonImplementation.Concat<int, RangeEnumerable, RangeEnumerator, SelectWhereEnumerable<int, TConcat_SelectInnerItem, TConcat_SelectInnerEnumerable, TConcat_SelectInnerEnumerator, TConcat_SelectProjection, TConcat_SelectPredicate>, SelectWhereEnumerator<int, TConcat_SelectInnerItem, TConcat_SelectInnerEnumerator, TConcat_SelectProjection, TConcat_SelectPredicate>>(ref source, ref second);

//        public static ConcatEnumerable<int, RangeEnumerable, RangeEnumerator, WhereSelectEnumerable<int, TConcat_WhereInnerItem, TConcat_WhereInnerEnumerable, TConcat_WhereInnerEnumerator, TConcat_WherePredicate, TConcat_WhereProjection>, WhereSelectEnumerator<int, TConcat_WhereInnerItem, TConcat_WhereInnerEnumerator, TConcat_WherePredicate, TConcat_WhereProjection>> Concat<TConcat_WhereInnerItem, TConcat_WhereInnerEnumerable, TConcat_WhereInnerEnumerator, TConcat_WherePredicate, TConcat_WhereProjection>(this RangeEnumerable source, WhereSelectEnumerable<int, TConcat_WhereInnerItem, TConcat_WhereInnerEnumerable, TConcat_WhereInnerEnumerator, TConcat_WherePredicate, TConcat_WhereProjection> second)
//            where TConcat_WhereInnerEnumerable : struct, IStructEnumerable<TConcat_WhereInnerItem, TConcat_WhereInnerEnumerator>
//            where TConcat_WhereInnerEnumerator : struct, IStructEnumerator<TConcat_WhereInnerItem>
//            where TConcat_WherePredicate : struct, IStructPredicate<TConcat_WhereInnerItem>
//            where TConcat_WhereProjection : struct, IStructProjection<int, TConcat_WhereInnerItem>
//        => CommonImplementation.Concat<int, RangeEnumerable, RangeEnumerator, WhereSelectEnumerable<int, TConcat_WhereInnerItem, TConcat_WhereInnerEnumerable, TConcat_WhereInnerEnumerator, TConcat_WherePredicate, TConcat_WhereProjection>, WhereSelectEnumerator<int, TConcat_WhereInnerItem, TConcat_WhereInnerEnumerator, TConcat_WherePredicate, TConcat_WhereProjection>>(ref source, ref second);

//        public static ConcatEnumerable<int, RangeEnumerable, RangeEnumerator, GroupByCollectionDefaultEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, int, TGroupByEnumerable, TGroupByEnumerator>, GroupByCollectionDefaultEnumerator<TGroupByInItem, TGroupByKey, TGroupByElement, int, TGroupByEnumerator>> Concat<TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByEnumerable, TGroupByEnumerator>(this RangeEnumerable source, GroupByCollectionDefaultEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, int, TGroupByEnumerable, TGroupByEnumerator> second)
//            where TGroupByEnumerable : struct, IStructEnumerable<TGroupByInItem, TGroupByEnumerator>
//            where TGroupByEnumerator : struct, IStructEnumerator<TGroupByInItem>
//        => CommonImplementation.Concat<int, RangeEnumerable, RangeEnumerator, GroupByCollectionDefaultEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, int, TGroupByEnumerable, TGroupByEnumerator>, GroupByCollectionDefaultEnumerator<TGroupByInItem, TGroupByKey, TGroupByElement, int, TGroupByEnumerator>>(ref source, ref second);

//        public static ConcatEnumerable<int, RangeEnumerable, RangeEnumerator, GroupByCollectionSpecificEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, int, TGroupByEnumerable, TGroupByEnumerator>, GroupByCollectionSpecificEnumerator<TGroupByInItem, TGroupByKey, TGroupByElement, int, TGroupByEnumerator>> Concat<TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByEnumerable, TGroupByEnumerator>(this RangeEnumerable source, GroupByCollectionSpecificEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, int, TGroupByEnumerable, TGroupByEnumerator> second)
//            where TGroupByEnumerable : struct, IStructEnumerable<TGroupByInItem, TGroupByEnumerator>
//            where TGroupByEnumerator : struct, IStructEnumerator<TGroupByInItem>
//        => CommonImplementation.Concat<int, RangeEnumerable, RangeEnumerator, GroupByCollectionSpecificEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, int, TGroupByEnumerable, TGroupByEnumerator>, GroupByCollectionSpecificEnumerator<TGroupByInItem, TGroupByKey, TGroupByElement, int, TGroupByEnumerator>>(ref source, ref second);

//        public static ConcatEnumerable<int, RangeEnumerable, RangeEnumerator, SelectManyBridgeEnumerable<TSelectManyInItem, int, TBridgeType, TSelectManyBridger, TInnerEnumerable, TInnerEnumerator, TProjectedEnumerator>, SelectManyBridgeEnumerator<TSelectManyInItem, int, TBridgeType, TSelectManyBridger, TInnerEnumerator, TProjectedEnumerator>> Concat<TSelectManyInItem, TBridgeType, TSelectManyBridger, TInnerEnumerable, TInnerEnumerator, TProjectedEnumerator>(this RangeEnumerable source, SelectManyBridgeEnumerable<TSelectManyInItem, int, TBridgeType, TSelectManyBridger, TInnerEnumerable, TInnerEnumerator, TProjectedEnumerator> second)
//            where TBridgeType : class
//            where TInnerEnumerable : struct, IStructEnumerable<TSelectManyInItem, TInnerEnumerator>
//            where TInnerEnumerator : struct, IStructEnumerator<TSelectManyInItem>
//            where TProjectedEnumerator : struct, IStructEnumerator<int>
//            where TSelectManyBridger : struct, IStructBridger<int, TBridgeType, TProjectedEnumerator>
//        => CommonImplementation.Concat<int, RangeEnumerable, RangeEnumerator, SelectManyBridgeEnumerable<TSelectManyInItem, int, TBridgeType, TSelectManyBridger, TInnerEnumerable, TInnerEnumerator, TProjectedEnumerator>, SelectManyBridgeEnumerator<TSelectManyInItem, int, TBridgeType, TSelectManyBridger, TInnerEnumerator, TProjectedEnumerator>>(ref source, ref second);

//        public static ConcatEnumerable<int, RangeEnumerable, RangeEnumerator, SelectManyCollectionEnumerable<TSelectManyInItem, int, TCollectionItem, TInnerEnumerable, TInnerEnumerator, TProjectedEnumerable, TProjectedEnumerator>, SelectManyCollectionEnumerator<TSelectManyInItem, int, TCollectionItem, TInnerEnumerator, TProjectedEnumerable, TProjectedEnumerator>> Concat<TSelectManyInItem, TCollectionItem, TInnerEnumerable, TInnerEnumerator, TProjectedEnumerable, TProjectedEnumerator>(this RangeEnumerable source, SelectManyCollectionEnumerable<TSelectManyInItem, int, TCollectionItem, TInnerEnumerable, TInnerEnumerator, TProjectedEnumerable, TProjectedEnumerator> second)
//            where TInnerEnumerable : struct, IStructEnumerable<TSelectManyInItem, TInnerEnumerator>
//            where TInnerEnumerator : struct, IStructEnumerator<TSelectManyInItem>
//            where TProjectedEnumerable : struct, IStructEnumerable<TCollectionItem, TProjectedEnumerator>
//            where TProjectedEnumerator : struct, IStructEnumerator<TCollectionItem>
//        => CommonImplementation.Concat<int, RangeEnumerable, RangeEnumerator, SelectManyCollectionEnumerable<TSelectManyInItem, int, TCollectionItem, TInnerEnumerable, TInnerEnumerator, TProjectedEnumerable, TProjectedEnumerator>, SelectManyCollectionEnumerator<TSelectManyInItem, int, TCollectionItem, TInnerEnumerator, TProjectedEnumerable, TProjectedEnumerator>>(ref source, ref second);

//        public static ConcatEnumerable<int, RangeEnumerable, RangeEnumerator, ZipEnumerable<int, TZipFirsint, TZipSecondItem, TZipFirstEnumerable, TZipFirstEnumerator, TZipSecondEnumerable, TZipSecondEnumerator>, ZipEnumerator<int, TZipFirsint, TZipSecondItem, TZipFirstEnumerator, TZipSecondEnumerator>> Concat<TZipFirsint, TZipSecondItem, TZipFirstEnumerable, TZipFirstEnumerator, TZipSecondEnumerable, TZipSecondEnumerator>(this RangeEnumerable source, ZipEnumerable<int, TZipFirsint, TZipSecondItem, TZipFirstEnumerable, TZipFirstEnumerator, TZipSecondEnumerable, TZipSecondEnumerator> second)
//            where TZipFirstEnumerable : struct, IStructEnumerable<TZipFirsint, TZipFirstEnumerator>
//            where TZipFirstEnumerator : struct, IStructEnumerator<TZipFirsint>
//            where TZipSecondEnumerable : struct, IStructEnumerable<TZipSecondItem, TZipSecondEnumerator>
//            where TZipSecondEnumerator : struct, IStructEnumerator<TZipSecondItem>
//        => CommonImplementation.Concat<int, RangeEnumerable, RangeEnumerator, ZipEnumerable<int, TZipFirsint, TZipSecondItem, TZipFirstEnumerable, TZipFirstEnumerator, TZipSecondEnumerable, TZipSecondEnumerator>, ZipEnumerator<int, TZipFirsint, TZipSecondItem, TZipFirstEnumerator, TZipSecondEnumerator>>(ref source, ref second);

//        public static ConcatEnumerable<int, RangeEnumerable, RangeEnumerator, SelectManyCollectionIndexedEnumerable<TSelectManyInItem, int, TCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>, SelectManyCollectionIndexedEnumerator<TSelectManyInItem, int, TCollectionItem, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>> Concat<TSelectManyInItem, TCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyCollectionIndexedEnumerable<TSelectManyInItem, int, TCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator> second)
//            where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectManyInItem, TSelectManyInnerEnumerator>
//            where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectManyInItem>
//            where TSelectManyProjectedEnumerable : struct, IStructEnumerable<TCollectionItem, TSelectManyProjectedEnumerator>
//            where TSelectManyProjectedEnumerator : struct, IStructEnumerator<TCollectionItem>
//        => CommonImplementation.Concat<int, RangeEnumerable, RangeEnumerator, SelectManyCollectionIndexedEnumerable<TSelectManyInItem, int, TCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>, SelectManyCollectionIndexedEnumerator<TSelectManyInItem, int, TCollectionItem, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>>(ref source, ref second);

//        public static ConcatEnumerable<int, RangeEnumerable, RangeEnumerator, SelectManyCollectionIndexedBridgeEnumerable<TSelectManyInItem, int, TCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyCollectionIndexedBridgeEnumerator<TSelectManyInItem, int, TCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>> Concat<TSelectManyInItem, TCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyCollectionIndexedBridgeEnumerable<TSelectManyInItem, int, TCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator> second)
//            where TSelectManyBridgeType : class
//            where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectManyInItem, TSelectManyInnerEnumerator>
//            where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectManyInItem>
//            where TSelectManyProjectedEnumerator : struct, IStructEnumerator<TCollectionItem>
//            where TSelectManyBridger : struct, IStructBridger<TCollectionItem, TSelectManyBridgeType, TSelectManyProjectedEnumerator>
//        => CommonImplementation.Concat<int, RangeEnumerable, RangeEnumerator, SelectManyCollectionIndexedBridgeEnumerable<TSelectManyInItem, int, TCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyCollectionIndexedBridgeEnumerator<TSelectManyInItem, int, TCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>>(ref source, ref second);

//        public static ConcatEnumerable<int, RangeEnumerable, RangeEnumerator, SelectManyCollectionBridgeEnumerable<TSelectManyInItem, int, TCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TInnerEnumerable, TInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyCollectionBridgeEnumerator<TSelectManyInItem, int, TCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TInnerEnumerator, TSelectManyProjectedEnumerator>> Concat<TSelectManyInItem, TCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TInnerEnumerable, TInnerEnumerator, TSelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyCollectionBridgeEnumerable<TSelectManyInItem, int, TCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TInnerEnumerable, TInnerEnumerator, TSelectManyProjectedEnumerator> second)
//            where TSelectManyBridgeType : class
//            where TInnerEnumerable : struct, IStructEnumerable<TSelectManyInItem, TInnerEnumerator>
//            where TInnerEnumerator : struct, IStructEnumerator<TSelectManyInItem>
//            where TSelectManyProjectedEnumerator : struct, IStructEnumerator<TCollectionItem>
//            where TSelectManyBridger : struct, IStructBridger<TCollectionItem, TSelectManyBridgeType, TSelectManyProjectedEnumerator>
//        => CommonImplementation.Concat<int, RangeEnumerable, RangeEnumerator, SelectManyCollectionBridgeEnumerable<TSelectManyInItem, int, TCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TInnerEnumerable, TInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyCollectionBridgeEnumerator<TSelectManyInItem, int, TCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TInnerEnumerator, TSelectManyProjectedEnumerator>>(ref source, ref second);

//        public static ConcatEnumerable<int, RangeEnumerable, RangeEnumerator, JoinSpecificEnumerable<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerable, TJoinRightEnumerator>, JoinSpecificEnumerator<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerator>> Concat<TJoinKeyItem, TJoinLefint, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerable, TJoinRightEnumerator>(this RangeEnumerable source, JoinSpecificEnumerable<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerable, TJoinRightEnumerator> second)
//            where TJoinLeftEnumerable : struct, IStructEnumerable<TJoinLefint, TJoinLeftEnumerator>
//            where TJoinLeftEnumerator : struct, IStructEnumerator<TJoinLefint>
//            where TJoinRightEnumerable : struct, IStructEnumerable<TJoinRighint, TJoinRightEnumerator>
//            where TJoinRightEnumerator : struct, IStructEnumerator<TJoinRighint>
//        => CommonImplementation.Concat<int, RangeEnumerable, RangeEnumerator, JoinSpecificEnumerable<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerable, TJoinRightEnumerator>, JoinSpecificEnumerator<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerator>>(ref source, ref second);

//        public static ConcatEnumerable<int, RangeEnumerable, RangeEnumerator, JoinDefaultEnumerable<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerable, TJoinRightEnumerator>, JoinDefaultEnumerator<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerator>> Concat<TJoinKeyItem, TJoinLefint, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerable, TJoinRightEnumerator>(this RangeEnumerable source, JoinDefaultEnumerable<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerable, TJoinRightEnumerator> second)
//            where TJoinLeftEnumerable : struct, IStructEnumerable<TJoinLefint, TJoinLeftEnumerator>
//            where TJoinLeftEnumerator : struct, IStructEnumerator<TJoinLefint>
//            where TJoinRightEnumerable : struct, IStructEnumerable<TJoinRighint, TJoinRightEnumerator>
//            where TJoinRightEnumerator : struct, IStructEnumerator<TJoinRighint>
//        => CommonImplementation.Concat<int, RangeEnumerable, RangeEnumerator, JoinDefaultEnumerable<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerable, TJoinRightEnumerator>, JoinDefaultEnumerator<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerator>>(ref source, ref second);

//        public static ConcatEnumerable<int, RangeEnumerable, RangeEnumerator, GroupJoinSpecificEnumerable<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator>, GroupJoinSpecificEnumerator<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerator>> Concat<TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator>(this RangeEnumerable source, GroupJoinSpecificEnumerable<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator> second)
//            where TGroupJoinLeftEnumerable : struct, IStructEnumerable<TGroupJoinLefint, TGroupJoinLeftEnumerator>
//            where TGroupJoinLeftEnumerator : struct, IStructEnumerator<TGroupJoinLefint>
//            where TGroupJoinRightEnumerable : struct, IStructEnumerable<TGroupJoinRighint, TGroupJoinRightEnumerator>
//            where TGroupJoinRightEnumerator : struct, IStructEnumerator<TGroupJoinRighint>
//        => CommonImplementation.Concat<int, RangeEnumerable, RangeEnumerator, GroupJoinSpecificEnumerable<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator>, GroupJoinSpecificEnumerator<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerator>>(ref source, ref second);

//        public static ConcatEnumerable<int, RangeEnumerable, RangeEnumerator, GroupJoinDefaultEnumerable<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator>, GroupJoinDefaultEnumerator<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerator>> Concat<TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator>(this RangeEnumerable source, GroupJoinDefaultEnumerable<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator> second)
//            where TGroupJoinLeftEnumerable : struct, IStructEnumerable<TGroupJoinLefint, TGroupJoinLeftEnumerator>
//            where TGroupJoinLeftEnumerator : struct, IStructEnumerator<TGroupJoinLefint>
//            where TGroupJoinRightEnumerable : struct, IStructEnumerable<TGroupJoinRighint, TGroupJoinRightEnumerator>
//            where TGroupJoinRightEnumerator : struct, IStructEnumerator<TGroupJoinRighint>
//        => CommonImplementation.Concat<int, RangeEnumerable, RangeEnumerator, GroupJoinDefaultEnumerable<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator>, GroupJoinDefaultEnumerator<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerator>>(ref source, ref second);

//        public static ConcatEnumerable<int, RangeEnumerable, RangeEnumerator, OneItemDefaultEnumerable<int>, OneItemDefaultEnumerator<int>> Concat(this RangeEnumerable source, OneItemDefaultEnumerable<int> second)
//        => CommonImplementation.Concat<int, RangeEnumerable, RangeEnumerator, OneItemDefaultEnumerable<int>, OneItemDefaultEnumerator<int>>(ref source, ref second);

//        public static ConcatEnumerable<int, RangeEnumerable, RangeEnumerator, OneItemSpecificEnumerable<int>, OneItemSpecificEnumerator<int>> Concat(this RangeEnumerable source, OneItemSpecificEnumerable<int> second)
//        => CommonImplementation.Concat<int, RangeEnumerable, RangeEnumerator, OneItemSpecificEnumerable<int>, OneItemSpecificEnumerator<int>>(ref source, ref second);

//        public static ConcatEnumerable<int, RangeEnumerable, RangeEnumerator, OneItemDefaultOrderedEnumerable<int>, OneItemDefaultOrderedEnumerator<int>> Concat(this RangeEnumerable source, OneItemDefaultOrderedEnumerable<int> second)
//        => CommonImplementation.Concat<int, RangeEnumerable, RangeEnumerator, OneItemDefaultOrderedEnumerable<int>, OneItemDefaultOrderedEnumerator<int>>(ref source, ref second);

//        public static ConcatEnumerable<int, RangeEnumerable, RangeEnumerator, OneItemSpecificOrderedEnumerable<int>, OneItemSpecificOrderedEnumerator<int>> Concat(this RangeEnumerable source, OneItemSpecificOrderedEnumerable<int> second)
//        => CommonImplementation.Concat<int, RangeEnumerable, RangeEnumerator, OneItemSpecificOrderedEnumerable<int>, OneItemSpecificOrderedEnumerator<int>>(ref source, ref second);

//        public static ConcatEnumerable<int, RangeEnumerable, RangeEnumerator, SkipLastEnumerable<int, TSkipLastInnerEnumerable, TSkipLastInnerEnumerator>, SkipLastEnumerator<int, TSkipLastInnerEnumerator>> Concat<TSkipLastInnerEnumerable, TSkipLastInnerEnumerator>(this RangeEnumerable source, SkipLastEnumerable<int, TSkipLastInnerEnumerable, TSkipLastInnerEnumerator> second)
//            where TSkipLastInnerEnumerable : struct, IStructEnumerable<int, TSkipLastInnerEnumerator>
//            where TSkipLastInnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Concat<int, RangeEnumerable, RangeEnumerator, SkipLastEnumerable<int, TSkipLastInnerEnumerable, TSkipLastInnerEnumerator>, SkipLastEnumerator<int, TSkipLastInnerEnumerator>>(ref source, ref second);

//        public static ConcatEnumerable<int, RangeEnumerable, RangeEnumerator, TakeLastEnumerable<int, TTakeLastInnerEnumerable, TTakeLastInnerEnumerator>, TakeLastEnumerator<int, TTakeLastInnerEnumerator>> Concat<TTakeLastInnerEnumerable, TTakeLastInnerEnumerator>(this RangeEnumerable source, TakeLastEnumerable<int, TTakeLastInnerEnumerable, TTakeLastInnerEnumerator> second)
//            where TTakeLastInnerEnumerable : struct, IStructEnumerable<int, TTakeLastInnerEnumerator>
//            where TTakeLastInnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Concat<int, RangeEnumerable, RangeEnumerator, TakeLastEnumerable<int, TTakeLastInnerEnumerable, TTakeLastInnerEnumerator>, TakeLastEnumerator<int, TTakeLastInnerEnumerator>>(ref source, ref second);

//        public static ConcatEnumerable<int, RangeEnumerable, RangeEnumerator, AppendEnumerable<int, TAppendInnerEnumerable, TAppendInnerEnumerator>, AppendEnumerator<int, TAppendInnerEnumerator>> Concat<TAppendInnerEnumerable, TAppendInnerEnumerator>(this RangeEnumerable source, AppendEnumerable<int, TAppendInnerEnumerable, TAppendInnerEnumerator> second)
//            where TAppendInnerEnumerable : struct, IStructEnumerable<int, TAppendInnerEnumerator>
//            where TAppendInnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Concat<int, RangeEnumerable, RangeEnumerator, AppendEnumerable<int, TAppendInnerEnumerable, TAppendInnerEnumerator>, AppendEnumerator<int, TAppendInnerEnumerator>>(ref source, ref second);

//        public static ConcatEnumerable<int, RangeEnumerable, RangeEnumerator, PrependEnumerable<int, TPrependInnerEnumerable, TPrependInnerEnumerator>, PrependEnumerator<int, TPrependInnerEnumerator>> Concat<TPrependInnerEnumerable, TPrependInnerEnumerator>(this RangeEnumerable source, PrependEnumerable<int, TPrependInnerEnumerable, TPrependInnerEnumerator> second)
//            where TPrependInnerEnumerable : struct, IStructEnumerable<int, TPrependInnerEnumerator>
//            where TPrependInnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Concat<int, RangeEnumerable, RangeEnumerator, PrependEnumerable<int, TPrependInnerEnumerable, TPrependInnerEnumerator>, PrependEnumerator<int, TPrependInnerEnumerator>>(ref source, ref second);

//        // Contains

//        public static bool Contains(this RangeEnumerable source, int value)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));

//            var start = source.Start;
//            var end = start + source.InnerCount;

//            return value >= start && value < end;
//        }

//        public static bool Contains(this RangeEnumerable source, int value, IEqualityComparer<int> comparer)
//        => CommonImplementation.Contains<int, RangeEnumerable, RangeEnumerator>(ref source, value, comparer);

//        // Count

//        public static int Count(this RangeEnumerable source)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));

//            return source.InnerCount;
//        }

//        public static int Count(this RangeEnumerable source, Func<int, bool> predicate)
//        => CommonImplementation.Count<int, RangeEnumerable, RangeEnumerator>(ref source, predicate);

//        public static long LongCount(this RangeEnumerable source)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));

//            return source.InnerCount;
//        }

//        public static long LongCount(this RangeEnumerable source, Func<int, bool> predicate)
//        => CommonImplementation.LongCount<int, RangeEnumerable, RangeEnumerator>(ref source, predicate);

//        // DefaultIfEmpty

//        public static DefaultIfEmptyDefaultEnumerable<int, RangeEnumerable, RangeEnumerator> DefaultIfEmpty(this RangeEnumerable source)
//        => CommonImplementation.DefaultIfEmpty<int, RangeEnumerable, RangeEnumerator>(ref source);

//        public static DefaultIfEmptySpecificEnumerable<int, RangeEnumerable, RangeEnumerator> DefaultIfEmpty(this RangeEnumerable source, int item)
//        => CommonImplementation.DefaultIfEmpty<int, RangeEnumerable, RangeEnumerator>(ref source, item);

//        // Distinct

//        public static RangeEnumerable Distinct(this RangeEnumerable source)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));

//            return source;
//        }

//        public static DistinctSpecificEnumerable<int, RangeEnumerable, RangeEnumerator> Distinct(this RangeEnumerable source, IEqualityComparer<int> comparer)
//        => CommonImplementation.Distinct<int, RangeEnumerable, RangeEnumerator>(ref source, comparer);

//        // ElementAt

//        public static int ElementAt(this RangeEnumerable source, int index)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            if (index < 0 || index >= source.InnerCount) throw CommonImplementation.OutOfRange(nameof(index));

//            return source.Start + index;
//        }

//        public static int ElementAtOrDefault(this RangeEnumerable source, int index)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            if (index < 0 || index >= source.InnerCount)
//            {
//                return default(int);
//            }

//            return source.Start + index;
//        }

//        // Except

//        public static ExceptDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, BoxedEnumerable<int>, BoxedEnumerator<int>> Except(this RangeEnumerable source, BoxedEnumerable<int> second)
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, BoxedEnumerable<int>, BoxedEnumerator<int>>(ref source, ref second);

//        public static ExceptDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, IEnumerable<int>, IEnumerableBridger<int>, IdentityEnumerator<int>>, IdentityEnumerator<int>> Except(this RangeEnumerable source, IEnumerable<int> second)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(second, nameof(second));

//            return CommonImplementation.ExceptImpl<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, IEnumerable<int>, IEnumerableBridger<int>, IdentityEnumerator<int>>, IdentityEnumerator<int>>(ref source, ref bridge);
//        }

//        public static ExceptDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, Dictionary<int, TDictionaryValue>.KeyCollection, DictionaryKeysBridger<int, TDictionaryValue>, DictionaryKeysEnumerator<int, TDictionaryValue>>, DictionaryKeysEnumerator<int, TDictionaryValue>> Except<TDictionaryValue>(this RangeEnumerable source, Dictionary<int, TDictionaryValue>.KeyCollection second)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(second, nameof(second));

//            return CommonImplementation.ExceptImpl<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, Dictionary<int, TDictionaryValue>.KeyCollection, DictionaryKeysBridger<int, TDictionaryValue>, DictionaryKeysEnumerator<int, TDictionaryValue>>, DictionaryKeysEnumerator<int, TDictionaryValue>>(ref source, ref bridge);
//        }

//        public static ExceptDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, Dictionary<TExcept_DictionaryKey, int>.ValueCollection, DictionaryValuesBridger<TExcept_DictionaryKey, int>, DictionaryValuesEnumerator<TExcept_DictionaryKey, int>>, DictionaryValuesEnumerator<TExcept_DictionaryKey, int>> Except<TExcept_DictionaryKey>(this RangeEnumerable source, Dictionary<TExcept_DictionaryKey, int>.ValueCollection second)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(second, nameof(second));

//            return CommonImplementation.ExceptImpl<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, Dictionary<TExcept_DictionaryKey, int>.ValueCollection, DictionaryValuesBridger<TExcept_DictionaryKey, int>, DictionaryValuesEnumerator<TExcept_DictionaryKey, int>>, DictionaryValuesEnumerator<TExcept_DictionaryKey, int>>(ref source, ref bridge);
//        }

//        public static ExceptDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, HashSet<int>, HashSetBridger<int>, HashSetEnumerator<int>>, HashSetEnumerator<int>> Except(this RangeEnumerable source, HashSet<int> second)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(second, nameof(second));

//            return CommonImplementation.ExceptImpl<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, HashSet<int>, HashSetBridger<int>, HashSetEnumerator<int>>, HashSetEnumerator<int>>(ref source, ref bridge);
//        }

//        public static ExceptDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, LinkedList<int>, LinkedListBridger<int>, LinkedListEnumerator<int>>, LinkedListEnumerator<int>> Except(this RangeEnumerable source, LinkedList<int> second)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(second, nameof(second));

//            return CommonImplementation.ExceptImpl<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, LinkedList<int>, LinkedListBridger<int>, LinkedListEnumerator<int>>, LinkedListEnumerator<int>>(ref source, ref bridge);
//        }

//        public static ExceptDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, List<int>, ListBridger<int>, ListEnumerator<int>>, ListEnumerator<int>> Except(this RangeEnumerable source, List<int> second)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(second, nameof(second));

//            return CommonImplementation.ExceptImpl<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, List<int>, ListBridger<int>, ListEnumerator<int>>, ListEnumerator<int>>(ref source, ref bridge);
//        }

//        public static ExceptDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, Queue<int>, QueueBridger<int>, QueueEnumerator<int>>, QueueEnumerator<int>> Except(this RangeEnumerable source, Queue<int> second)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(second, nameof(second));

//            return CommonImplementation.ExceptImpl<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, Queue<int>, QueueBridger<int>, QueueEnumerator<int>>, QueueEnumerator<int>>(ref source, ref bridge);
//        }

//        public static ExceptDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, SortedDictionary<int, TExcept_DictionaryValue>.KeyCollection, SortedDictionaryKeysBridger<int, TExcept_DictionaryValue>, SortedDictionaryKeysEnumerator<int, TExcept_DictionaryValue>>, SortedDictionaryKeysEnumerator<int, TExcept_DictionaryValue>> Except<TExcept_DictionaryValue>(this RangeEnumerable source, SortedDictionary<int, TExcept_DictionaryValue>.KeyCollection second)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(second, nameof(second));

//            return CommonImplementation.ExceptImpl<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, SortedDictionary<int, TExcept_DictionaryValue>.KeyCollection, SortedDictionaryKeysBridger<int, TExcept_DictionaryValue>, SortedDictionaryKeysEnumerator<int, TExcept_DictionaryValue>>, SortedDictionaryKeysEnumerator<int, TExcept_DictionaryValue>>(ref source, ref bridge);
//        }

//        public static ExceptDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, SortedDictionary<TExcept_DictionaryKey, int>.ValueCollection, SortedDictionaryValuesBridger<TExcept_DictionaryKey, int>, SortedDictionaryValuesEnumerator<TExcept_DictionaryKey, int>>, SortedDictionaryValuesEnumerator<TExcept_DictionaryKey, int>> Except<TExcept_DictionaryKey>(this RangeEnumerable source, SortedDictionary<TExcept_DictionaryKey, int>.ValueCollection second)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(second, nameof(second));

//            return CommonImplementation.ExceptImpl<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, SortedDictionary<TExcept_DictionaryKey, int>.ValueCollection, SortedDictionaryValuesBridger<TExcept_DictionaryKey, int>, SortedDictionaryValuesEnumerator<TExcept_DictionaryKey, int>>, SortedDictionaryValuesEnumerator<TExcept_DictionaryKey, int>>(ref source, ref bridge);
//        }

//        public static ExceptDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, SortedSet<int>, SortedSetBridger<int>, SortedSetEnumerator<int>>, SortedSetEnumerator<int>> Except(this RangeEnumerable source, SortedSet<int> second)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(second, nameof(second));

//            return CommonImplementation.ExceptImpl<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, SortedSet<int>, SortedSetBridger<int>, SortedSetEnumerator<int>>, SortedSetEnumerator<int>>(ref source, ref bridge);
//        }

//        public static ExceptDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, Stack<int>, StackBridger<int>, StackEnumerator<int>>, StackEnumerator<int>> Except(this RangeEnumerable source, Stack<int> second)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(second, nameof(second));

//            return CommonImplementation.ExceptImpl<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, Stack<int>, StackBridger<int>, StackEnumerator<int>>, StackEnumerator<int>>(ref source, ref bridge);
//        }

//        public static ExceptDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, int[], ArrayBridger<int>, ArrayEnumerator<int>>, ArrayEnumerator<int>> Except(this RangeEnumerable source, int[] second)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(second, nameof(second));

//            return CommonImplementation.ExceptImpl<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, int[], ArrayBridger<int>, ArrayEnumerator<int>>, ArrayEnumerator<int>>(ref source, ref bridge);
//        }

//        public static ExceptDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, TExcept_IdentityBridgeType, TExcept_IdentityBridger, TExcept_IdentityEnumerator>, TExcept_IdentityEnumerator> Except<TExcept_IdentityBridgeType, TExcept_IdentityBridger, TExcept_IdentityEnumerator>(this RangeEnumerable source, IdentityEnumerable<int, TExcept_IdentityBridgeType, TExcept_IdentityBridger, TExcept_IdentityEnumerator> second)
//        where TExcept_IdentityBridgeType : class
//        where TExcept_IdentityEnumerator : struct, IStructEnumerator<int>
//        where TExcept_IdentityBridger : struct, IStructBridger<int, TExcept_IdentityBridgeType, TExcept_IdentityEnumerator>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, TExcept_IdentityBridgeType, TExcept_IdentityBridger, TExcept_IdentityEnumerator>, TExcept_IdentityEnumerator>(ref source, ref second);

//        public static ExceptDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, ConcatEnumerable<int, TInnerLeftEnumerable, TInnerLeftEnumerator, TInnerRightEnumerable, TInnerRightEnumerator>, ConcatEnumerator<int, TInnerLeftEnumerator, TInnerRightEnumerator>> Except<TInnerLeftEnumerable, TInnerLeftEnumerator, TInnerRightEnumerable, TInnerRightEnumerator>(this RangeEnumerable source, ConcatEnumerable<int, TInnerLeftEnumerable, TInnerLeftEnumerator, TInnerRightEnumerable, TInnerRightEnumerator> second)
//        where TInnerLeftEnumerable : struct, IStructEnumerable<int, TInnerLeftEnumerator>
//        where TInnerLeftEnumerator : struct, IStructEnumerator<int>
//        where TInnerRightEnumerable : struct, IStructEnumerable<int, TInnerRightEnumerator>
//        where TInnerRightEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, ConcatEnumerable<int, TInnerLeftEnumerable, TInnerLeftEnumerator, TInnerRightEnumerable, TInnerRightEnumerator>, ConcatEnumerator<int, TInnerLeftEnumerator, TInnerRightEnumerator>>(ref source, ref second);

//        public static ExceptDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, EmptyEnumerable<int>, EmptyEnumerator<int>> Except(this RangeEnumerable source, EmptyEnumerable<int> second)
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, EmptyEnumerable<int>, EmptyEnumerator<int>>(ref source, ref second);

//        public static ExceptDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, RepeatEnumerable<int>, RepeatEnumerator<int>> Except(this RangeEnumerable source, RepeatEnumerable<int> second)
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, RepeatEnumerable<int>, RepeatEnumerator<int>>(ref source, ref second);

//        public static ExceptDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, SelectEnumerable<TExcept_SelectInItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, SelectEnumerator<TExcept_SelectInItem, int, TExcept_InnerEnumerator>> Except<TExcept_SelectInItem, TExcept_InnerEnumerable, TExcept_InnerEnumerator>(this RangeEnumerable source, SelectEnumerable<TExcept_SelectInItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator> second)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<TExcept_SelectInItem, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<TExcept_SelectInItem>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, SelectEnumerable<TExcept_SelectInItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, SelectEnumerator<TExcept_SelectInItem, int, TExcept_InnerEnumerator>>(ref source, ref second);

//        public static ExceptDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, SelectIndexedEnumerable<TExcept_SelectInItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, SelectIndexedEnumerator<TExcept_SelectInItem, int, TExcept_InnerEnumerator>> Except<TExcept_SelectInItem, TExcept_InnerEnumerable, TExcept_InnerEnumerator>(this RangeEnumerable source, SelectIndexedEnumerable<TExcept_SelectInItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator> second)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<TExcept_SelectInItem, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<TExcept_SelectInItem>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, SelectIndexedEnumerable<TExcept_SelectInItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, SelectIndexedEnumerator<TExcept_SelectInItem, int, TExcept_InnerEnumerator>>(ref source, ref second);

//        public static ExceptDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, SelectManyBridgeEnumerable<TExcept_SelectManyInItem, int, TExcept_BridgeType, TExcept_Bridger, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_ProjectedEnumerator>, SelectManyBridgeEnumerator<TExcept_SelectManyInItem, int, TExcept_BridgeType, TExcept_Bridger, TExcept_InnerEnumerator, TExcept_ProjectedEnumerator>> Except<TExcept_SelectManyInItem, TExcept_BridgeType, TExcept_Bridger, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_ProjectedEnumerator>(this RangeEnumerable source, SelectManyBridgeEnumerable<TExcept_SelectManyInItem, int, TExcept_BridgeType, TExcept_Bridger, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_ProjectedEnumerator> second)
//        where TExcept_BridgeType : class
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<TExcept_SelectManyInItem, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<TExcept_SelectManyInItem>
//        where TExcept_ProjectedEnumerator : struct, IStructEnumerator<int>
//        where TExcept_Bridger : struct, IStructBridger<int, TExcept_BridgeType, TExcept_ProjectedEnumerator>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, SelectManyBridgeEnumerable<TExcept_SelectManyInItem, int, TExcept_BridgeType, TExcept_Bridger, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_ProjectedEnumerator>, SelectManyBridgeEnumerator<TExcept_SelectManyInItem, int, TExcept_BridgeType, TExcept_Bridger, TExcept_InnerEnumerator, TExcept_ProjectedEnumerator>>(ref source, ref second);

//        public static ExceptDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, SelectManyIndexedBridgeEnumerable<TExcept_SelectManyInItem, int, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerator>, SelectManyIndexedBridgeEnumerator<TExcept_SelectManyInItem, int, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerator>> Except<TExcept_SelectManyInItem, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyIndexedBridgeEnumerable<TExcept_SelectManyInItem, int, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerator> second)
//        where TExcept_SelectManyBridgeType : class
//        where TExcept_SelectManyInnerEnumerable : struct, IStructEnumerable<TExcept_SelectManyInItem, TExcept_SelectManyInnerEnumerator>
//        where TExcept_SelectManyInnerEnumerator : struct, IStructEnumerator<TExcept_SelectManyInItem>
//        where TExcept_SelectManyProjectedEnumerator : struct, IStructEnumerator<int>
//        where TExcept_Bridger : struct, IStructBridger<int, TExcept_SelectManyBridgeType, TExcept_SelectManyProjectedEnumerator>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, SelectManyIndexedBridgeEnumerable<TExcept_SelectManyInItem, int, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerator>, SelectManyIndexedBridgeEnumerator<TExcept_SelectManyInItem, int, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerator>>(ref source, ref second);

//        public static ExceptDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, SelectManyCollectionBridgeEnumerable<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_SelectManyProjectedEnumerator>, SelectManyCollectionBridgeEnumerator<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_InnerEnumerator, TExcept_SelectManyProjectedEnumerator>> Except<TExcept_SelectManyInItem, TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_SelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyCollectionBridgeEnumerable<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_SelectManyProjectedEnumerator> second)
//        where TExcept_SelectManyBridgeType : class
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<TExcept_SelectManyInItem, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<TExcept_SelectManyInItem>
//        where TExcept_SelectManyProjectedEnumerator : struct, IStructEnumerator<TExcept_CollectionItem>
//        where TExcept_Bridger : struct, IStructBridger<TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_SelectManyProjectedEnumerator>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, SelectManyCollectionBridgeEnumerable<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_SelectManyProjectedEnumerator>, SelectManyCollectionBridgeEnumerator<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_InnerEnumerator, TExcept_SelectManyProjectedEnumerator>>(ref source, ref second);

//        public static ExceptDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, SelectManyCollectionIndexedBridgeEnumerable<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerator>, SelectManyCollectionIndexedBridgeEnumerator<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerator>> Except<TExcept_SelectManyInItem, TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyCollectionIndexedBridgeEnumerable<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerator> second)
//        where TExcept_SelectManyBridgeType : class
//        where TExcept_SelectManyInnerEnumerable : struct, IStructEnumerable<TExcept_SelectManyInItem, TExcept_SelectManyInnerEnumerator>
//        where TExcept_SelectManyInnerEnumerator : struct, IStructEnumerator<TExcept_SelectManyInItem>
//        where TExcept_SelectManyProjectedEnumerator : struct, IStructEnumerator<TExcept_CollectionItem>
//        where TExcept_Bridger : struct, IStructBridger<TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_SelectManyProjectedEnumerator>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, SelectManyCollectionIndexedBridgeEnumerable<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerator>, SelectManyCollectionIndexedBridgeEnumerator<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerator>>(ref source, ref second);

//        public static ExceptDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, SelectManyEnumerable<TExcept_SelectManyInItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_ProjectedEnumerable, TExcept_ProjectedEnumerator>, SelectManyEnumerator<TExcept_SelectManyInItem, int, TExcept_InnerEnumerator, TExcept_ProjectedEnumerable, TExcept_ProjectedEnumerator>> Except<TExcept_SelectManyInItem, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_ProjectedEnumerable, TExcept_ProjectedEnumerator>(this RangeEnumerable source, SelectManyEnumerable<TExcept_SelectManyInItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_ProjectedEnumerable, TExcept_ProjectedEnumerator> second)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<TExcept_SelectManyInItem, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<TExcept_SelectManyInItem>
//        where TExcept_ProjectedEnumerable : struct, IStructEnumerable<int, TExcept_ProjectedEnumerator>
//        where TExcept_ProjectedEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, SelectManyEnumerable<TExcept_SelectManyInItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_ProjectedEnumerable, TExcept_ProjectedEnumerator>, SelectManyEnumerator<TExcept_SelectManyInItem, int, TExcept_InnerEnumerator, TExcept_ProjectedEnumerable, TExcept_ProjectedEnumerator>>(ref source, ref second);

//        public static ExceptDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, SelectManyIndexedEnumerable<TExcept_SelectManyInItem, int, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerable, TExcept_SelectManyProjectedEnumerator>, SelectManyIndexedEnumerator<TExcept_SelectManyInItem, int, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerable, TExcept_SelectManyProjectedEnumerator>> Except<TExcept_SelectManyInItem, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerable, TExcept_SelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyIndexedEnumerable<TExcept_SelectManyInItem, int, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerable, TExcept_SelectManyProjectedEnumerator> second)
//        where TExcept_SelectManyInnerEnumerable : struct, IStructEnumerable<TExcept_SelectManyInItem, TExcept_SelectManyInnerEnumerator>
//        where TExcept_SelectManyInnerEnumerator : struct, IStructEnumerator<TExcept_SelectManyInItem>
//        where TExcept_SelectManyProjectedEnumerable : struct, IStructEnumerable<int, TExcept_SelectManyProjectedEnumerator>
//        where TExcept_SelectManyProjectedEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, SelectManyIndexedEnumerable<TExcept_SelectManyInItem, int, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerable, TExcept_SelectManyProjectedEnumerator>, SelectManyIndexedEnumerator<TExcept_SelectManyInItem, int, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerable, TExcept_SelectManyProjectedEnumerator>>(ref source, ref second);

//        public static ExceptDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, SelectManyCollectionEnumerable<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_ProjectedEnumerable, TExcept_ProjectedEnumerator>, SelectManyCollectionEnumerator<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_InnerEnumerator, TExcept_ProjectedEnumerable, TExcept_ProjectedEnumerator>> Except<TExcept_SelectManyInItem, TExcept_CollectionItem, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_ProjectedEnumerable, TExcept_ProjectedEnumerator>(this RangeEnumerable source, SelectManyCollectionEnumerable<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_ProjectedEnumerable, TExcept_ProjectedEnumerator> second)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<TExcept_SelectManyInItem, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<TExcept_SelectManyInItem>
//        where TExcept_ProjectedEnumerable : struct, IStructEnumerable<TExcept_CollectionItem, TExcept_ProjectedEnumerator>
//        where TExcept_ProjectedEnumerator : struct, IStructEnumerator<TExcept_CollectionItem>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, SelectManyCollectionEnumerable<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_ProjectedEnumerable, TExcept_ProjectedEnumerator>, SelectManyCollectionEnumerator<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_InnerEnumerator, TExcept_ProjectedEnumerable, TExcept_ProjectedEnumerator>>(ref source, ref second);

//        public static ExceptDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, SelectManyCollectionIndexedEnumerable<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerable, TExcept_SelectManyProjectedEnumerator>, SelectManyCollectionIndexedEnumerator<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerable, TExcept_SelectManyProjectedEnumerator>> Except<TExcept_SelectManyInItem, TExcept_CollectionItem, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerable, TExcept_SelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyCollectionIndexedEnumerable<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerable, TExcept_SelectManyProjectedEnumerator> second)
//        where TExcept_SelectManyInnerEnumerable : struct, IStructEnumerable<TExcept_SelectManyInItem, TExcept_SelectManyInnerEnumerator>
//        where TExcept_SelectManyInnerEnumerator : struct, IStructEnumerator<TExcept_SelectManyInItem>
//        where TExcept_SelectManyProjectedEnumerable : struct, IStructEnumerable<TExcept_CollectionItem, TExcept_SelectManyProjectedEnumerator>
//        where TExcept_SelectManyProjectedEnumerator : struct, IStructEnumerator<TExcept_CollectionItem>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, SelectManyCollectionIndexedEnumerable<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerable, TExcept_SelectManyProjectedEnumerator>, SelectManyCollectionIndexedEnumerator<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerable, TExcept_SelectManyProjectedEnumerator>>(ref source, ref second);

//        public static ExceptDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, WhereEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, WhereEnumerator<int, TExcept_InnerEnumerator>> Except<TExcept_InnerEnumerable, TExcept_InnerEnumerator>(this RangeEnumerable source, WhereEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator> second)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<int, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, WhereEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, WhereEnumerator<int, TExcept_InnerEnumerator>>(ref source, ref second);

//        public static ExceptDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, WhereIndexedEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, WhereIndexedEnumerator<int, TExcept_InnerEnumerator>> Except<TExcept_InnerEnumerable, TExcept_InnerEnumerator>(this RangeEnumerable source, WhereIndexedEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator> second)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<int, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, WhereIndexedEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, WhereIndexedEnumerator<int, TExcept_InnerEnumerator>>(ref source, ref second);

//        public static ExceptDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, DefaultIfEmptyDefaultEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, DefaultIfEmptyDefaultEnumerator<int, TExcept_InnerEnumerator>> Except<TExcept_InnerEnumerable, TExcept_InnerEnumerator>(this RangeEnumerable source, DefaultIfEmptyDefaultEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator> second)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<int, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, DefaultIfEmptyDefaultEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, DefaultIfEmptyDefaultEnumerator<int, TExcept_InnerEnumerator>>(ref source, ref second);

//        public static ExceptDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, DefaultIfEmptySpecificEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, DefaultIfEmptySpecificEnumerator<int, TExcept_InnerEnumerator>> Except<TExcept_InnerEnumerable, TExcept_InnerEnumerator>(this RangeEnumerable source, DefaultIfEmptySpecificEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator> second)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<int, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, DefaultIfEmptySpecificEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, DefaultIfEmptySpecificEnumerator<int, TExcept_InnerEnumerator>>(ref source, ref second);

//        public static ExceptDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, TakeEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, TakeEnumerator<int, TExcept_InnerEnumerator>> Except<TExcept_InnerEnumerable, TExcept_InnerEnumerator>(this RangeEnumerable source, TakeEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator> second)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<int, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, TakeEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, TakeEnumerator<int, TExcept_InnerEnumerator>>(ref source, ref second);

//        public static ExceptDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, TakeWhileEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, TakeWhileEnumerator<int, TExcept_InnerEnumerator>> Except<TExcept_InnerEnumerable, TExcept_InnerEnumerator>(this RangeEnumerable source, TakeWhileEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator> second)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<int, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, TakeWhileEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, TakeWhileEnumerator<int, TExcept_InnerEnumerator>>(ref source, ref second);

//        public static ExceptDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, TakeWhileIndexedEnumerable<int, TInnerEnumerable, TInnerEnumerator>, TakeWhileIndexedEnumerator<int, TInnerEnumerator>> Except<TInnerEnumerable, TInnerEnumerator>(this RangeEnumerable source, TakeWhileIndexedEnumerable<int, TInnerEnumerable, TInnerEnumerator> second)
//        where TInnerEnumerable : struct, IStructEnumerable<int, TInnerEnumerator>
//        where TInnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, TakeWhileIndexedEnumerable<int, TInnerEnumerable, TInnerEnumerator>, TakeWhileIndexedEnumerator<int, TInnerEnumerator>>(ref source, ref second);

//        public static ExceptDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, SkipEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, SkipEnumerator<int, TExcept_InnerEnumerator>> Except<TExcept_InnerEnumerable, TExcept_InnerEnumerator>(this RangeEnumerable source, SkipEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator> second)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<int, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, SkipEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, SkipEnumerator<int, TExcept_InnerEnumerator>>(ref source, ref second);

//        public static ExceptDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, SkipWhileEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, SkipWhileEnumerator<int, TExcept_InnerEnumerator>> Except<TExcept_InnerEnumerable, TExcept_InnerEnumerator>(this RangeEnumerable source, SkipWhileEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator> second)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<int, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, SkipWhileEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, SkipWhileEnumerator<int, TExcept_InnerEnumerator>>(ref source, ref second);

//        public static ExceptDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, SkipWhileIndexedEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, SkipWhileIndexedEnumerator<int, TExcept_InnerEnumerator>> Except<TExcept_InnerEnumerable, TExcept_InnerEnumerator>(this RangeEnumerable source, SkipWhileIndexedEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator> second)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<int, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, SkipWhileIndexedEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, SkipWhileIndexedEnumerator<int, TExcept_InnerEnumerator>>(ref source, ref second);

//        public static ExceptDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, CastEnumerable<TExcept_InItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, CastEnumerator<TExcept_InItem, int, TExcept_InnerEnumerator>> Except<TExcept_InItem, TExcept_InnerEnumerable, TExcept_InnerEnumerator>(this RangeEnumerable source, CastEnumerable<TExcept_InItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator> second)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<TExcept_InItem, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<TExcept_InItem>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, CastEnumerable<TExcept_InItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, CastEnumerator<TExcept_InItem, int, TExcept_InnerEnumerator>>(ref source, ref second);

//        public static ExceptDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, OfTypeEnumerable<TExcept_InItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, OfTypeEnumerator<TExcept_InItem, int, TExcept_InnerEnumerator>> Except<TExcept_InItem, TExcept_InnerEnumerable, TExcept_InnerEnumerator>(this RangeEnumerable source, OfTypeEnumerable<TExcept_InItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator> second)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<TExcept_InItem, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<TExcept_InItem>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, OfTypeEnumerable<TExcept_InItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, OfTypeEnumerator<TExcept_InItem, int, TExcept_InnerEnumerator>>(ref source, ref second);

//        public static ExceptDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, ZipEnumerable<int, TExcept_ZipFirsint, TExcept_ZipSecondItem, TExcept_ZipFirstEnumerable, TExcept_ZipFirstEnumerator, TExcept_ZipSecondEnumerable, TExcept_ZipSecondEnumerator>, ZipEnumerator<int, TExcept_ZipFirsint, TExcept_ZipSecondItem, TExcept_ZipFirstEnumerator, TExcept_ZipSecondEnumerator>> Except<TExcept_ZipFirsint, TExcept_ZipSecondItem, TExcept_ZipFirstEnumerable, TExcept_ZipFirstEnumerator, TExcept_ZipSecondEnumerable, TExcept_ZipSecondEnumerator>(this RangeEnumerable source, ZipEnumerable<int, TExcept_ZipFirsint, TExcept_ZipSecondItem, TExcept_ZipFirstEnumerable, TExcept_ZipFirstEnumerator, TExcept_ZipSecondEnumerable, TExcept_ZipSecondEnumerator> second)
//        where TExcept_ZipFirstEnumerable : struct, IStructEnumerable<TExcept_ZipFirsint, TExcept_ZipFirstEnumerator>
//        where TExcept_ZipFirstEnumerator : struct, IStructEnumerator<TExcept_ZipFirsint>
//        where TExcept_ZipSecondEnumerable : struct, IStructEnumerable<TExcept_ZipSecondItem, TExcept_ZipSecondEnumerator>
//        where TExcept_ZipSecondEnumerator : struct, IStructEnumerator<TExcept_ZipSecondItem>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, ZipEnumerable<int, TExcept_ZipFirsint, TExcept_ZipSecondItem, TExcept_ZipFirstEnumerable, TExcept_ZipFirstEnumerator, TExcept_ZipSecondEnumerable, TExcept_ZipSecondEnumerator>, ZipEnumerator<int, TExcept_ZipFirsint, TExcept_ZipSecondItem, TExcept_ZipFirstEnumerator, TExcept_ZipSecondEnumerator>>(ref source, ref second);

//        public static ExceptDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, SelectSelectEnumerable<int, TExcept_SelectInnerItem, TExcept_SelectInnerEnumerable, TExcept_SelectInnerEnumerator, TExcept_SelectProjection>, SelectSelectEnumerator<int, TExcept_SelectInnerItem, TExcept_SelectInnerEnumerator, TExcept_SelectProjection>> Except<TExcept_SelectInnerItem, TExcept_SelectInnerEnumerable, TExcept_SelectInnerEnumerator, TExcept_SelectProjection>(this RangeEnumerable source, SelectSelectEnumerable<int, TExcept_SelectInnerItem, TExcept_SelectInnerEnumerable, TExcept_SelectInnerEnumerator, TExcept_SelectProjection> second)
//        where TExcept_SelectInnerEnumerable : struct, IStructEnumerable<TExcept_SelectInnerItem, TExcept_SelectInnerEnumerator>
//        where TExcept_SelectInnerEnumerator : struct, IStructEnumerator<TExcept_SelectInnerItem>
//        where TExcept_SelectProjection : struct, IStructProjection<int, TExcept_SelectInnerItem>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, SelectSelectEnumerable<int, TExcept_SelectInnerItem, TExcept_SelectInnerEnumerable, TExcept_SelectInnerEnumerator, TExcept_SelectProjection>, SelectSelectEnumerator<int, TExcept_SelectInnerItem, TExcept_SelectInnerEnumerator, TExcept_SelectProjection>>(ref source, ref second);

//        public static ExceptDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, SelectWhereEnumerable<int, TExcept_SelectInnerItem, TExcept_SelectInnerEnumerable, TExcept_SelectInnerEnumerator, TExcept_SelectProjection, TExcept_SelectPredicate>, SelectWhereEnumerator<int, TExcept_SelectInnerItem, TExcept_SelectInnerEnumerator, TExcept_SelectProjection, TExcept_SelectPredicate>> Except<TExcept_SelectInnerItem, TExcept_SelectInnerEnumerable, TExcept_SelectInnerEnumerator, TExcept_SelectProjection, TExcept_SelectPredicate>(this RangeEnumerable source, SelectWhereEnumerable<int, TExcept_SelectInnerItem, TExcept_SelectInnerEnumerable, TExcept_SelectInnerEnumerator, TExcept_SelectProjection, TExcept_SelectPredicate> second)
//        where TExcept_SelectInnerEnumerable : struct, IStructEnumerable<TExcept_SelectInnerItem, TExcept_SelectInnerEnumerator>
//        where TExcept_SelectInnerEnumerator : struct, IStructEnumerator<TExcept_SelectInnerItem>
//        where TExcept_SelectProjection : struct, IStructProjection<int, TExcept_SelectInnerItem>
//        where TExcept_SelectPredicate : struct, IStructPredicate<int>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, SelectWhereEnumerable<int, TExcept_SelectInnerItem, TExcept_SelectInnerEnumerable, TExcept_SelectInnerEnumerator, TExcept_SelectProjection, TExcept_SelectPredicate>, SelectWhereEnumerator<int, TExcept_SelectInnerItem, TExcept_SelectInnerEnumerator, TExcept_SelectProjection, TExcept_SelectPredicate>>(ref source, ref second);

//        public static ExceptDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, WhereWhereEnumerable<int, TExcept_WhereInnerEnumerable, TExcept_WhereInnerEnumerator, TExcept_WherePredicate>, WhereWhereEnumerator<int, TExcept_WhereInnerEnumerator, TExcept_WherePredicate>> Except<TExcept_WhereInnerEnumerable, TExcept_WhereInnerEnumerator, TExcept_WherePredicate>(this RangeEnumerable source, WhereWhereEnumerable<int, TExcept_WhereInnerEnumerable, TExcept_WhereInnerEnumerator, TExcept_WherePredicate> second)
//        where TExcept_WhereInnerEnumerable : struct, IStructEnumerable<int, TExcept_WhereInnerEnumerator>
//        where TExcept_WhereInnerEnumerator : struct, IStructEnumerator<int>
//        where TExcept_WherePredicate : struct, IStructPredicate<int>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, WhereWhereEnumerable<int, TExcept_WhereInnerEnumerable, TExcept_WhereInnerEnumerator, TExcept_WherePredicate>, WhereWhereEnumerator<int, TExcept_WhereInnerEnumerator, TExcept_WherePredicate>>(ref source, ref second);

//        public static ExceptDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, WhereSelectEnumerable<int, TExcept_WhereInnerItem, TExcept_WhereInnerEnumerable, TExcept_WhereInnerEnumerator, TExcept_WherePredicate, TExcept_WhereProjection>, WhereSelectEnumerator<int, TExcept_WhereInnerItem, TExcept_WhereInnerEnumerator, TExcept_WherePredicate, TExcept_WhereProjection>> Except<TExcept_WhereInnerItem, TExcept_WhereInnerEnumerable, TExcept_WhereInnerEnumerator, TExcept_WherePredicate, TExcept_WhereProjection>(this RangeEnumerable source, WhereSelectEnumerable<int, TExcept_WhereInnerItem, TExcept_WhereInnerEnumerable, TExcept_WhereInnerEnumerator, TExcept_WherePredicate, TExcept_WhereProjection> second)
//        where TExcept_WhereInnerEnumerable : struct, IStructEnumerable<TExcept_WhereInnerItem, TExcept_WhereInnerEnumerator>
//        where TExcept_WhereInnerEnumerator : struct, IStructEnumerator<TExcept_WhereInnerItem>
//        where TExcept_WherePredicate : struct, IStructPredicate<TExcept_WhereInnerItem>
//        where TExcept_WhereProjection : struct, IStructProjection<int, TExcept_WhereInnerItem>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, WhereSelectEnumerable<int, TExcept_WhereInnerItem, TExcept_WhereInnerEnumerable, TExcept_WhereInnerEnumerator, TExcept_WherePredicate, TExcept_WhereProjection>, WhereSelectEnumerator<int, TExcept_WhereInnerItem, TExcept_WhereInnerEnumerator, TExcept_WherePredicate, TExcept_WhereProjection>>(ref source, ref second);

//        public static ExceptDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, DistinctDefaultEnumerable<int, TExcept_DistinctInnerEnumerable, TExcept_DistinctInnerEnumerator>, DistinctDefaultEnumerator<int, TExcept_DistinctInnerEnumerator>> Except<TExcept_DistinctInnerEnumerable, TExcept_DistinctInnerEnumerator>(this RangeEnumerable source, DistinctDefaultEnumerable<int, TExcept_DistinctInnerEnumerable, TExcept_DistinctInnerEnumerator> second)
//        where TExcept_DistinctInnerEnumerable : struct, IStructEnumerable<int, TExcept_DistinctInnerEnumerator>
//        where TExcept_DistinctInnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, DistinctDefaultEnumerable<int, TExcept_DistinctInnerEnumerable, TExcept_DistinctInnerEnumerator>, DistinctDefaultEnumerator<int, TExcept_DistinctInnerEnumerator>>(ref source, ref second);

//        public static ExceptDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, DistinctSpecificEnumerable<int, TExcept_DistinctInnerEnumerable, TExcept_DistinctInnerEnumerator>, DistinctSpecificEnumerator<int, TExcept_DistinctInnerEnumerator>> Except<TExcept_DistinctInnerEnumerable, TExcept_DistinctInnerEnumerator>(this RangeEnumerable source, DistinctSpecificEnumerable<int, TExcept_DistinctInnerEnumerable, TExcept_DistinctInnerEnumerator> second)
//        where TExcept_DistinctInnerEnumerable : struct, IStructEnumerable<int, TExcept_DistinctInnerEnumerator>
//        where TExcept_DistinctInnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, DistinctSpecificEnumerable<int, TExcept_DistinctInnerEnumerable, TExcept_DistinctInnerEnumerator>, DistinctSpecificEnumerator<int, TExcept_DistinctInnerEnumerator>>(ref source, ref second);

//        public static ExceptDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, EmptyEnumerable<int>, EmptyEnumerator<int>> Except(this RangeEnumerable source, EmptyOrderedEnumerable<int> second)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            if (second.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(second));

//            var empty = EmptyCache<int>.Empty;
//            return CommonImplementation.ExceptImpl<int, RangeEnumerable, RangeEnumerator, EmptyEnumerable<int>, EmptyEnumerator<int>>(ref source, ref empty);
//        }

//        public static ExceptDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, ExceptDefaultEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>, ExceptDefaultEnumerator<int, TExceptFirstEnumerator, TExceptSecondEnumerator>> Except<TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>(this RangeEnumerable source, ExceptDefaultEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator> second)
//        where TExceptFirstEnumerable : struct, IStructEnumerable<int, TExceptFirstEnumerator>
//        where TExceptFirstEnumerator : struct, IStructEnumerator<int>
//        where TExceptSecondEnumerable : struct, IStructEnumerable<int, TExceptSecondEnumerator>
//        where TExceptSecondEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, ExceptDefaultEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>, ExceptDefaultEnumerator<int, TExceptFirstEnumerator, TExceptSecondEnumerator>>(ref source, ref second);

//        public static ExceptDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, ExceptSpecificEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>, ExceptSpecificEnumerator<int, TExceptFirstEnumerator, TExceptSecondEnumerator>> Except<TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>(this RangeEnumerable source, ExceptSpecificEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator> second)
//        where TExceptFirstEnumerable : struct, IStructEnumerable<int, TExceptFirstEnumerator>
//        where TExceptFirstEnumerator : struct, IStructEnumerator<int>
//        where TExceptSecondEnumerable : struct, IStructEnumerable<int, TExceptSecondEnumerator>
//        where TExceptSecondEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, ExceptSpecificEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>, ExceptSpecificEnumerator<int, TExceptFirstEnumerator, TExceptSecondEnumerator>>(ref source, ref second);

//        public static ExceptDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, IntersectDefaultEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>, IntersectDefaultEnumerator<int, TExceptFirstEnumerator, TExceptSecondEnumerator>> Except<TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>(this RangeEnumerable source, IntersectDefaultEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator> second)
//        where TExceptFirstEnumerable : struct, IStructEnumerable<int, TExceptFirstEnumerator>
//        where TExceptFirstEnumerator : struct, IStructEnumerator<int>
//        where TExceptSecondEnumerable : struct, IStructEnumerable<int, TExceptSecondEnumerator>
//        where TExceptSecondEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, IntersectDefaultEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>, IntersectDefaultEnumerator<int, TExceptFirstEnumerator, TExceptSecondEnumerator>>(ref source, ref second);

//        public static ExceptDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, IntersectSpecificEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>, IntersectSpecificEnumerator<int, TExceptFirstEnumerator, TExceptSecondEnumerator>> Except<TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>(this RangeEnumerable source, IntersectSpecificEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator> second)
//        where TExceptFirstEnumerable : struct, IStructEnumerable<int, TExceptFirstEnumerator>
//        where TExceptFirstEnumerator : struct, IStructEnumerator<int>
//        where TExceptSecondEnumerable : struct, IStructEnumerable<int, TExceptSecondEnumerator>
//        where TExceptSecondEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, IntersectSpecificEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>, IntersectSpecificEnumerator<int, TExceptFirstEnumerator, TExceptSecondEnumerator>>(ref source, ref second);

//        public static ExceptDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, UnionDefaultEnumerable<int, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator>, UnionDefaultEnumerator<int, TUnionFirstEnumerator, TUnionSecondEnumerator>> Except<TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator>(this RangeEnumerable source, UnionDefaultEnumerable<int, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator> second)
//        where TUnionFirstEnumerable : struct, IStructEnumerable<int, TUnionFirstEnumerator>
//        where TUnionFirstEnumerator : struct, IStructEnumerator<int>
//        where TUnionSecondEnumerable : struct, IStructEnumerable<int, TUnionSecondEnumerator>
//        where TUnionSecondEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, UnionDefaultEnumerable<int, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator>, UnionDefaultEnumerator<int, TUnionFirstEnumerator, TUnionSecondEnumerator>>(ref source, ref second);

//        public static ExceptDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, UnionSpecificEnumerable<int, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator>, UnionSpecificEnumerator<int, TUnionFirstEnumerator, TUnionSecondEnumerator>> Except<TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator>(this RangeEnumerable source, UnionSpecificEnumerable<int, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator> second)
//        where TUnionFirstEnumerable : struct, IStructEnumerable<int, TUnionFirstEnumerator>
//        where TUnionFirstEnumerator : struct, IStructEnumerator<int>
//        where TUnionSecondEnumerable : struct, IStructEnumerable<int, TUnionSecondEnumerator>
//        where TUnionSecondEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, UnionSpecificEnumerable<int, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator>, UnionSpecificEnumerator<int, TUnionFirstEnumerator, TUnionSecondEnumerator>>(ref source, ref second);

//        public static ExceptDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, GroupedEnumerable<TGroupedKey, int>, GroupedEnumerator<int>> Except<TGroupedKey>(this RangeEnumerable source, GroupedEnumerable<TGroupedKey, int> second)
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, GroupedEnumerable<TGroupedKey, int>, GroupedEnumerator<int>>(ref source, ref second);

//        public static ExceptDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, GroupingEnumerable<TGroupedKey, int>, GroupingEnumerator<int>> Except<TGroupedKey>(this RangeEnumerable source, GroupingEnumerable<TGroupedKey, int> second)
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, GroupingEnumerable<TGroupedKey, int>, GroupingEnumerator<int>>(ref source, ref second);

//        public static ExceptDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, ReverseEnumerable<int, TReverseEnumerable, TReverseEnumerator>, ReverseEnumerator<int>> Except<TReverseEnumerable, TReverseEnumerator>(this RangeEnumerable source, ReverseEnumerable<int, TReverseEnumerable, TReverseEnumerator> second)
//        where TReverseEnumerable : struct, IStructEnumerable<int, TReverseEnumerator>
//        where TReverseEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, ReverseEnumerable<int, TReverseEnumerable, TReverseEnumerator>, ReverseEnumerator<int>>(ref source, ref second);

//        public static ExceptDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, OrderByEnumerable<int, TOrderByKey, TOrderByEnumerable, TOrderByEnumerator, TOrderByComparer>, OrderByEnumerator<int, TOrderByKey, TOrderByEnumerator, TOrderByComparer>> Except<TOrderByKey, TOrderByEnumerable, TOrderByEnumerator, TOrderByComparer>(this RangeEnumerable source, OrderByEnumerable<int, TOrderByKey, TOrderByEnumerable, TOrderByEnumerator, TOrderByComparer> second)
//        where TOrderByEnumerable : struct, IStructEnumerable<int, TOrderByEnumerator>
//        where TOrderByEnumerator : struct, IStructEnumerator<int>
//        where TOrderByComparer : struct, IStructComparer<int, TOrderByKey>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, OrderByEnumerable<int, TOrderByKey, TOrderByEnumerable, TOrderByEnumerator, TOrderByComparer>, OrderByEnumerator<int, TOrderByKey, TOrderByEnumerator, TOrderByComparer>>(ref source, ref second);

//        public static ExceptDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, GroupJoinDefaultEnumerable<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator>, GroupJoinDefaultEnumerator<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerator>> Except<TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator>(this RangeEnumerable source, GroupJoinDefaultEnumerable<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator> second)
//        where TGroupJoinLeftEnumerable : struct, IStructEnumerable<TGroupJoinLefint, TGroupJoinLeftEnumerator>
//        where TGroupJoinLeftEnumerator : struct, IStructEnumerator<TGroupJoinLefint>
//        where TGroupJoinRightEnumerable : struct, IStructEnumerable<TGroupJoinRighint, TGroupJoinRightEnumerator>
//        where TGroupJoinRightEnumerator : struct, IStructEnumerator<TGroupJoinRighint>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, GroupJoinDefaultEnumerable<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator>, GroupJoinDefaultEnumerator<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerator>>(ref source, ref second);

//        public static ExceptDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, GroupJoinSpecificEnumerable<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator>, GroupJoinSpecificEnumerator<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerator>> Except<TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator>(this RangeEnumerable source, GroupJoinSpecificEnumerable<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator> second)
//        where TGroupJoinLeftEnumerable : struct, IStructEnumerable<TGroupJoinLefint, TGroupJoinLeftEnumerator>
//        where TGroupJoinLeftEnumerator : struct, IStructEnumerator<TGroupJoinLefint>
//        where TGroupJoinRightEnumerable : struct, IStructEnumerable<TGroupJoinRighint, TGroupJoinRightEnumerator>
//        where TGroupJoinRightEnumerator : struct, IStructEnumerator<TGroupJoinRighint>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, GroupJoinSpecificEnumerable<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator>, GroupJoinSpecificEnumerator<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerator>>(ref source, ref second);

//        public static ExceptDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, GroupByCollectionDefaultEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, int, TGroupByEnumerable, TGroupByEnumerator>, GroupByCollectionDefaultEnumerator<TGroupByInItem, TGroupByKey, TGroupByElement, int, TGroupByEnumerator>> Except<TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByEnumerable, TGroupByEnumerator>(this RangeEnumerable source, GroupByCollectionDefaultEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, int, TGroupByEnumerable, TGroupByEnumerator> second)
//        where TGroupByEnumerable : struct, IStructEnumerable<TGroupByInItem, TGroupByEnumerator>
//        where TGroupByEnumerator : struct, IStructEnumerator<TGroupByInItem>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, GroupByCollectionDefaultEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, int, TGroupByEnumerable, TGroupByEnumerator>, GroupByCollectionDefaultEnumerator<TGroupByInItem, TGroupByKey, TGroupByElement, int, TGroupByEnumerator>>(ref source, ref second);

//        public static ExceptDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, GroupByCollectionSpecificEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, int, TGroupByEnumerable, TGroupByEnumerator>, GroupByCollectionSpecificEnumerator<TGroupByInItem, TGroupByKey, TGroupByElement, int, TGroupByEnumerator>> Except<TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByEnumerable, TGroupByEnumerator>(this RangeEnumerable source, GroupByCollectionSpecificEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, int, TGroupByEnumerable, TGroupByEnumerator> second)
//        where TGroupByEnumerable : struct, IStructEnumerable<TGroupByInItem, TGroupByEnumerator>
//        where TGroupByEnumerator : struct, IStructEnumerator<TGroupByInItem>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, GroupByCollectionSpecificEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, int, TGroupByEnumerable, TGroupByEnumerator>, GroupByCollectionSpecificEnumerator<TGroupByInItem, TGroupByKey, TGroupByElement, int, TGroupByEnumerator>>(ref source, ref second);

//        public static ExceptDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, JoinDefaultEnumerable<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerable, TJoinRightEnumerator>, JoinDefaultEnumerator<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerator>> Except<TJoinKeyItem, TJoinLefint, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerable, TJoinRightEnumerator>(this RangeEnumerable source, JoinDefaultEnumerable<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerable, TJoinRightEnumerator> second)
//        where TJoinLeftEnumerable : struct, IStructEnumerable<TJoinLefint, TJoinLeftEnumerator>
//        where TJoinLeftEnumerator : struct, IStructEnumerator<TJoinLefint>
//        where TJoinRightEnumerable : struct, IStructEnumerable<TJoinRighint, TJoinRightEnumerator>
//        where TJoinRightEnumerator : struct, IStructEnumerator<TJoinRighint>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, JoinDefaultEnumerable<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerable, TJoinRightEnumerator>, JoinDefaultEnumerator<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerator>>(ref source, ref second);

//        public static ExceptDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, JoinSpecificEnumerable<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerable, TJoinRightEnumerator>, JoinSpecificEnumerator<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerator>> Except<TJoinKeyItem, TJoinLefint, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerable, TJoinRightEnumerator>(this RangeEnumerable source, JoinSpecificEnumerable<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerable, TJoinRightEnumerator> second)
//        where TJoinLeftEnumerable : struct, IStructEnumerable<TJoinLefint, TJoinLeftEnumerator>
//        where TJoinLeftEnumerator : struct, IStructEnumerator<TJoinLefint>
//        where TJoinRightEnumerable : struct, IStructEnumerable<TJoinRighint, TJoinRightEnumerator>
//        where TJoinRightEnumerator : struct, IStructEnumerator<TJoinRighint>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, JoinSpecificEnumerable<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerable, TJoinRightEnumerator>, JoinSpecificEnumerator<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerator>>(ref source, ref second);

//        public static ExceptSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, BoxedEnumerable<int>, BoxedEnumerator<int>> Except(this RangeEnumerable source, BoxedEnumerable<int> second, IEqualityComparer<int> comparer)
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, BoxedEnumerable<int>, BoxedEnumerator<int>>(ref source, ref second, comparer);

//        public static ExceptSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, IEnumerable<int>, IEnumerableBridger<int>, IdentityEnumerator<int>>, IdentityEnumerator<int>> Except(this RangeEnumerable source, IEnumerable<int> second, IEqualityComparer<int> comparer)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(second, nameof(second));

//            return CommonImplementation.ExceptImpl<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, IEnumerable<int>, IEnumerableBridger<int>, IdentityEnumerator<int>>, IdentityEnumerator<int>>(ref source, ref bridge, comparer);
//        }

//        public static ExceptSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, Dictionary<int, TDictionaryValue>.KeyCollection, DictionaryKeysBridger<int, TDictionaryValue>, DictionaryKeysEnumerator<int, TDictionaryValue>>, DictionaryKeysEnumerator<int, TDictionaryValue>> Except<TDictionaryValue>(this RangeEnumerable source, Dictionary<int, TDictionaryValue>.KeyCollection second, IEqualityComparer<int> comparer)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(second, nameof(second));

//            return CommonImplementation.ExceptImpl<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, Dictionary<int, TDictionaryValue>.KeyCollection, DictionaryKeysBridger<int, TDictionaryValue>, DictionaryKeysEnumerator<int, TDictionaryValue>>, DictionaryKeysEnumerator<int, TDictionaryValue>>(ref source, ref bridge, comparer);
//        }

//        public static ExceptSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, Dictionary<TExcept_DictionaryKey, int>.ValueCollection, DictionaryValuesBridger<TExcept_DictionaryKey, int>, DictionaryValuesEnumerator<TExcept_DictionaryKey, int>>, DictionaryValuesEnumerator<TExcept_DictionaryKey, int>> Except<TExcept_DictionaryKey>(this RangeEnumerable source, Dictionary<TExcept_DictionaryKey, int>.ValueCollection second, IEqualityComparer<int> comparer)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(second, nameof(second));

//            return CommonImplementation.ExceptImpl<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, Dictionary<TExcept_DictionaryKey, int>.ValueCollection, DictionaryValuesBridger<TExcept_DictionaryKey, int>, DictionaryValuesEnumerator<TExcept_DictionaryKey, int>>, DictionaryValuesEnumerator<TExcept_DictionaryKey, int>>(ref source, ref bridge, comparer);
//        }

//        public static ExceptSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, HashSet<int>, HashSetBridger<int>, HashSetEnumerator<int>>, HashSetEnumerator<int>> Except(this RangeEnumerable source, HashSet<int> second, IEqualityComparer<int> comparer)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(second, nameof(second));

//            return CommonImplementation.ExceptImpl<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, HashSet<int>, HashSetBridger<int>, HashSetEnumerator<int>>, HashSetEnumerator<int>>(ref source, ref bridge, comparer);
//        }

//        public static ExceptSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, LinkedList<int>, LinkedListBridger<int>, LinkedListEnumerator<int>>, LinkedListEnumerator<int>> Except(this RangeEnumerable source, LinkedList<int> second, IEqualityComparer<int> comparer)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(second, nameof(second));

//            return CommonImplementation.ExceptImpl<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, LinkedList<int>, LinkedListBridger<int>, LinkedListEnumerator<int>>, LinkedListEnumerator<int>>(ref source, ref bridge, comparer);
//        }

//        public static ExceptSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, List<int>, ListBridger<int>, ListEnumerator<int>>, ListEnumerator<int>> Except(this RangeEnumerable source, List<int> second, IEqualityComparer<int> comparer)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(second, nameof(second));

//            return CommonImplementation.ExceptImpl<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, List<int>, ListBridger<int>, ListEnumerator<int>>, ListEnumerator<int>>(ref source, ref bridge, comparer);
//        }

//        public static ExceptSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, Queue<int>, QueueBridger<int>, QueueEnumerator<int>>, QueueEnumerator<int>> Except(this RangeEnumerable source, Queue<int> second, IEqualityComparer<int> comparer)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(second, nameof(second));

//            return CommonImplementation.ExceptImpl<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, Queue<int>, QueueBridger<int>, QueueEnumerator<int>>, QueueEnumerator<int>>(ref source, ref bridge, comparer);
//        }

//        public static ExceptSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, SortedDictionary<int, TExcept_DictionaryValue>.KeyCollection, SortedDictionaryKeysBridger<int, TExcept_DictionaryValue>, SortedDictionaryKeysEnumerator<int, TExcept_DictionaryValue>>, SortedDictionaryKeysEnumerator<int, TExcept_DictionaryValue>> Except<TExcept_DictionaryValue>(this RangeEnumerable source, SortedDictionary<int, TExcept_DictionaryValue>.KeyCollection second, IEqualityComparer<int> comparer)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(second, nameof(second));

//            return CommonImplementation.ExceptImpl<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, SortedDictionary<int, TExcept_DictionaryValue>.KeyCollection, SortedDictionaryKeysBridger<int, TExcept_DictionaryValue>, SortedDictionaryKeysEnumerator<int, TExcept_DictionaryValue>>, SortedDictionaryKeysEnumerator<int, TExcept_DictionaryValue>>(ref source, ref bridge, comparer);
//        }

//        public static ExceptSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, SortedDictionary<TExcept_DictionaryKey, int>.ValueCollection, SortedDictionaryValuesBridger<TExcept_DictionaryKey, int>, SortedDictionaryValuesEnumerator<TExcept_DictionaryKey, int>>, SortedDictionaryValuesEnumerator<TExcept_DictionaryKey, int>> Except<TExcept_DictionaryKey>(this RangeEnumerable source, SortedDictionary<TExcept_DictionaryKey, int>.ValueCollection second, IEqualityComparer<int> comparer)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(second, nameof(second));

//            return CommonImplementation.ExceptImpl<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, SortedDictionary<TExcept_DictionaryKey, int>.ValueCollection, SortedDictionaryValuesBridger<TExcept_DictionaryKey, int>, SortedDictionaryValuesEnumerator<TExcept_DictionaryKey, int>>, SortedDictionaryValuesEnumerator<TExcept_DictionaryKey, int>>(ref source, ref bridge, comparer);
//        }

//        public static ExceptSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, SortedSet<int>, SortedSetBridger<int>, SortedSetEnumerator<int>>, SortedSetEnumerator<int>> Except(this RangeEnumerable source, SortedSet<int> second, IEqualityComparer<int> comparer)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(second, nameof(second));

//            return CommonImplementation.ExceptImpl<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, SortedSet<int>, SortedSetBridger<int>, SortedSetEnumerator<int>>, SortedSetEnumerator<int>>(ref source, ref bridge, comparer);
//        }

//        public static ExceptSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, Stack<int>, StackBridger<int>, StackEnumerator<int>>, StackEnumerator<int>> Except(this RangeEnumerable source, Stack<int> second, IEqualityComparer<int> comparer)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(second, nameof(second));

//            return CommonImplementation.ExceptImpl<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, Stack<int>, StackBridger<int>, StackEnumerator<int>>, StackEnumerator<int>>(ref source, ref bridge, comparer);
//        }

//        public static ExceptSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, int[], ArrayBridger<int>, ArrayEnumerator<int>>, ArrayEnumerator<int>> Except(this RangeEnumerable source, int[] second, IEqualityComparer<int> comparer)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(second, nameof(second));

//            return CommonImplementation.ExceptImpl<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, int[], ArrayBridger<int>, ArrayEnumerator<int>>, ArrayEnumerator<int>>(ref source, ref bridge, comparer);
//        }

//        public static ExceptSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, TExcept_IdentityBridgeType, TExcept_IdentityBridger, TExcept_IdentityEnumerator>, TExcept_IdentityEnumerator> Except<TExcept_IdentityBridgeType, TExcept_IdentityBridger, TExcept_IdentityEnumerator>(this RangeEnumerable source, IdentityEnumerable<int, TExcept_IdentityBridgeType, TExcept_IdentityBridger, TExcept_IdentityEnumerator> second, IEqualityComparer<int> comparer)
//        where TExcept_IdentityBridgeType : class
//        where TExcept_IdentityEnumerator : struct, IStructEnumerator<int>
//        where TExcept_IdentityBridger : struct, IStructBridger<int, TExcept_IdentityBridgeType, TExcept_IdentityEnumerator>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, TExcept_IdentityBridgeType, TExcept_IdentityBridger, TExcept_IdentityEnumerator>, TExcept_IdentityEnumerator>(ref source, ref second, comparer);

//        public static ExceptSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, ConcatEnumerable<int, TInnerLeftEnumerable, TInnerLeftEnumerator, TInnerRightEnumerable, TInnerRightEnumerator>, ConcatEnumerator<int, TInnerLeftEnumerator, TInnerRightEnumerator>> Except<TInnerLeftEnumerable, TInnerLeftEnumerator, TInnerRightEnumerable, TInnerRightEnumerator>(this RangeEnumerable source, ConcatEnumerable<int, TInnerLeftEnumerable, TInnerLeftEnumerator, TInnerRightEnumerable, TInnerRightEnumerator> second, IEqualityComparer<int> comparer)
//        where TInnerLeftEnumerable : struct, IStructEnumerable<int, TInnerLeftEnumerator>
//        where TInnerLeftEnumerator : struct, IStructEnumerator<int>
//        where TInnerRightEnumerable : struct, IStructEnumerable<int, TInnerRightEnumerator>
//        where TInnerRightEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, ConcatEnumerable<int, TInnerLeftEnumerable, TInnerLeftEnumerator, TInnerRightEnumerable, TInnerRightEnumerator>, ConcatEnumerator<int, TInnerLeftEnumerator, TInnerRightEnumerator>>(ref source, ref second, comparer);

//        public static ExceptSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, EmptyEnumerable<int>, EmptyEnumerator<int>> Except(this RangeEnumerable source, EmptyEnumerable<int> second, IEqualityComparer<int> comparer)
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, EmptyEnumerable<int>, EmptyEnumerator<int>>(ref source, ref second, comparer);

//        public static ExceptSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, RepeatEnumerable<int>, RepeatEnumerator<int>> Except(this RangeEnumerable source, RepeatEnumerable<int> second, IEqualityComparer<int> comparer)
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, RepeatEnumerable<int>, RepeatEnumerator<int>>(ref source, ref second, comparer);

//        public static ExceptSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, SelectEnumerable<TExcept_SelectInItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, SelectEnumerator<TExcept_SelectInItem, int, TExcept_InnerEnumerator>> Except<TExcept_SelectInItem, TExcept_InnerEnumerable, TExcept_InnerEnumerator>(this RangeEnumerable source, SelectEnumerable<TExcept_SelectInItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator> second, IEqualityComparer<int> comparer)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<TExcept_SelectInItem, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<TExcept_SelectInItem>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, SelectEnumerable<TExcept_SelectInItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, SelectEnumerator<TExcept_SelectInItem, int, TExcept_InnerEnumerator>>(ref source, ref second, comparer);

//        public static ExceptSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, SelectIndexedEnumerable<TExcept_SelectInItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, SelectIndexedEnumerator<TExcept_SelectInItem, int, TExcept_InnerEnumerator>> Except<TExcept_SelectInItem, TExcept_InnerEnumerable, TExcept_InnerEnumerator>(this RangeEnumerable source, SelectIndexedEnumerable<TExcept_SelectInItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator> second, IEqualityComparer<int> comparer)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<TExcept_SelectInItem, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<TExcept_SelectInItem>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, SelectIndexedEnumerable<TExcept_SelectInItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, SelectIndexedEnumerator<TExcept_SelectInItem, int, TExcept_InnerEnumerator>>(ref source, ref second, comparer);

//        public static ExceptSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, SelectManyBridgeEnumerable<TExcept_SelectManyInItem, int, TExcept_BridgeType, TExcept_Bridger, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_ProjectedEnumerator>, SelectManyBridgeEnumerator<TExcept_SelectManyInItem, int, TExcept_BridgeType, TExcept_Bridger, TExcept_InnerEnumerator, TExcept_ProjectedEnumerator>> Except<TExcept_SelectManyInItem, TExcept_BridgeType, TExcept_Bridger, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_ProjectedEnumerator>(this RangeEnumerable source, SelectManyBridgeEnumerable<TExcept_SelectManyInItem, int, TExcept_BridgeType, TExcept_Bridger, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_ProjectedEnumerator> second, IEqualityComparer<int> comparer)
//        where TExcept_BridgeType : class
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<TExcept_SelectManyInItem, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<TExcept_SelectManyInItem>
//        where TExcept_ProjectedEnumerator : struct, IStructEnumerator<int>
//        where TExcept_Bridger : struct, IStructBridger<int, TExcept_BridgeType, TExcept_ProjectedEnumerator>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, SelectManyBridgeEnumerable<TExcept_SelectManyInItem, int, TExcept_BridgeType, TExcept_Bridger, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_ProjectedEnumerator>, SelectManyBridgeEnumerator<TExcept_SelectManyInItem, int, TExcept_BridgeType, TExcept_Bridger, TExcept_InnerEnumerator, TExcept_ProjectedEnumerator>>(ref source, ref second, comparer);

//        public static ExceptSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, SelectManyIndexedBridgeEnumerable<TExcept_SelectManyInItem, int, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerator>, SelectManyIndexedBridgeEnumerator<TExcept_SelectManyInItem, int, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerator>> Except<TExcept_SelectManyInItem, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyIndexedBridgeEnumerable<TExcept_SelectManyInItem, int, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerator> second, IEqualityComparer<int> comparer)
//        where TExcept_SelectManyBridgeType : class
//        where TExcept_SelectManyInnerEnumerable : struct, IStructEnumerable<TExcept_SelectManyInItem, TExcept_SelectManyInnerEnumerator>
//        where TExcept_SelectManyInnerEnumerator : struct, IStructEnumerator<TExcept_SelectManyInItem>
//        where TExcept_SelectManyProjectedEnumerator : struct, IStructEnumerator<int>
//        where TExcept_Bridger : struct, IStructBridger<int, TExcept_SelectManyBridgeType, TExcept_SelectManyProjectedEnumerator>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, SelectManyIndexedBridgeEnumerable<TExcept_SelectManyInItem, int, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerator>, SelectManyIndexedBridgeEnumerator<TExcept_SelectManyInItem, int, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerator>>(ref source, ref second, comparer);

//        public static ExceptSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, SelectManyCollectionBridgeEnumerable<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_SelectManyProjectedEnumerator>, SelectManyCollectionBridgeEnumerator<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_InnerEnumerator, TExcept_SelectManyProjectedEnumerator>> Except<TExcept_SelectManyInItem, TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_SelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyCollectionBridgeEnumerable<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_SelectManyProjectedEnumerator> second, IEqualityComparer<int> comparer)
//        where TExcept_SelectManyBridgeType : class
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<TExcept_SelectManyInItem, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<TExcept_SelectManyInItem>
//        where TExcept_SelectManyProjectedEnumerator : struct, IStructEnumerator<TExcept_CollectionItem>
//        where TExcept_Bridger : struct, IStructBridger<TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_SelectManyProjectedEnumerator>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, SelectManyCollectionBridgeEnumerable<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_SelectManyProjectedEnumerator>, SelectManyCollectionBridgeEnumerator<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_InnerEnumerator, TExcept_SelectManyProjectedEnumerator>>(ref source, ref second, comparer);

//        public static ExceptSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, SelectManyCollectionIndexedBridgeEnumerable<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerator>, SelectManyCollectionIndexedBridgeEnumerator<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerator>> Except<TExcept_SelectManyInItem, TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyCollectionIndexedBridgeEnumerable<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerator> second, IEqualityComparer<int> comparer)
//        where TExcept_SelectManyBridgeType : class
//        where TExcept_SelectManyInnerEnumerable : struct, IStructEnumerable<TExcept_SelectManyInItem, TExcept_SelectManyInnerEnumerator>
//        where TExcept_SelectManyInnerEnumerator : struct, IStructEnumerator<TExcept_SelectManyInItem>
//        where TExcept_SelectManyProjectedEnumerator : struct, IStructEnumerator<TExcept_CollectionItem>
//        where TExcept_Bridger : struct, IStructBridger<TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_SelectManyProjectedEnumerator>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, SelectManyCollectionIndexedBridgeEnumerable<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerator>, SelectManyCollectionIndexedBridgeEnumerator<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerator>>(ref source, ref second, comparer);

//        public static ExceptSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, SelectManyEnumerable<TExcept_SelectManyInItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_ProjectedEnumerable, TExcept_ProjectedEnumerator>, SelectManyEnumerator<TExcept_SelectManyInItem, int, TExcept_InnerEnumerator, TExcept_ProjectedEnumerable, TExcept_ProjectedEnumerator>> Except<TExcept_SelectManyInItem, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_ProjectedEnumerable, TExcept_ProjectedEnumerator>(this RangeEnumerable source, SelectManyEnumerable<TExcept_SelectManyInItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_ProjectedEnumerable, TExcept_ProjectedEnumerator> second, IEqualityComparer<int> comparer)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<TExcept_SelectManyInItem, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<TExcept_SelectManyInItem>
//        where TExcept_ProjectedEnumerable : struct, IStructEnumerable<int, TExcept_ProjectedEnumerator>
//        where TExcept_ProjectedEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, SelectManyEnumerable<TExcept_SelectManyInItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_ProjectedEnumerable, TExcept_ProjectedEnumerator>, SelectManyEnumerator<TExcept_SelectManyInItem, int, TExcept_InnerEnumerator, TExcept_ProjectedEnumerable, TExcept_ProjectedEnumerator>>(ref source, ref second, comparer);

//        public static ExceptSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, SelectManyIndexedEnumerable<TExcept_SelectManyInItem, int, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerable, TExcept_SelectManyProjectedEnumerator>, SelectManyIndexedEnumerator<TExcept_SelectManyInItem, int, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerable, TExcept_SelectManyProjectedEnumerator>> Except<TExcept_SelectManyInItem, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerable, TExcept_SelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyIndexedEnumerable<TExcept_SelectManyInItem, int, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerable, TExcept_SelectManyProjectedEnumerator> second, IEqualityComparer<int> comparer)
//        where TExcept_SelectManyInnerEnumerable : struct, IStructEnumerable<TExcept_SelectManyInItem, TExcept_SelectManyInnerEnumerator>
//        where TExcept_SelectManyInnerEnumerator : struct, IStructEnumerator<TExcept_SelectManyInItem>
//        where TExcept_SelectManyProjectedEnumerable : struct, IStructEnumerable<int, TExcept_SelectManyProjectedEnumerator>
//        where TExcept_SelectManyProjectedEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, SelectManyIndexedEnumerable<TExcept_SelectManyInItem, int, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerable, TExcept_SelectManyProjectedEnumerator>, SelectManyIndexedEnumerator<TExcept_SelectManyInItem, int, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerable, TExcept_SelectManyProjectedEnumerator>>(ref source, ref second, comparer);

//        public static ExceptSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, SelectManyCollectionEnumerable<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_ProjectedEnumerable, TExcept_ProjectedEnumerator>, SelectManyCollectionEnumerator<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_InnerEnumerator, TExcept_ProjectedEnumerable, TExcept_ProjectedEnumerator>> Except<TExcept_SelectManyInItem, TExcept_CollectionItem, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_ProjectedEnumerable, TExcept_ProjectedEnumerator>(this RangeEnumerable source, SelectManyCollectionEnumerable<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_ProjectedEnumerable, TExcept_ProjectedEnumerator> second, IEqualityComparer<int> comparer)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<TExcept_SelectManyInItem, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<TExcept_SelectManyInItem>
//        where TExcept_ProjectedEnumerable : struct, IStructEnumerable<TExcept_CollectionItem, TExcept_ProjectedEnumerator>
//        where TExcept_ProjectedEnumerator : struct, IStructEnumerator<TExcept_CollectionItem>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, SelectManyCollectionEnumerable<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_ProjectedEnumerable, TExcept_ProjectedEnumerator>, SelectManyCollectionEnumerator<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_InnerEnumerator, TExcept_ProjectedEnumerable, TExcept_ProjectedEnumerator>>(ref source, ref second, comparer);

//        public static ExceptSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, SelectManyCollectionIndexedEnumerable<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerable, TExcept_SelectManyProjectedEnumerator>, SelectManyCollectionIndexedEnumerator<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerable, TExcept_SelectManyProjectedEnumerator>> Except<TExcept_SelectManyInItem, TExcept_CollectionItem, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerable, TExcept_SelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyCollectionIndexedEnumerable<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerable, TExcept_SelectManyProjectedEnumerator> second, IEqualityComparer<int> comparer)
//        where TExcept_SelectManyInnerEnumerable : struct, IStructEnumerable<TExcept_SelectManyInItem, TExcept_SelectManyInnerEnumerator>
//        where TExcept_SelectManyInnerEnumerator : struct, IStructEnumerator<TExcept_SelectManyInItem>
//        where TExcept_SelectManyProjectedEnumerable : struct, IStructEnumerable<TExcept_CollectionItem, TExcept_SelectManyProjectedEnumerator>
//        where TExcept_SelectManyProjectedEnumerator : struct, IStructEnumerator<TExcept_CollectionItem>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, SelectManyCollectionIndexedEnumerable<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerable, TExcept_SelectManyProjectedEnumerator>, SelectManyCollectionIndexedEnumerator<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerable, TExcept_SelectManyProjectedEnumerator>>(ref source, ref second, comparer);

//        public static ExceptSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, WhereEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, WhereEnumerator<int, TExcept_InnerEnumerator>> Except<TExcept_InnerEnumerable, TExcept_InnerEnumerator>(this RangeEnumerable source, WhereEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator> second, IEqualityComparer<int> comparer)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<int, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, WhereEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, WhereEnumerator<int, TExcept_InnerEnumerator>>(ref source, ref second, comparer);

//        public static ExceptSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, WhereIndexedEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, WhereIndexedEnumerator<int, TExcept_InnerEnumerator>> Except<TExcept_InnerEnumerable, TExcept_InnerEnumerator>(this RangeEnumerable source, WhereIndexedEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator> second, IEqualityComparer<int> comparer)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<int, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, WhereIndexedEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, WhereIndexedEnumerator<int, TExcept_InnerEnumerator>>(ref source, ref second, comparer);

//        public static ExceptSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, DefaultIfEmptyDefaultEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, DefaultIfEmptyDefaultEnumerator<int, TExcept_InnerEnumerator>> Except<TExcept_InnerEnumerable, TExcept_InnerEnumerator>(this RangeEnumerable source, DefaultIfEmptyDefaultEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator> second, IEqualityComparer<int> comparer)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<int, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, DefaultIfEmptyDefaultEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, DefaultIfEmptyDefaultEnumerator<int, TExcept_InnerEnumerator>>(ref source, ref second, comparer);

//        public static ExceptSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, DefaultIfEmptySpecificEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, DefaultIfEmptySpecificEnumerator<int, TExcept_InnerEnumerator>> Except<TExcept_InnerEnumerable, TExcept_InnerEnumerator>(this RangeEnumerable source, DefaultIfEmptySpecificEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator> second, IEqualityComparer<int> comparer)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<int, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, DefaultIfEmptySpecificEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, DefaultIfEmptySpecificEnumerator<int, TExcept_InnerEnumerator>>(ref source, ref second, comparer);

//        public static ExceptSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, TakeEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, TakeEnumerator<int, TExcept_InnerEnumerator>> Except<TExcept_InnerEnumerable, TExcept_InnerEnumerator>(this RangeEnumerable source, TakeEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator> second, IEqualityComparer<int> comparer)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<int, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, TakeEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, TakeEnumerator<int, TExcept_InnerEnumerator>>(ref source, ref second, comparer);

//        public static ExceptSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, TakeWhileEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, TakeWhileEnumerator<int, TExcept_InnerEnumerator>> Except<TExcept_InnerEnumerable, TExcept_InnerEnumerator>(this RangeEnumerable source, TakeWhileEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator> second, IEqualityComparer<int> comparer)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<int, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, TakeWhileEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, TakeWhileEnumerator<int, TExcept_InnerEnumerator>>(ref source, ref second, comparer);

//        public static ExceptSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, TakeWhileIndexedEnumerable<int, TInnerEnumerable, TInnerEnumerator>, TakeWhileIndexedEnumerator<int, TInnerEnumerator>> Except<TInnerEnumerable, TInnerEnumerator>(this RangeEnumerable source, TakeWhileIndexedEnumerable<int, TInnerEnumerable, TInnerEnumerator> second, IEqualityComparer<int> comparer)
//        where TInnerEnumerable : struct, IStructEnumerable<int, TInnerEnumerator>
//        where TInnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, TakeWhileIndexedEnumerable<int, TInnerEnumerable, TInnerEnumerator>, TakeWhileIndexedEnumerator<int, TInnerEnumerator>>(ref source, ref second, comparer);

//        public static ExceptSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, SkipEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, SkipEnumerator<int, TExcept_InnerEnumerator>> Except<TExcept_InnerEnumerable, TExcept_InnerEnumerator>(this RangeEnumerable source, SkipEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator> second, IEqualityComparer<int> comparer)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<int, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, SkipEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, SkipEnumerator<int, TExcept_InnerEnumerator>>(ref source, ref second, comparer);

//        public static ExceptSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, SkipWhileEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, SkipWhileEnumerator<int, TExcept_InnerEnumerator>> Except<TExcept_InnerEnumerable, TExcept_InnerEnumerator>(this RangeEnumerable source, SkipWhileEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator> second, IEqualityComparer<int> comparer)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<int, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, SkipWhileEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, SkipWhileEnumerator<int, TExcept_InnerEnumerator>>(ref source, ref second, comparer);

//        public static ExceptSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, SkipWhileIndexedEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, SkipWhileIndexedEnumerator<int, TExcept_InnerEnumerator>> Except<TExcept_InnerEnumerable, TExcept_InnerEnumerator>(this RangeEnumerable source, SkipWhileIndexedEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator> second, IEqualityComparer<int> comparer)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<int, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, SkipWhileIndexedEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, SkipWhileIndexedEnumerator<int, TExcept_InnerEnumerator>>(ref source, ref second, comparer);

//        public static ExceptSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, CastEnumerable<TExcept_InItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, CastEnumerator<TExcept_InItem, int, TExcept_InnerEnumerator>> Except<TExcept_InItem, TExcept_InnerEnumerable, TExcept_InnerEnumerator>(this RangeEnumerable source, CastEnumerable<TExcept_InItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator> second, IEqualityComparer<int> comparer)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<TExcept_InItem, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<TExcept_InItem>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, CastEnumerable<TExcept_InItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, CastEnumerator<TExcept_InItem, int, TExcept_InnerEnumerator>>(ref source, ref second, comparer);

//        public static ExceptSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, OfTypeEnumerable<TExcept_InItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, OfTypeEnumerator<TExcept_InItem, int, TExcept_InnerEnumerator>> Except<TExcept_InItem, TExcept_InnerEnumerable, TExcept_InnerEnumerator>(this RangeEnumerable source, OfTypeEnumerable<TExcept_InItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator> second, IEqualityComparer<int> comparer)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<TExcept_InItem, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<TExcept_InItem>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, OfTypeEnumerable<TExcept_InItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, OfTypeEnumerator<TExcept_InItem, int, TExcept_InnerEnumerator>>(ref source, ref second, comparer);

//        public static ExceptSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, ZipEnumerable<int, TExcept_ZipFirsint, TExcept_ZipSecondItem, TExcept_ZipFirstEnumerable, TExcept_ZipFirstEnumerator, TExcept_ZipSecondEnumerable, TExcept_ZipSecondEnumerator>, ZipEnumerator<int, TExcept_ZipFirsint, TExcept_ZipSecondItem, TExcept_ZipFirstEnumerator, TExcept_ZipSecondEnumerator>> Except<TExcept_ZipFirsint, TExcept_ZipSecondItem, TExcept_ZipFirstEnumerable, TExcept_ZipFirstEnumerator, TExcept_ZipSecondEnumerable, TExcept_ZipSecondEnumerator>(this RangeEnumerable source, ZipEnumerable<int, TExcept_ZipFirsint, TExcept_ZipSecondItem, TExcept_ZipFirstEnumerable, TExcept_ZipFirstEnumerator, TExcept_ZipSecondEnumerable, TExcept_ZipSecondEnumerator> second, IEqualityComparer<int> comparer)
//        where TExcept_ZipFirstEnumerable : struct, IStructEnumerable<TExcept_ZipFirsint, TExcept_ZipFirstEnumerator>
//        where TExcept_ZipFirstEnumerator : struct, IStructEnumerator<TExcept_ZipFirsint>
//        where TExcept_ZipSecondEnumerable : struct, IStructEnumerable<TExcept_ZipSecondItem, TExcept_ZipSecondEnumerator>
//        where TExcept_ZipSecondEnumerator : struct, IStructEnumerator<TExcept_ZipSecondItem>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, ZipEnumerable<int, TExcept_ZipFirsint, TExcept_ZipSecondItem, TExcept_ZipFirstEnumerable, TExcept_ZipFirstEnumerator, TExcept_ZipSecondEnumerable, TExcept_ZipSecondEnumerator>, ZipEnumerator<int, TExcept_ZipFirsint, TExcept_ZipSecondItem, TExcept_ZipFirstEnumerator, TExcept_ZipSecondEnumerator>>(ref source, ref second, comparer);

//        public static ExceptSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, SelectSelectEnumerable<int, TExcept_SelectInnerItem, TExcept_SelectInnerEnumerable, TExcept_SelectInnerEnumerator, TExcept_SelectProjection>, SelectSelectEnumerator<int, TExcept_SelectInnerItem, TExcept_SelectInnerEnumerator, TExcept_SelectProjection>> Except<TExcept_SelectInnerItem, TExcept_SelectInnerEnumerable, TExcept_SelectInnerEnumerator, TExcept_SelectProjection>(this RangeEnumerable source, SelectSelectEnumerable<int, TExcept_SelectInnerItem, TExcept_SelectInnerEnumerable, TExcept_SelectInnerEnumerator, TExcept_SelectProjection> second, IEqualityComparer<int> comparer)
//        where TExcept_SelectInnerEnumerable : struct, IStructEnumerable<TExcept_SelectInnerItem, TExcept_SelectInnerEnumerator>
//        where TExcept_SelectInnerEnumerator : struct, IStructEnumerator<TExcept_SelectInnerItem>
//        where TExcept_SelectProjection : struct, IStructProjection<int, TExcept_SelectInnerItem>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, SelectSelectEnumerable<int, TExcept_SelectInnerItem, TExcept_SelectInnerEnumerable, TExcept_SelectInnerEnumerator, TExcept_SelectProjection>, SelectSelectEnumerator<int, TExcept_SelectInnerItem, TExcept_SelectInnerEnumerator, TExcept_SelectProjection>>(ref source, ref second, comparer);

//        public static ExceptSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, SelectWhereEnumerable<int, TExcept_SelectInnerItem, TExcept_SelectInnerEnumerable, TExcept_SelectInnerEnumerator, TExcept_SelectProjection, TExcept_SelectPredicate>, SelectWhereEnumerator<int, TExcept_SelectInnerItem, TExcept_SelectInnerEnumerator, TExcept_SelectProjection, TExcept_SelectPredicate>> Except<TExcept_SelectInnerItem, TExcept_SelectInnerEnumerable, TExcept_SelectInnerEnumerator, TExcept_SelectProjection, TExcept_SelectPredicate>(this RangeEnumerable source, SelectWhereEnumerable<int, TExcept_SelectInnerItem, TExcept_SelectInnerEnumerable, TExcept_SelectInnerEnumerator, TExcept_SelectProjection, TExcept_SelectPredicate> second, IEqualityComparer<int> comparer)
//        where TExcept_SelectInnerEnumerable : struct, IStructEnumerable<TExcept_SelectInnerItem, TExcept_SelectInnerEnumerator>
//        where TExcept_SelectInnerEnumerator : struct, IStructEnumerator<TExcept_SelectInnerItem>
//        where TExcept_SelectProjection : struct, IStructProjection<int, TExcept_SelectInnerItem>
//        where TExcept_SelectPredicate : struct, IStructPredicate<int>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, SelectWhereEnumerable<int, TExcept_SelectInnerItem, TExcept_SelectInnerEnumerable, TExcept_SelectInnerEnumerator, TExcept_SelectProjection, TExcept_SelectPredicate>, SelectWhereEnumerator<int, TExcept_SelectInnerItem, TExcept_SelectInnerEnumerator, TExcept_SelectProjection, TExcept_SelectPredicate>>(ref source, ref second, comparer);

//        public static ExceptSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, WhereWhereEnumerable<int, TExcept_WhereInnerEnumerable, TExcept_WhereInnerEnumerator, TExcept_WherePredicate>, WhereWhereEnumerator<int, TExcept_WhereInnerEnumerator, TExcept_WherePredicate>> Except<TExcept_WhereInnerEnumerable, TExcept_WhereInnerEnumerator, TExcept_WherePredicate>(this RangeEnumerable source, WhereWhereEnumerable<int, TExcept_WhereInnerEnumerable, TExcept_WhereInnerEnumerator, TExcept_WherePredicate> second, IEqualityComparer<int> comparer)
//        where TExcept_WhereInnerEnumerable : struct, IStructEnumerable<int, TExcept_WhereInnerEnumerator>
//        where TExcept_WhereInnerEnumerator : struct, IStructEnumerator<int>
//        where TExcept_WherePredicate : struct, IStructPredicate<int>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, WhereWhereEnumerable<int, TExcept_WhereInnerEnumerable, TExcept_WhereInnerEnumerator, TExcept_WherePredicate>, WhereWhereEnumerator<int, TExcept_WhereInnerEnumerator, TExcept_WherePredicate>>(ref source, ref second, comparer);

//        public static ExceptSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, WhereSelectEnumerable<int, TExcept_WhereInnerItem, TExcept_WhereInnerEnumerable, TExcept_WhereInnerEnumerator, TExcept_WherePredicate, TExcept_WhereProjection>, WhereSelectEnumerator<int, TExcept_WhereInnerItem, TExcept_WhereInnerEnumerator, TExcept_WherePredicate, TExcept_WhereProjection>> Except<TExcept_WhereInnerItem, TExcept_WhereInnerEnumerable, TExcept_WhereInnerEnumerator, TExcept_WherePredicate, TExcept_WhereProjection>(this RangeEnumerable source, WhereSelectEnumerable<int, TExcept_WhereInnerItem, TExcept_WhereInnerEnumerable, TExcept_WhereInnerEnumerator, TExcept_WherePredicate, TExcept_WhereProjection> second, IEqualityComparer<int> comparer)
//        where TExcept_WhereInnerEnumerable : struct, IStructEnumerable<TExcept_WhereInnerItem, TExcept_WhereInnerEnumerator>
//        where TExcept_WhereInnerEnumerator : struct, IStructEnumerator<TExcept_WhereInnerItem>
//        where TExcept_WherePredicate : struct, IStructPredicate<TExcept_WhereInnerItem>
//        where TExcept_WhereProjection : struct, IStructProjection<int, TExcept_WhereInnerItem>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, WhereSelectEnumerable<int, TExcept_WhereInnerItem, TExcept_WhereInnerEnumerable, TExcept_WhereInnerEnumerator, TExcept_WherePredicate, TExcept_WhereProjection>, WhereSelectEnumerator<int, TExcept_WhereInnerItem, TExcept_WhereInnerEnumerator, TExcept_WherePredicate, TExcept_WhereProjection>>(ref source, ref second, comparer);

//        public static ExceptSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, DistinctDefaultEnumerable<int, TExcept_DistinctInnerEnumerable, TExcept_DistinctInnerEnumerator>, DistinctDefaultEnumerator<int, TExcept_DistinctInnerEnumerator>> Except<TExcept_DistinctInnerEnumerable, TExcept_DistinctInnerEnumerator>(this RangeEnumerable source, DistinctDefaultEnumerable<int, TExcept_DistinctInnerEnumerable, TExcept_DistinctInnerEnumerator> second, IEqualityComparer<int> comparer)
//        where TExcept_DistinctInnerEnumerable : struct, IStructEnumerable<int, TExcept_DistinctInnerEnumerator>
//        where TExcept_DistinctInnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, DistinctDefaultEnumerable<int, TExcept_DistinctInnerEnumerable, TExcept_DistinctInnerEnumerator>, DistinctDefaultEnumerator<int, TExcept_DistinctInnerEnumerator>>(ref source, ref second, comparer);

//        public static ExceptSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, DistinctSpecificEnumerable<int, TExcept_DistinctInnerEnumerable, TExcept_DistinctInnerEnumerator>, DistinctSpecificEnumerator<int, TExcept_DistinctInnerEnumerator>> Except<TExcept_DistinctInnerEnumerable, TExcept_DistinctInnerEnumerator>(this RangeEnumerable source, DistinctSpecificEnumerable<int, TExcept_DistinctInnerEnumerable, TExcept_DistinctInnerEnumerator> second, IEqualityComparer<int> comparer)
//        where TExcept_DistinctInnerEnumerable : struct, IStructEnumerable<int, TExcept_DistinctInnerEnumerator>
//        where TExcept_DistinctInnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, DistinctSpecificEnumerable<int, TExcept_DistinctInnerEnumerable, TExcept_DistinctInnerEnumerator>, DistinctSpecificEnumerator<int, TExcept_DistinctInnerEnumerator>>(ref source, ref second, comparer);

//        public static ExceptSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, EmptyEnumerable<int>, EmptyEnumerator<int>> Except(this RangeEnumerable source, EmptyOrderedEnumerable<int> second, IEqualityComparer<int> comparer)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            if (second.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(second));

//            var empty = EmptyCache<int>.Empty;
//            return CommonImplementation.ExceptImpl<int, RangeEnumerable, RangeEnumerator, EmptyEnumerable<int>, EmptyEnumerator<int>>(ref source, ref empty, comparer);
//        }

//        public static ExceptSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, ExceptDefaultEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>, ExceptDefaultEnumerator<int, TExceptFirstEnumerator, TExceptSecondEnumerator>> Except<TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>(this RangeEnumerable source, ExceptDefaultEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator> second, IEqualityComparer<int> comparer)
//        where TExceptFirstEnumerable : struct, IStructEnumerable<int, TExceptFirstEnumerator>
//        where TExceptFirstEnumerator : struct, IStructEnumerator<int>
//        where TExceptSecondEnumerable : struct, IStructEnumerable<int, TExceptSecondEnumerator>
//        where TExceptSecondEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, ExceptDefaultEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>, ExceptDefaultEnumerator<int, TExceptFirstEnumerator, TExceptSecondEnumerator>>(ref source, ref second, comparer);

//        public static ExceptSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, ExceptSpecificEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>, ExceptSpecificEnumerator<int, TExceptFirstEnumerator, TExceptSecondEnumerator>> Except<TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>(this RangeEnumerable source, ExceptSpecificEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator> second, IEqualityComparer<int> comparer)
//        where TExceptFirstEnumerable : struct, IStructEnumerable<int, TExceptFirstEnumerator>
//        where TExceptFirstEnumerator : struct, IStructEnumerator<int>
//        where TExceptSecondEnumerable : struct, IStructEnumerable<int, TExceptSecondEnumerator>
//        where TExceptSecondEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, ExceptSpecificEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>, ExceptSpecificEnumerator<int, TExceptFirstEnumerator, TExceptSecondEnumerator>>(ref source, ref second, comparer);

//        public static ExceptSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, IntersectDefaultEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>, IntersectDefaultEnumerator<int, TExceptFirstEnumerator, TExceptSecondEnumerator>> Except<TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>(this RangeEnumerable source, IntersectDefaultEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator> second, IEqualityComparer<int> comparer)
//        where TExceptFirstEnumerable : struct, IStructEnumerable<int, TExceptFirstEnumerator>
//        where TExceptFirstEnumerator : struct, IStructEnumerator<int>
//        where TExceptSecondEnumerable : struct, IStructEnumerable<int, TExceptSecondEnumerator>
//        where TExceptSecondEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, IntersectDefaultEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>, IntersectDefaultEnumerator<int, TExceptFirstEnumerator, TExceptSecondEnumerator>>(ref source, ref second, comparer);

//        public static ExceptSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, IntersectSpecificEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>, IntersectSpecificEnumerator<int, TExceptFirstEnumerator, TExceptSecondEnumerator>> Except<TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>(this RangeEnumerable source, IntersectSpecificEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator> second, IEqualityComparer<int> comparer)
//        where TExceptFirstEnumerable : struct, IStructEnumerable<int, TExceptFirstEnumerator>
//        where TExceptFirstEnumerator : struct, IStructEnumerator<int>
//        where TExceptSecondEnumerable : struct, IStructEnumerable<int, TExceptSecondEnumerator>
//        where TExceptSecondEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, IntersectSpecificEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>, IntersectSpecificEnumerator<int, TExceptFirstEnumerator, TExceptSecondEnumerator>>(ref source, ref second, comparer);

//        public static ExceptSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, UnionDefaultEnumerable<int, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator>, UnionDefaultEnumerator<int, TUnionFirstEnumerator, TUnionSecondEnumerator>> Except<TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator>(this RangeEnumerable source, UnionDefaultEnumerable<int, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator> second, IEqualityComparer<int> comparer)
//        where TUnionFirstEnumerable : struct, IStructEnumerable<int, TUnionFirstEnumerator>
//        where TUnionFirstEnumerator : struct, IStructEnumerator<int>
//        where TUnionSecondEnumerable : struct, IStructEnumerable<int, TUnionSecondEnumerator>
//        where TUnionSecondEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, UnionDefaultEnumerable<int, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator>, UnionDefaultEnumerator<int, TUnionFirstEnumerator, TUnionSecondEnumerator>>(ref source, ref second, comparer);

//        public static ExceptSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, UnionSpecificEnumerable<int, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator>, UnionSpecificEnumerator<int, TUnionFirstEnumerator, TUnionSecondEnumerator>> Except<TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator>(this RangeEnumerable source, UnionSpecificEnumerable<int, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator> second, IEqualityComparer<int> comparer)
//        where TUnionFirstEnumerable : struct, IStructEnumerable<int, TUnionFirstEnumerator>
//        where TUnionFirstEnumerator : struct, IStructEnumerator<int>
//        where TUnionSecondEnumerable : struct, IStructEnumerable<int, TUnionSecondEnumerator>
//        where TUnionSecondEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, UnionSpecificEnumerable<int, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator>, UnionSpecificEnumerator<int, TUnionFirstEnumerator, TUnionSecondEnumerator>>(ref source, ref second, comparer);

//        public static ExceptSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, GroupedEnumerable<TGroupedKey, int>, GroupedEnumerator<int>> Except<TGroupedKey>(this RangeEnumerable source, GroupedEnumerable<TGroupedKey, int> second, IEqualityComparer<int> comparer)
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, GroupedEnumerable<TGroupedKey, int>, GroupedEnumerator<int>>(ref source, ref second, comparer);

//        public static ExceptSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, GroupingEnumerable<TGroupedKey, int>, GroupingEnumerator<int>> Except<TGroupedKey>(this RangeEnumerable source, GroupingEnumerable<TGroupedKey, int> second, IEqualityComparer<int> comparer)
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, GroupingEnumerable<TGroupedKey, int>, GroupingEnumerator<int>>(ref source, ref second, comparer);

//        public static ExceptSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, ReverseEnumerable<int, TReverseEnumerable, TReverseEnumerator>, ReverseEnumerator<int>> Except<TReverseEnumerable, TReverseEnumerator>(this RangeEnumerable source, ReverseEnumerable<int, TReverseEnumerable, TReverseEnumerator> second, IEqualityComparer<int> comparer)
//        where TReverseEnumerable : struct, IStructEnumerable<int, TReverseEnumerator>
//        where TReverseEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, ReverseEnumerable<int, TReverseEnumerable, TReverseEnumerator>, ReverseEnumerator<int>>(ref source, ref second, comparer);

//        public static ExceptSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, OrderByEnumerable<int, TOrderByKey, TOrderByEnumerable, TOrderByEnumerator, TOrderByComparer>, OrderByEnumerator<int, TOrderByKey, TOrderByEnumerator, TOrderByComparer>> Except<TOrderByKey, TOrderByEnumerable, TOrderByEnumerator, TOrderByComparer>(this RangeEnumerable source, OrderByEnumerable<int, TOrderByKey, TOrderByEnumerable, TOrderByEnumerator, TOrderByComparer> second, IEqualityComparer<int> comparer)
//        where TOrderByEnumerable : struct, IStructEnumerable<int, TOrderByEnumerator>
//        where TOrderByEnumerator : struct, IStructEnumerator<int>
//        where TOrderByComparer : struct, IStructComparer<int, TOrderByKey>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, OrderByEnumerable<int, TOrderByKey, TOrderByEnumerable, TOrderByEnumerator, TOrderByComparer>, OrderByEnumerator<int, TOrderByKey, TOrderByEnumerator, TOrderByComparer>>(ref source, ref second, comparer);

//        public static ExceptSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, GroupJoinDefaultEnumerable<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator>, GroupJoinDefaultEnumerator<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerator>> Except<TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator>(this RangeEnumerable source, GroupJoinDefaultEnumerable<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator> second, IEqualityComparer<int> comparer)
//        where TGroupJoinLeftEnumerable : struct, IStructEnumerable<TGroupJoinLefint, TGroupJoinLeftEnumerator>
//        where TGroupJoinLeftEnumerator : struct, IStructEnumerator<TGroupJoinLefint>
//        where TGroupJoinRightEnumerable : struct, IStructEnumerable<TGroupJoinRighint, TGroupJoinRightEnumerator>
//        where TGroupJoinRightEnumerator : struct, IStructEnumerator<TGroupJoinRighint>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, GroupJoinDefaultEnumerable<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator>, GroupJoinDefaultEnumerator<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerator>>(ref source, ref second, comparer);

//        public static ExceptSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, GroupJoinSpecificEnumerable<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator>, GroupJoinSpecificEnumerator<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerator>> Except<TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator>(this RangeEnumerable source, GroupJoinSpecificEnumerable<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator> second, IEqualityComparer<int> comparer)
//        where TGroupJoinLeftEnumerable : struct, IStructEnumerable<TGroupJoinLefint, TGroupJoinLeftEnumerator>
//        where TGroupJoinLeftEnumerator : struct, IStructEnumerator<TGroupJoinLefint>
//        where TGroupJoinRightEnumerable : struct, IStructEnumerable<TGroupJoinRighint, TGroupJoinRightEnumerator>
//        where TGroupJoinRightEnumerator : struct, IStructEnumerator<TGroupJoinRighint>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, GroupJoinSpecificEnumerable<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator>, GroupJoinSpecificEnumerator<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerator>>(ref source, ref second, comparer);

//        public static ExceptSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, GroupByCollectionDefaultEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, int, TGroupByEnumerable, TGroupByEnumerator>, GroupByCollectionDefaultEnumerator<TGroupByInItem, TGroupByKey, TGroupByElement, int, TGroupByEnumerator>> Except<TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByEnumerable, TGroupByEnumerator>(this RangeEnumerable source, GroupByCollectionDefaultEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, int, TGroupByEnumerable, TGroupByEnumerator> second, IEqualityComparer<int> comparer)
//        where TGroupByEnumerable : struct, IStructEnumerable<TGroupByInItem, TGroupByEnumerator>
//        where TGroupByEnumerator : struct, IStructEnumerator<TGroupByInItem>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, GroupByCollectionDefaultEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, int, TGroupByEnumerable, TGroupByEnumerator>, GroupByCollectionDefaultEnumerator<TGroupByInItem, TGroupByKey, TGroupByElement, int, TGroupByEnumerator>>(ref source, ref second, comparer);

//        public static ExceptSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, GroupByCollectionSpecificEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, int, TGroupByEnumerable, TGroupByEnumerator>, GroupByCollectionSpecificEnumerator<TGroupByInItem, TGroupByKey, TGroupByElement, int, TGroupByEnumerator>> Except<TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByEnumerable, TGroupByEnumerator>(this RangeEnumerable source, GroupByCollectionSpecificEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, int, TGroupByEnumerable, TGroupByEnumerator> second, IEqualityComparer<int> comparer)
//        where TGroupByEnumerable : struct, IStructEnumerable<TGroupByInItem, TGroupByEnumerator>
//        where TGroupByEnumerator : struct, IStructEnumerator<TGroupByInItem>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, GroupByCollectionSpecificEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, int, TGroupByEnumerable, TGroupByEnumerator>, GroupByCollectionSpecificEnumerator<TGroupByInItem, TGroupByKey, TGroupByElement, int, TGroupByEnumerator>>(ref source, ref second, comparer);

//        public static ExceptSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, JoinDefaultEnumerable<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerable, TJoinRightEnumerator>, JoinDefaultEnumerator<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerator>> Except<TJoinKeyItem, TJoinLefint, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerable, TJoinRightEnumerator>(this RangeEnumerable source, JoinDefaultEnumerable<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerable, TJoinRightEnumerator> second, IEqualityComparer<int> comparer)
//        where TJoinLeftEnumerable : struct, IStructEnumerable<TJoinLefint, TJoinLeftEnumerator>
//        where TJoinLeftEnumerator : struct, IStructEnumerator<TJoinLefint>
//        where TJoinRightEnumerable : struct, IStructEnumerable<TJoinRighint, TJoinRightEnumerator>
//        where TJoinRightEnumerator : struct, IStructEnumerator<TJoinRighint>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, JoinDefaultEnumerable<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerable, TJoinRightEnumerator>, JoinDefaultEnumerator<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerator>>(ref source, ref second, comparer);

//        public static ExceptSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, JoinSpecificEnumerable<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerable, TJoinRightEnumerator>, JoinSpecificEnumerator<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerator>> Except<TJoinKeyItem, TJoinLefint, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerable, TJoinRightEnumerator>(this RangeEnumerable source, JoinSpecificEnumerable<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerable, TJoinRightEnumerator> second, IEqualityComparer<int> comparer)
//        where TJoinLeftEnumerable : struct, IStructEnumerable<TJoinLefint, TJoinLeftEnumerator>
//        where TJoinLeftEnumerator : struct, IStructEnumerator<TJoinLefint>
//        where TJoinRightEnumerable : struct, IStructEnumerable<TJoinRighint, TJoinRightEnumerator>
//        where TJoinRightEnumerator : struct, IStructEnumerator<TJoinRighint>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, JoinSpecificEnumerable<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerable, TJoinRightEnumerator>, JoinSpecificEnumerator<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerator>>(ref source, ref second, comparer);

//        public static ExceptDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, OneItemDefaultEnumerable<int>, OneItemDefaultEnumerator<int>> Except(this RangeEnumerable source, OneItemDefaultEnumerable<int> second)
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, OneItemDefaultEnumerable<int>, OneItemDefaultEnumerator<int>>(ref source, ref second);

//        public static ExceptSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, OneItemDefaultEnumerable<int>, OneItemDefaultEnumerator<int>> Except(this RangeEnumerable source, OneItemDefaultEnumerable<int> second, IEqualityComparer<int> comparer)
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, OneItemDefaultEnumerable<int>, OneItemDefaultEnumerator<int>>(ref source, ref second, comparer);

//        public static ExceptDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, OneItemSpecificEnumerable<int>, OneItemSpecificEnumerator<int>> Except(this RangeEnumerable source, OneItemSpecificEnumerable<int> second)
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, OneItemSpecificEnumerable<int>, OneItemSpecificEnumerator<int>>(ref source, ref second);

//        public static ExceptSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, OneItemSpecificEnumerable<int>, OneItemSpecificEnumerator<int>> Except(this RangeEnumerable source, OneItemSpecificEnumerable<int> second, IEqualityComparer<int> comparer)
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, OneItemSpecificEnumerable<int>, OneItemSpecificEnumerator<int>>(ref source, ref second, comparer);

//        public static ExceptDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, OneItemDefaultOrderedEnumerable<int>, OneItemDefaultOrderedEnumerator<int>> Except(this RangeEnumerable source, OneItemDefaultOrderedEnumerable<int> second)
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, OneItemDefaultOrderedEnumerable<int>, OneItemDefaultOrderedEnumerator<int>>(ref source, ref second);

//        public static ExceptSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, OneItemDefaultOrderedEnumerable<int>, OneItemDefaultOrderedEnumerator<int>> Except(this RangeEnumerable source, OneItemDefaultOrderedEnumerable<int> second, IEqualityComparer<int> comparer)
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, OneItemDefaultOrderedEnumerable<int>, OneItemDefaultOrderedEnumerator<int>>(ref source, ref second, comparer);

//        public static ExceptDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, OneItemSpecificOrderedEnumerable<int>, OneItemSpecificOrderedEnumerator<int>> Except(this RangeEnumerable source, OneItemSpecificOrderedEnumerable<int> second)
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, OneItemSpecificOrderedEnumerable<int>, OneItemSpecificOrderedEnumerator<int>>(ref source, ref second);

//        public static ExceptSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, OneItemSpecificOrderedEnumerable<int>, OneItemSpecificOrderedEnumerator<int>> Except(this RangeEnumerable source, OneItemSpecificOrderedEnumerable<int> second, IEqualityComparer<int> comparer)
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, OneItemSpecificOrderedEnumerable<int>, OneItemSpecificOrderedEnumerator<int>>(ref source, ref second, comparer);

//        public static ExceptDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, SkipLastEnumerable<int, TSkipLastInnerEnumerable, TSkipLastInnerEnumerator>, SkipLastEnumerator<int, TSkipLastInnerEnumerator>> Except<TSkipLastInnerEnumerable, TSkipLastInnerEnumerator>(this RangeEnumerable source, SkipLastEnumerable<int, TSkipLastInnerEnumerable, TSkipLastInnerEnumerator> second)
//        where TSkipLastInnerEnumerable : struct, IStructEnumerable<int, TSkipLastInnerEnumerator>
//        where TSkipLastInnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, SkipLastEnumerable<int, TSkipLastInnerEnumerable, TSkipLastInnerEnumerator>, SkipLastEnumerator<int, TSkipLastInnerEnumerator>>(ref source, ref second);

//        public static ExceptDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, TakeLastEnumerable<int, TTakeLastInnerEnumerable, TTakeLastInnerEnumerator>, TakeLastEnumerator<int, TTakeLastInnerEnumerator>> Except<TTakeLastInnerEnumerable, TTakeLastInnerEnumerator>(this RangeEnumerable source, TakeLastEnumerable<int, TTakeLastInnerEnumerable, TTakeLastInnerEnumerator> second)
//        where TTakeLastInnerEnumerable : struct, IStructEnumerable<int, TTakeLastInnerEnumerator>
//        where TTakeLastInnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, TakeLastEnumerable<int, TTakeLastInnerEnumerable, TTakeLastInnerEnumerator>, TakeLastEnumerator<int, TTakeLastInnerEnumerator>>(ref source, ref second);

//        public static ExceptSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, SkipLastEnumerable<int, TSkipLastInnerEnumerable, TSkipLastInnerEnumerator>, SkipLastEnumerator<int, TSkipLastInnerEnumerator>> Except<TSkipLastInnerEnumerable, TSkipLastInnerEnumerator>(this RangeEnumerable source, SkipLastEnumerable<int, TSkipLastInnerEnumerable, TSkipLastInnerEnumerator> second, IEqualityComparer<int> comparer)
//        where TSkipLastInnerEnumerable : struct, IStructEnumerable<int, TSkipLastInnerEnumerator>
//        where TSkipLastInnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, SkipLastEnumerable<int, TSkipLastInnerEnumerable, TSkipLastInnerEnumerator>, SkipLastEnumerator<int, TSkipLastInnerEnumerator>>(ref source, ref second, comparer);

//        public static ExceptSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, TakeLastEnumerable<int, TTakeLastInnerEnumerable, TTakeLastInnerEnumerator>, TakeLastEnumerator<int, TTakeLastInnerEnumerator>> Except<TTakeLastInnerEnumerable, TTakeLastInnerEnumerator>(this RangeEnumerable source, TakeLastEnumerable<int, TTakeLastInnerEnumerable, TTakeLastInnerEnumerator> second, IEqualityComparer<int> comparer)
//        where TTakeLastInnerEnumerable : struct, IStructEnumerable<int, TTakeLastInnerEnumerator>
//        where TTakeLastInnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, TakeLastEnumerable<int, TTakeLastInnerEnumerable, TTakeLastInnerEnumerator>, TakeLastEnumerator<int, TTakeLastInnerEnumerator>>(ref source, ref second, comparer);

//        public static ExceptDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, AppendEnumerable<int, TAppendInnerEnumerable, TAppendInnerEnumerator>, AppendEnumerator<int, TAppendInnerEnumerator>> Except<TAppendInnerEnumerable, TAppendInnerEnumerator>(this RangeEnumerable source, AppendEnumerable<int, TAppendInnerEnumerable, TAppendInnerEnumerator> second)
//        where TAppendInnerEnumerable : struct, IStructEnumerable<int, TAppendInnerEnumerator>
//        where TAppendInnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, AppendEnumerable<int, TAppendInnerEnumerable, TAppendInnerEnumerator>, AppendEnumerator<int, TAppendInnerEnumerator>>(ref source, ref second);

//        public static ExceptSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, AppendEnumerable<int, TAppendInnerEnumerable, TAppendInnerEnumerator>, AppendEnumerator<int, TAppendInnerEnumerator>> Except<TAppendInnerEnumerable, TAppendInnerEnumerator>(this RangeEnumerable source, AppendEnumerable<int, TAppendInnerEnumerable, TAppendInnerEnumerator> second, IEqualityComparer<int> comparer)
//        where TAppendInnerEnumerable : struct, IStructEnumerable<int, TAppendInnerEnumerator>
//        where TAppendInnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, AppendEnumerable<int, TAppendInnerEnumerable, TAppendInnerEnumerator>, AppendEnumerator<int, TAppendInnerEnumerator>>(ref source, ref second, comparer);

//        public static ExceptDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, PrependEnumerable<int, TPrependInnerEnumerable, TPrependInnerEnumerator>, PrependEnumerator<int, TPrependInnerEnumerator>> Except<TPrependInnerEnumerable, TPrependInnerEnumerator>(this RangeEnumerable source, PrependEnumerable<int, TPrependInnerEnumerable, TPrependInnerEnumerator> second)
//        where TPrependInnerEnumerable : struct, IStructEnumerable<int, TPrependInnerEnumerator>
//        where TPrependInnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, PrependEnumerable<int, TPrependInnerEnumerable, TPrependInnerEnumerator>, PrependEnumerator<int, TPrependInnerEnumerator>>(ref source, ref second);

//        public static ExceptSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, PrependEnumerable<int, TPrependInnerEnumerable, TPrependInnerEnumerator>, PrependEnumerator<int, TPrependInnerEnumerator>> Except<TPrependInnerEnumerable, TPrependInnerEnumerator>(this RangeEnumerable source, PrependEnumerable<int, TPrependInnerEnumerable, TPrependInnerEnumerator> second, IEqualityComparer<int> comparer)
//        where TPrependInnerEnumerable : struct, IStructEnumerable<int, TPrependInnerEnumerator>
//        where TPrependInnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Except<int, RangeEnumerable, RangeEnumerator, PrependEnumerable<int, TPrependInnerEnumerable, TPrependInnerEnumerator>, PrependEnumerator<int, TPrependInnerEnumerator>>(ref source, ref second, comparer);

//        // First

//        public static int First(this RangeEnumerable source)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            if (source.InnerCount == 0) throw CommonImplementation.SequenceEmpty();

//            return source.Start;
//        }
        

//        public static int First(this RangeEnumerable source, Func<int, bool> predicate)
//        => CommonImplementation.First<int, RangeEnumerable, RangeEnumerator>(ref source, predicate);

//        public static int FirstOrDefault(this RangeEnumerable source)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            if (source.InnerCount == 0)
//            {
//                return default(int);
//            }

//            return source.Start;
//        }

//        public static int FirstOrDefault(this RangeEnumerable source, Func<int, bool> predicate)
//        => CommonImplementation.FirstOrDefault<int, RangeEnumerable, RangeEnumerator>(ref source, predicate);

//        // GroupBy

//        public static GroupByDefaultEnumerable<int, TKey, int, RangeEnumerable, RangeEnumerator> GroupBy<TKey>(this RangeEnumerable source, Func<int, TKey> keySelector)
//        {
//            Func<int, int> elementSelector = _ => _;
//            return CommonImplementation.GroupBy<int, TKey, int, RangeEnumerable, RangeEnumerator>(ref source, keySelector, elementSelector);
//        }

//        public static GroupBySpecificEnumerable<int, TKey, int, RangeEnumerable, RangeEnumerator> GroupBy<TKey>(this RangeEnumerable source, Func<int, TKey> keySelector, IEqualityComparer<TKey> comparer)
//        {
//            Func<int, int> elementSelector = _ => _;
//            return CommonImplementation.GroupBy<int, TKey, int, RangeEnumerable, RangeEnumerator>(ref source, keySelector, elementSelector, comparer);
//        }

//        public static GroupByDefaultEnumerable<int, TKey, TElement, RangeEnumerable, RangeEnumerator> GroupBy<TKey, TElement>(this RangeEnumerable source, Func<int, TKey> keySelector, Func<int, TElement> elementSelector)
//        => CommonImplementation.GroupBy<int, TKey, TElement, RangeEnumerable, RangeEnumerator>(ref source, keySelector, elementSelector);

//        public static GroupBySpecificEnumerable<int, TKey, TElement, RangeEnumerable, RangeEnumerator> GroupBy<TKey, TElement>(this RangeEnumerable source, Func<int, TKey> keySelector, Func<int, TElement> elementSelector, IEqualityComparer<TKey> comparer)
//        => CommonImplementation.GroupBy<int, TKey, TElement, RangeEnumerable, RangeEnumerator>(ref source, keySelector, elementSelector, comparer);

//        public static GroupByCollectionDefaultEnumerable<int, TKey, int, TResult, RangeEnumerable, RangeEnumerator> GroupBy<TKey, TResult>(this RangeEnumerable source, Func<int, TKey> keySelector, Func<TKey, GroupedEnumerable<TKey, int>, TResult> resultSelector)
//        {
//            Func<int, int> elementSelector = _ => _;
//            return CommonImplementation.GroupBy<int, TKey, int, TResult, RangeEnumerable, RangeEnumerator>(ref source, keySelector, elementSelector, resultSelector);
//        }

//        public static GroupByCollectionSpecificEnumerable<int, TKey, int, TResult, RangeEnumerable, RangeEnumerator> GroupBy<TKey, TResult>(this RangeEnumerable source, Func<int, TKey> keySelector, Func<TKey, GroupedEnumerable<TKey, int>, TResult> resultSelector, IEqualityComparer<TKey> comparer)
//        {
//            Func<int, int> elementSelector = _ => _;
//            return CommonImplementation.GroupBy<int, TKey, int, TResult, RangeEnumerable, RangeEnumerator>(ref source, keySelector, elementSelector, resultSelector, comparer);
//        }

//        public static GroupByCollectionDefaultEnumerable<int, TKey, TElement, TResult, RangeEnumerable, RangeEnumerator> GroupBy<TKey, TElement, TResult>(this RangeEnumerable source, Func<int, TKey> keySelector, Func<int, TElement> elementSelector, Func<TKey, GroupedEnumerable<TKey, TElement>, TResult> resultSelector)
//        => CommonImplementation.GroupBy<int, TKey, TElement, TResult, RangeEnumerable, RangeEnumerator>(ref source, keySelector, elementSelector, resultSelector);

//        public static GroupByCollectionSpecificEnumerable<int, TKey, TElement, TResult, RangeEnumerable, RangeEnumerator> GroupBy<TKey, TElement, TResult>(this RangeEnumerable source, Func<int, TKey> keySelector, Func<int, TElement> elementSelector, Func<TKey, GroupedEnumerable<TKey, TElement>, TResult> resultSelector, IEqualityComparer<TKey> comparer)
//        => CommonImplementation.GroupBy<int, TKey, TElement, TResult, RangeEnumerable, RangeEnumerator>(ref source, keySelector, elementSelector, resultSelector, comparer);

//        // GroupJoin

//        public static GroupJoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, BoxedEnumerable<TRightItem>, BoxedEnumerator<TRightItem>> GroupJoin<TOutItem, TKeyItem, TRightItem>(this RangeEnumerable source, BoxedEnumerable<TRightItem> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector)
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, BoxedEnumerable<TRightItem>, BoxedEnumerator<TRightItem>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static GroupJoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, BoxedEnumerable<TRightItem>, BoxedEnumerator<TRightItem>> GroupJoin<TOutItem, TKeyItem, TRightItem>(this RangeEnumerable source, BoxedEnumerable<TRightItem> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, BoxedEnumerable<TRightItem>, BoxedEnumerator<TRightItem>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static GroupJoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, CastEnumerable<TCastInItem, TRightItem, TCastInnerEnumerable, TCastInnerEnumerator>, CastEnumerator<TCastInItem, TRightItem, TCastInnerEnumerator>> GroupJoin<TOutItem, TCastInItem, TKeyItem, TRightItem, TCastInnerEnumerable, TCastInnerEnumerator>(this RangeEnumerable source, CastEnumerable<TCastInItem, TRightItem, TCastInnerEnumerable, TCastInnerEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector)
//        where TCastInnerEnumerable : struct, IStructEnumerable<TCastInItem, TCastInnerEnumerator>
//        where TCastInnerEnumerator : struct, IStructEnumerator<TCastInItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, CastEnumerable<TCastInItem, TRightItem, TCastInnerEnumerable, TCastInnerEnumerator>, CastEnumerator<TCastInItem, TRightItem, TCastInnerEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static GroupJoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, CastEnumerable<TCastInItem, TRightItem, TCastInnerEnumerable, TCastInnerEnumerator>, CastEnumerator<TCastInItem, TRightItem, TCastInnerEnumerator>> GroupJoin<TOutItem, TCastInItem, TKeyItem, TRightItem, TCastInnerEnumerable, TCastInnerEnumerator>(this RangeEnumerable source, CastEnumerable<TCastInItem, TRightItem, TCastInnerEnumerable, TCastInnerEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TCastInnerEnumerable : struct, IStructEnumerable<TCastInItem, TCastInnerEnumerator>
//        where TCastInnerEnumerator : struct, IStructEnumerator<TCastInItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, CastEnumerable<TCastInItem, TRightItem, TCastInnerEnumerable, TCastInnerEnumerator>, CastEnumerator<TCastInItem, TRightItem, TCastInnerEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static GroupJoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, ConcatEnumerable<TRightItem, TConcatFirstEnumerable, TConcatFirstEnumerator, TConcatSecondEnumerable, TConcatSecondEnumerator>, ConcatEnumerator<TRightItem, TConcatFirstEnumerator, TConcatSecondEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TConcatFirstEnumerable, TConcatFirstEnumerator, TConcatSecondEnumerable, TConcatSecondEnumerator>(this RangeEnumerable source, ConcatEnumerable<TRightItem, TConcatFirstEnumerable, TConcatFirstEnumerator, TConcatSecondEnumerable, TConcatSecondEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector)
//        where TConcatFirstEnumerable : struct, IStructEnumerable<TRightItem, TConcatFirstEnumerator>
//        where TConcatFirstEnumerator : struct, IStructEnumerator<TRightItem>
//        where TConcatSecondEnumerable : struct, IStructEnumerable<TRightItem, TConcatSecondEnumerator>
//        where TConcatSecondEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, ConcatEnumerable<TRightItem, TConcatFirstEnumerable, TConcatFirstEnumerator, TConcatSecondEnumerable, TConcatSecondEnumerator>, ConcatEnumerator<TRightItem, TConcatFirstEnumerator, TConcatSecondEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static GroupJoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, ConcatEnumerable<TRightItem, TConcatFirstEnumerable, TConcatFirstEnumerator, TConcatSecondEnumerable, TConcatSecondEnumerator>, ConcatEnumerator<TRightItem, TConcatFirstEnumerator, TConcatSecondEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TConcatFirstEnumerable, TConcatFirstEnumerator, TConcatSecondEnumerable, TConcatSecondEnumerator>(this RangeEnumerable source, ConcatEnumerable<TRightItem, TConcatFirstEnumerable, TConcatFirstEnumerator, TConcatSecondEnumerable, TConcatSecondEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TConcatFirstEnumerable : struct, IStructEnumerable<TRightItem, TConcatFirstEnumerator>
//        where TConcatFirstEnumerator : struct, IStructEnumerator<TRightItem>
//        where TConcatSecondEnumerable : struct, IStructEnumerable<TRightItem, TConcatSecondEnumerator>
//        where TConcatSecondEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, ConcatEnumerable<TRightItem, TConcatFirstEnumerable, TConcatFirstEnumerator, TConcatSecondEnumerable, TConcatSecondEnumerator>, ConcatEnumerator<TRightItem, TConcatFirstEnumerator, TConcatSecondEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static GroupJoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, DefaultIfEmptyDefaultEnumerable<TRightItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>, DefaultIfEmptyDefaultEnumerator<TRightItem, TDefaultIfEmptyInnerEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>(this RangeEnumerable source, DefaultIfEmptyDefaultEnumerable<TRightItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector)
//        where TDefaultIfEmptyInnerEnumerable : struct, IStructEnumerable<TRightItem, TDefaultIfEmptyInnerEnumerator>
//        where TDefaultIfEmptyInnerEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, DefaultIfEmptyDefaultEnumerable<TRightItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>, DefaultIfEmptyDefaultEnumerator<TRightItem, TDefaultIfEmptyInnerEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static GroupJoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, DefaultIfEmptyDefaultEnumerable<TRightItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>, DefaultIfEmptyDefaultEnumerator<TRightItem, TDefaultIfEmptyInnerEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>(this RangeEnumerable source, DefaultIfEmptyDefaultEnumerable<TRightItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TDefaultIfEmptyInnerEnumerable : struct, IStructEnumerable<TRightItem, TDefaultIfEmptyInnerEnumerator>
//        where TDefaultIfEmptyInnerEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, DefaultIfEmptyDefaultEnumerable<TRightItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>, DefaultIfEmptyDefaultEnumerator<TRightItem, TDefaultIfEmptyInnerEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static GroupJoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, DefaultIfEmptySpecificEnumerable<TRightItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>, DefaultIfEmptySpecificEnumerator<TRightItem, TDefaultIfEmptyInnerEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>(this RangeEnumerable source, DefaultIfEmptySpecificEnumerable<TRightItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector)
//        where TDefaultIfEmptyInnerEnumerable : struct, IStructEnumerable<TRightItem, TDefaultIfEmptyInnerEnumerator>
//        where TDefaultIfEmptyInnerEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, DefaultIfEmptySpecificEnumerable<TRightItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>, DefaultIfEmptySpecificEnumerator<TRightItem, TDefaultIfEmptyInnerEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static GroupJoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, DefaultIfEmptySpecificEnumerable<TRightItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>, DefaultIfEmptySpecificEnumerator<TRightItem, TDefaultIfEmptyInnerEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>(this RangeEnumerable source, DefaultIfEmptySpecificEnumerable<TRightItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TDefaultIfEmptyInnerEnumerable : struct, IStructEnumerable<TRightItem, TDefaultIfEmptyInnerEnumerator>
//        where TDefaultIfEmptyInnerEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, DefaultIfEmptySpecificEnumerable<TRightItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>, DefaultIfEmptySpecificEnumerator<TRightItem, TDefaultIfEmptyInnerEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static GroupJoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, DistinctDefaultEnumerable<TRightItem, TDistinctInnerEnumerable, TDistinctInnerEnumerator>, DistinctDefaultEnumerator<TRightItem, TDistinctInnerEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TDistinctInnerEnumerable, TDistinctInnerEnumerator>(this RangeEnumerable source, DistinctDefaultEnumerable<TRightItem, TDistinctInnerEnumerable, TDistinctInnerEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector)
//        where TDistinctInnerEnumerable : struct, IStructEnumerable<TRightItem, TDistinctInnerEnumerator>
//        where TDistinctInnerEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, DistinctDefaultEnumerable<TRightItem, TDistinctInnerEnumerable, TDistinctInnerEnumerator>, DistinctDefaultEnumerator<TRightItem, TDistinctInnerEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static GroupJoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, DistinctDefaultEnumerable<TRightItem, TDistinctInnerEnumerable, TDistinctInnerEnumerator>, DistinctDefaultEnumerator<TRightItem, TDistinctInnerEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TDistinctInnerEnumerable, TDistinctInnerEnumerator>(this RangeEnumerable source, DistinctDefaultEnumerable<TRightItem, TDistinctInnerEnumerable, TDistinctInnerEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TDistinctInnerEnumerable : struct, IStructEnumerable<TRightItem, TDistinctInnerEnumerator>
//        where TDistinctInnerEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, DistinctDefaultEnumerable<TRightItem, TDistinctInnerEnumerable, TDistinctInnerEnumerator>, DistinctDefaultEnumerator<TRightItem, TDistinctInnerEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static GroupJoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, DistinctSpecificEnumerable<TRightItem, TDistinctInnerEnumerable, TDistinctInnerEnumerator>, DistinctSpecificEnumerator<TRightItem, TDistinctInnerEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TDistinctInnerEnumerable, TDistinctInnerEnumerator>(this RangeEnumerable source, DistinctSpecificEnumerable<TRightItem, TDistinctInnerEnumerable, TDistinctInnerEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector)
//        where TDistinctInnerEnumerable : struct, IStructEnumerable<TRightItem, TDistinctInnerEnumerator>
//        where TDistinctInnerEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, DistinctSpecificEnumerable<TRightItem, TDistinctInnerEnumerable, TDistinctInnerEnumerator>, DistinctSpecificEnumerator<TRightItem, TDistinctInnerEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static GroupJoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, DistinctSpecificEnumerable<TRightItem, TDistinctInnerEnumerable, TDistinctInnerEnumerator>, DistinctSpecificEnumerator<TRightItem, TDistinctInnerEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TDistinctInnerEnumerable, TDistinctInnerEnumerator>(this RangeEnumerable source, DistinctSpecificEnumerable<TRightItem, TDistinctInnerEnumerable, TDistinctInnerEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TDistinctInnerEnumerable : struct, IStructEnumerable<TRightItem, TDistinctInnerEnumerator>
//        where TDistinctInnerEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, DistinctSpecificEnumerable<TRightItem, TDistinctInnerEnumerable, TDistinctInnerEnumerator>, DistinctSpecificEnumerator<TRightItem, TDistinctInnerEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static GroupJoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, ExceptDefaultEnumerable<TRightItem, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>, ExceptDefaultEnumerator<TRightItem, TExceptFirstEnumerator, TExceptSecondEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>(this RangeEnumerable source, ExceptDefaultEnumerable<TRightItem, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector)
//        where TExceptFirstEnumerable : struct, IStructEnumerable<TRightItem, TExceptFirstEnumerator>
//        where TExceptFirstEnumerator : struct, IStructEnumerator<TRightItem>
//        where TExceptSecondEnumerable : struct, IStructEnumerable<TRightItem, TExceptSecondEnumerator>
//        where TExceptSecondEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, ExceptDefaultEnumerable<TRightItem, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>, ExceptDefaultEnumerator<TRightItem, TExceptFirstEnumerator, TExceptSecondEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static GroupJoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, ExceptDefaultEnumerable<TRightItem, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>, ExceptDefaultEnumerator<TRightItem, TExceptFirstEnumerator, TExceptSecondEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>(this RangeEnumerable source, ExceptDefaultEnumerable<TRightItem, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TExceptFirstEnumerable : struct, IStructEnumerable<TRightItem, TExceptFirstEnumerator>
//        where TExceptFirstEnumerator : struct, IStructEnumerator<TRightItem>
//        where TExceptSecondEnumerable : struct, IStructEnumerable<TRightItem, TExceptSecondEnumerator>
//        where TExceptSecondEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, ExceptDefaultEnumerable<TRightItem, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>, ExceptDefaultEnumerator<TRightItem, TExceptFirstEnumerator, TExceptSecondEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static GroupJoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, ExceptSpecificEnumerable<TRightItem, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>, ExceptSpecificEnumerator<TRightItem, TExceptFirstEnumerator, TExceptSecondEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>(this RangeEnumerable source, ExceptSpecificEnumerable<TRightItem, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector)
//        where TExceptFirstEnumerable : struct, IStructEnumerable<TRightItem, TExceptFirstEnumerator>
//        where TExceptFirstEnumerator : struct, IStructEnumerator<TRightItem>
//        where TExceptSecondEnumerable : struct, IStructEnumerable<TRightItem, TExceptSecondEnumerator>
//        where TExceptSecondEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, ExceptSpecificEnumerable<TRightItem, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>, ExceptSpecificEnumerator<TRightItem, TExceptFirstEnumerator, TExceptSecondEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static GroupJoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, ExceptSpecificEnumerable<TRightItem, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>, ExceptSpecificEnumerator<TRightItem, TExceptFirstEnumerator, TExceptSecondEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>(this RangeEnumerable source, ExceptSpecificEnumerable<TRightItem, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TExceptFirstEnumerable : struct, IStructEnumerable<TRightItem, TExceptFirstEnumerator>
//        where TExceptFirstEnumerator : struct, IStructEnumerator<TRightItem>
//        where TExceptSecondEnumerable : struct, IStructEnumerable<TRightItem, TExceptSecondEnumerator>
//        where TExceptSecondEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, ExceptSpecificEnumerable<TRightItem, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>, ExceptSpecificEnumerator<TRightItem, TExceptFirstEnumerator, TExceptSecondEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static GroupJoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, GroupJoinDefaultEnumerable<TRightItem, TGroupJoinKeyItem, TGroupJoinLeftItem, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRightItem, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator>, GroupJoinDefaultEnumerator<TRightItem, TGroupJoinKeyItem, TGroupJoinLeftItem, TGroupJoinLeftEnumerator, TGroupJoinRightItem, TGroupJoinRightEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TGroupJoinKeyItem, TGroupJoinLeftItem, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRightItem, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator>(this RangeEnumerable source, GroupJoinDefaultEnumerable<TRightItem, TGroupJoinKeyItem, TGroupJoinLeftItem, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRightItem, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector)
//        where TGroupJoinLeftEnumerable : struct, IStructEnumerable<TGroupJoinLeftItem, TGroupJoinLeftEnumerator>
//        where TGroupJoinLeftEnumerator : struct, IStructEnumerator<TGroupJoinLeftItem>
//        where TGroupJoinRightEnumerable : struct, IStructEnumerable<TGroupJoinRightItem, TGroupJoinRightEnumerator>
//        where TGroupJoinRightEnumerator : struct, IStructEnumerator<TGroupJoinRightItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, GroupJoinDefaultEnumerable<TRightItem, TGroupJoinKeyItem, TGroupJoinLeftItem, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRightItem, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator>, GroupJoinDefaultEnumerator<TRightItem, TGroupJoinKeyItem, TGroupJoinLeftItem, TGroupJoinLeftEnumerator, TGroupJoinRightItem, TGroupJoinRightEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static GroupJoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, GroupJoinDefaultEnumerable<TRightItem, TGroupJoinKeyItem, TGroupJoinLeftItem, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRightItem, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator>, GroupJoinDefaultEnumerator<TRightItem, TGroupJoinKeyItem, TGroupJoinLeftItem, TGroupJoinLeftEnumerator, TGroupJoinRightItem, TGroupJoinRightEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TGroupJoinKeyItem, TGroupJoinLeftItem, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRightItem, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator>(this RangeEnumerable source, GroupJoinDefaultEnumerable<TRightItem, TGroupJoinKeyItem, TGroupJoinLeftItem, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRightItem, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TGroupJoinLeftEnumerable : struct, IStructEnumerable<TGroupJoinLeftItem, TGroupJoinLeftEnumerator>
//        where TGroupJoinLeftEnumerator : struct, IStructEnumerator<TGroupJoinLeftItem>
//        where TGroupJoinRightEnumerable : struct, IStructEnumerable<TGroupJoinRightItem, TGroupJoinRightEnumerator>
//        where TGroupJoinRightEnumerator : struct, IStructEnumerator<TGroupJoinRightItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, GroupJoinDefaultEnumerable<TRightItem, TGroupJoinKeyItem, TGroupJoinLeftItem, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRightItem, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator>, GroupJoinDefaultEnumerator<TRightItem, TGroupJoinKeyItem, TGroupJoinLeftItem, TGroupJoinLeftEnumerator, TGroupJoinRightItem, TGroupJoinRightEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static GroupJoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, GroupJoinSpecificEnumerable<TRightItem, TGroupJoinKeyItem, TGroupJoinLeftItem, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRightItem, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator>, GroupJoinSpecificEnumerator<TRightItem, TGroupJoinKeyItem, TGroupJoinLeftItem, TGroupJoinLeftEnumerator, TGroupJoinRightItem, TGroupJoinRightEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TGroupJoinKeyItem, TGroupJoinLeftItem, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRightItem, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator>(this RangeEnumerable source, GroupJoinSpecificEnumerable<TRightItem, TGroupJoinKeyItem, TGroupJoinLeftItem, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRightItem, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector)
//        where TGroupJoinLeftEnumerable : struct, IStructEnumerable<TGroupJoinLeftItem, TGroupJoinLeftEnumerator>
//        where TGroupJoinLeftEnumerator : struct, IStructEnumerator<TGroupJoinLeftItem>
//        where TGroupJoinRightEnumerable : struct, IStructEnumerable<TGroupJoinRightItem, TGroupJoinRightEnumerator>
//        where TGroupJoinRightEnumerator : struct, IStructEnumerator<TGroupJoinRightItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, GroupJoinSpecificEnumerable<TRightItem, TGroupJoinKeyItem, TGroupJoinLeftItem, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRightItem, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator>, GroupJoinSpecificEnumerator<TRightItem, TGroupJoinKeyItem, TGroupJoinLeftItem, TGroupJoinLeftEnumerator, TGroupJoinRightItem, TGroupJoinRightEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static GroupJoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, GroupJoinSpecificEnumerable<TRightItem, TGroupJoinKeyItem, TGroupJoinLeftItem, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRightItem, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator>, GroupJoinSpecificEnumerator<TRightItem, TGroupJoinKeyItem, TGroupJoinLeftItem, TGroupJoinLeftEnumerator, TGroupJoinRightItem, TGroupJoinRightEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TGroupJoinKeyItem, TGroupJoinLeftItem, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRightItem, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator>(this RangeEnumerable source, GroupJoinSpecificEnumerable<TRightItem, TGroupJoinKeyItem, TGroupJoinLeftItem, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRightItem, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TGroupJoinLeftEnumerable : struct, IStructEnumerable<TGroupJoinLeftItem, TGroupJoinLeftEnumerator>
//        where TGroupJoinLeftEnumerator : struct, IStructEnumerator<TGroupJoinLeftItem>
//        where TGroupJoinRightEnumerable : struct, IStructEnumerable<TGroupJoinRightItem, TGroupJoinRightEnumerator>
//        where TGroupJoinRightEnumerator : struct, IStructEnumerator<TGroupJoinRightItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, GroupJoinSpecificEnumerable<TRightItem, TGroupJoinKeyItem, TGroupJoinLeftItem, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRightItem, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator>, GroupJoinSpecificEnumerator<TRightItem, TGroupJoinKeyItem, TGroupJoinLeftItem, TGroupJoinLeftEnumerator, TGroupJoinRightItem, TGroupJoinRightEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static GroupJoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, GroupedEnumerable<TGroupedKey, TRightItem>, GroupedEnumerator<TRightItem>> GroupJoin<TOutItem, TKeyItem, TRightItem, TGroupedKey>(this RangeEnumerable source, GroupedEnumerable<TGroupedKey, TRightItem> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector)
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, GroupedEnumerable<TGroupedKey, TRightItem>, GroupedEnumerator<TRightItem>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static GroupJoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, GroupedEnumerable<TGroupedKey, TRightItem>, GroupedEnumerator<TRightItem>> GroupJoin<TOutItem, TKeyItem, TRightItem, TGroupedKey>(this RangeEnumerable source, GroupedEnumerable<TGroupedKey, TRightItem> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, GroupedEnumerable<TGroupedKey, TRightItem>, GroupedEnumerator<TRightItem>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static GroupJoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, GroupingEnumerable<TGroupedKey, TRightItem>, GroupingEnumerator<TRightItem>> GroupJoin<TOutItem, TKeyItem, TRightItem, TGroupedKey>(this RangeEnumerable source, GroupingEnumerable<TGroupedKey, TRightItem> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector)
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, GroupingEnumerable<TGroupedKey, TRightItem>, GroupingEnumerator<TRightItem>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static GroupJoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, GroupingEnumerable<TGroupedKey, TRightItem>, GroupingEnumerator<TRightItem>> GroupJoin<TOutItem, TKeyItem, TRightItem, TGroupedKey>(this RangeEnumerable source, GroupingEnumerable<TGroupedKey, TRightItem> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, GroupingEnumerable<TGroupedKey, TRightItem>, GroupingEnumerator<TRightItem>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static GroupJoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, GroupByCollectionDefaultEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, TRightItem, TGroupByEnumerable, TGroupByEnumerator>, GroupByCollectionDefaultEnumerator<TGroupByInItem, TGroupByKey, TGroupByElement, TRightItem, TGroupByEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByEnumerable, TGroupByEnumerator>(this RangeEnumerable source, GroupByCollectionDefaultEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, TRightItem, TGroupByEnumerable, TGroupByEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector)
//        where TGroupByEnumerable : struct, IStructEnumerable<TGroupByInItem, TGroupByEnumerator>
//        where TGroupByEnumerator : struct, IStructEnumerator<TGroupByInItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, GroupByCollectionDefaultEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, TRightItem, TGroupByEnumerable, TGroupByEnumerator>, GroupByCollectionDefaultEnumerator<TGroupByInItem, TGroupByKey, TGroupByElement, TRightItem, TGroupByEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static GroupJoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, GroupByCollectionDefaultEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, TRightItem, TGroupByEnumerable, TGroupByEnumerator>, GroupByCollectionDefaultEnumerator<TGroupByInItem, TGroupByKey, TGroupByElement, TRightItem, TGroupByEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByEnumerable, TGroupByEnumerator>(this RangeEnumerable source, GroupByCollectionDefaultEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, TRightItem, TGroupByEnumerable, TGroupByEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TGroupByEnumerable : struct, IStructEnumerable<TGroupByInItem, TGroupByEnumerator>
//        where TGroupByEnumerator : struct, IStructEnumerator<TGroupByInItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, GroupByCollectionDefaultEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, TRightItem, TGroupByEnumerable, TGroupByEnumerator>, GroupByCollectionDefaultEnumerator<TGroupByInItem, TGroupByKey, TGroupByElement, TRightItem, TGroupByEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static GroupJoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, GroupByCollectionSpecificEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, TRightItem, TGroupByEnumerable, TGroupByEnumerator>, GroupByCollectionSpecificEnumerator<TGroupByInItem, TGroupByKey, TGroupByElement, TRightItem, TGroupByEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByEnumerable, TGroupByEnumerator>(this RangeEnumerable source, GroupByCollectionSpecificEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, TRightItem, TGroupByEnumerable, TGroupByEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector)
//        where TGroupByEnumerable : struct, IStructEnumerable<TGroupByInItem, TGroupByEnumerator>
//        where TGroupByEnumerator : struct, IStructEnumerator<TGroupByInItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, GroupByCollectionSpecificEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, TRightItem, TGroupByEnumerable, TGroupByEnumerator>, GroupByCollectionSpecificEnumerator<TGroupByInItem, TGroupByKey, TGroupByElement, TRightItem, TGroupByEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static GroupJoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, GroupByCollectionSpecificEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, TRightItem, TGroupByEnumerable, TGroupByEnumerator>, GroupByCollectionSpecificEnumerator<TGroupByInItem, TGroupByKey, TGroupByElement, TRightItem, TGroupByEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByEnumerable, TGroupByEnumerator>(this RangeEnumerable source, GroupByCollectionSpecificEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, TRightItem, TGroupByEnumerable, TGroupByEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TGroupByEnumerable : struct, IStructEnumerable<TGroupByInItem, TGroupByEnumerator>
//        where TGroupByEnumerator : struct, IStructEnumerator<TGroupByInItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, GroupByCollectionSpecificEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, TRightItem, TGroupByEnumerable, TGroupByEnumerator>, GroupByCollectionSpecificEnumerator<TGroupByInItem, TGroupByKey, TGroupByElement, TRightItem, TGroupByEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static GroupJoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IntersectDefaultEnumerable<TRightItem, TIntersectFirstEnumerable, TIntersectFirstEnumerator, TIntersectSecondEnumerable, TIntersectSecondEnumerator>, IntersectDefaultEnumerator<TRightItem, TIntersectFirstEnumerator, TIntersectSecondEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TIntersectFirstEnumerable, TIntersectFirstEnumerator, TIntersectSecondEnumerable, TIntersectSecondEnumerator>(this RangeEnumerable source, IntersectDefaultEnumerable<TRightItem, TIntersectFirstEnumerable, TIntersectFirstEnumerator, TIntersectSecondEnumerable, TIntersectSecondEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector)
//        where TIntersectFirstEnumerable : struct, IStructEnumerable<TRightItem, TIntersectFirstEnumerator>
//        where TIntersectFirstEnumerator : struct, IStructEnumerator<TRightItem>
//        where TIntersectSecondEnumerable : struct, IStructEnumerable<TRightItem, TIntersectSecondEnumerator>
//        where TIntersectSecondEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IntersectDefaultEnumerable<TRightItem, TIntersectFirstEnumerable, TIntersectFirstEnumerator, TIntersectSecondEnumerable, TIntersectSecondEnumerator>, IntersectDefaultEnumerator<TRightItem, TIntersectFirstEnumerator, TIntersectSecondEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static GroupJoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IntersectDefaultEnumerable<TRightItem, TIntersectFirstEnumerable, TIntersectFirstEnumerator, TIntersectSecondEnumerable, TIntersectSecondEnumerator>, IntersectDefaultEnumerator<TRightItem, TIntersectFirstEnumerator, TIntersectSecondEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TIntersectFirstEnumerable, TIntersectFirstEnumerator, TIntersectSecondEnumerable, TIntersectSecondEnumerator>(this RangeEnumerable source, IntersectDefaultEnumerable<TRightItem, TIntersectFirstEnumerable, TIntersectFirstEnumerator, TIntersectSecondEnumerable, TIntersectSecondEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TIntersectFirstEnumerable : struct, IStructEnumerable<TRightItem, TIntersectFirstEnumerator>
//        where TIntersectFirstEnumerator : struct, IStructEnumerator<TRightItem>
//        where TIntersectSecondEnumerable : struct, IStructEnumerable<TRightItem, TIntersectSecondEnumerator>
//        where TIntersectSecondEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IntersectDefaultEnumerable<TRightItem, TIntersectFirstEnumerable, TIntersectFirstEnumerator, TIntersectSecondEnumerable, TIntersectSecondEnumerator>, IntersectDefaultEnumerator<TRightItem, TIntersectFirstEnumerator, TIntersectSecondEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static GroupJoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IntersectSpecificEnumerable<TRightItem, TIntersectFirstEnumerable, TIntersectFirstEnumerator, TIntersectSecondEnumerable, TIntersectSecondEnumerator>, IntersectSpecificEnumerator<TRightItem, TIntersectFirstEnumerator, TIntersectSecondEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TIntersectFirstEnumerable, TIntersectFirstEnumerator, TIntersectSecondEnumerable, TIntersectSecondEnumerator>(this RangeEnumerable source, IntersectSpecificEnumerable<TRightItem, TIntersectFirstEnumerable, TIntersectFirstEnumerator, TIntersectSecondEnumerable, TIntersectSecondEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector)
//        where TIntersectFirstEnumerable : struct, IStructEnumerable<TRightItem, TIntersectFirstEnumerator>
//        where TIntersectFirstEnumerator : struct, IStructEnumerator<TRightItem>
//        where TIntersectSecondEnumerable : struct, IStructEnumerable<TRightItem, TIntersectSecondEnumerator>
//        where TIntersectSecondEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IntersectSpecificEnumerable<TRightItem, TIntersectFirstEnumerable, TIntersectFirstEnumerator, TIntersectSecondEnumerable, TIntersectSecondEnumerator>, IntersectSpecificEnumerator<TRightItem, TIntersectFirstEnumerator, TIntersectSecondEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static GroupJoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IntersectSpecificEnumerable<TRightItem, TIntersectFirstEnumerable, TIntersectFirstEnumerator, TIntersectSecondEnumerable, TIntersectSecondEnumerator>, IntersectSpecificEnumerator<TRightItem, TIntersectFirstEnumerator, TIntersectSecondEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TIntersectFirstEnumerable, TIntersectFirstEnumerator, TIntersectSecondEnumerable, TIntersectSecondEnumerator>(this RangeEnumerable source, IntersectSpecificEnumerable<TRightItem, TIntersectFirstEnumerable, TIntersectFirstEnumerator, TIntersectSecondEnumerable, TIntersectSecondEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TIntersectFirstEnumerable : struct, IStructEnumerable<TRightItem, TIntersectFirstEnumerator>
//        where TIntersectFirstEnumerator : struct, IStructEnumerator<TRightItem>
//        where TIntersectSecondEnumerable : struct, IStructEnumerable<TRightItem, TIntersectSecondEnumerator>
//        where TIntersectSecondEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IntersectSpecificEnumerable<TRightItem, TIntersectFirstEnumerable, TIntersectFirstEnumerator, TIntersectSecondEnumerable, TIntersectSecondEnumerator>, IntersectSpecificEnumerator<TRightItem, TIntersectFirstEnumerator, TIntersectSecondEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static GroupJoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, TRightItem[], ArrayBridger<TRightItem>, ArrayEnumerator<TRightItem>>, ArrayEnumerator<TRightItem>> GroupJoin<TOutItem, TKeyItem, TRightItem>(this RangeEnumerable source, TRightItem[] inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(inner, nameof(inner));
//            if (outerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(outerKeySelector));
//            if (innerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(innerKeySelector));
//            if (resultSelector == null) throw CommonImplementation.ArgumentNull(nameof(resultSelector));

//            return CommonImplementation.GroupJoinImpl<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, TRightItem[], ArrayBridger<TRightItem>, ArrayEnumerator<TRightItem>>, ArrayEnumerator<TRightItem>>(ref source, ref bridge, outerKeySelector, innerKeySelector, resultSelector);
//        }

//        public static GroupJoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, TRightItem[], ArrayBridger<TRightItem>, ArrayEnumerator<TRightItem>>, ArrayEnumerator<TRightItem>> GroupJoin<TOutItem, TKeyItem, TRightItem>(this RangeEnumerable source, TRightItem[] inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(inner, nameof(inner));
//            if (outerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(outerKeySelector));
//            if (innerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(innerKeySelector));
//            if (resultSelector == null) throw CommonImplementation.ArgumentNull(nameof(resultSelector));

//            return CommonImplementation.GroupJoinImpl<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, TRightItem[], ArrayBridger<TRightItem>, ArrayEnumerator<TRightItem>>, ArrayEnumerator<TRightItem>>(ref source, ref bridge, outerKeySelector, innerKeySelector, resultSelector, comparer);
//        }

//        public static GroupJoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, Dictionary<TRightItem, TDictionaryValue>.KeyCollection, DictionaryKeysBridger<TRightItem, TDictionaryValue>, DictionaryKeysEnumerator<TRightItem, TDictionaryValue>>, DictionaryKeysEnumerator<TRightItem, TDictionaryValue>> GroupJoin<TOutItem, TKeyItem, TRightItem, TDictionaryValue>(this RangeEnumerable source, Dictionary<TRightItem, TDictionaryValue>.KeyCollection inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(inner, nameof(inner));
//            if (outerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(outerKeySelector));
//            if (innerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(innerKeySelector));
//            if (resultSelector == null) throw CommonImplementation.ArgumentNull(nameof(resultSelector));

//            return CommonImplementation.GroupJoinImpl<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, Dictionary<TRightItem, TDictionaryValue>.KeyCollection, DictionaryKeysBridger<TRightItem, TDictionaryValue>, DictionaryKeysEnumerator<TRightItem, TDictionaryValue>>, DictionaryKeysEnumerator<TRightItem, TDictionaryValue>>(ref source, ref bridge, outerKeySelector, innerKeySelector, resultSelector);
//        }

//        public static GroupJoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, Dictionary<TRightItem, TDictionaryValue>.KeyCollection, DictionaryKeysBridger<TRightItem, TDictionaryValue>, DictionaryKeysEnumerator<TRightItem, TDictionaryValue>>, DictionaryKeysEnumerator<TRightItem, TDictionaryValue>> GroupJoin<TOutItem, TKeyItem, TRightItem, TDictionaryValue>(this RangeEnumerable source, Dictionary<TRightItem, TDictionaryValue>.KeyCollection inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(inner, nameof(inner));
//            if (outerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(outerKeySelector));
//            if (innerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(innerKeySelector));
//            if (resultSelector == null) throw CommonImplementation.ArgumentNull(nameof(resultSelector));

//            return CommonImplementation.GroupJoinImpl<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, Dictionary<TRightItem, TDictionaryValue>.KeyCollection, DictionaryKeysBridger<TRightItem, TDictionaryValue>, DictionaryKeysEnumerator<TRightItem, TDictionaryValue>>, DictionaryKeysEnumerator<TRightItem, TDictionaryValue>>(ref source, ref bridge, outerKeySelector, innerKeySelector, resultSelector, comparer);
//        }

//        public static GroupJoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, Dictionary<TDictionaryKey, TRightItem>.ValueCollection, DictionaryValuesBridger<TDictionaryKey, TRightItem>, DictionaryValuesEnumerator<TDictionaryKey, TRightItem>>, DictionaryValuesEnumerator<TDictionaryKey, TRightItem>> GroupJoin<TOutItem, TKeyItem, TRightItem, TDictionaryKey>(this RangeEnumerable source, Dictionary<TDictionaryKey, TRightItem>.ValueCollection inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(inner, nameof(inner));
//            if (outerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(outerKeySelector));
//            if (innerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(innerKeySelector));
//            if (resultSelector == null) throw CommonImplementation.ArgumentNull(nameof(resultSelector));

//            return CommonImplementation.GroupJoinImpl<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, Dictionary<TDictionaryKey, TRightItem>.ValueCollection, DictionaryValuesBridger<TDictionaryKey, TRightItem>, DictionaryValuesEnumerator<TDictionaryKey, TRightItem>>, DictionaryValuesEnumerator<TDictionaryKey, TRightItem>>(ref source, ref bridge, outerKeySelector, innerKeySelector, resultSelector);
//        }

//        public static GroupJoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, Dictionary<TDictionaryKey, TRightItem>.ValueCollection, DictionaryValuesBridger<TDictionaryKey, TRightItem>, DictionaryValuesEnumerator<TDictionaryKey, TRightItem>>, DictionaryValuesEnumerator<TDictionaryKey, TRightItem>> GroupJoin<TOutItem, TKeyItem, TRightItem, TDictionaryKey>(this RangeEnumerable source, Dictionary<TDictionaryKey, TRightItem>.ValueCollection inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(inner, nameof(inner));
//            if (outerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(outerKeySelector));
//            if (innerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(innerKeySelector));
//            if (resultSelector == null) throw CommonImplementation.ArgumentNull(nameof(resultSelector));

//            return CommonImplementation.GroupJoinImpl<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, Dictionary<TDictionaryKey, TRightItem>.ValueCollection, DictionaryValuesBridger<TDictionaryKey, TRightItem>, DictionaryValuesEnumerator<TDictionaryKey, TRightItem>>, DictionaryValuesEnumerator<TDictionaryKey, TRightItem>>(ref source, ref bridge, outerKeySelector, innerKeySelector, resultSelector, comparer);
//        }

//        public static GroupJoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, IEnumerable<TRightItem>, IEnumerableBridger<TRightItem>, IdentityEnumerator<TRightItem>>, IdentityEnumerator<TRightItem>> GroupJoin<TOutItem, TKeyItem, TRightItem>(this RangeEnumerable source, IEnumerable<TRightItem> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(inner, nameof(inner));
//            if (outerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(outerKeySelector));
//            if (innerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(innerKeySelector));
//            if (resultSelector == null) throw CommonImplementation.ArgumentNull(nameof(resultSelector));

//            return CommonImplementation.GroupJoinImpl<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, IEnumerable<TRightItem>, IEnumerableBridger<TRightItem>, IdentityEnumerator<TRightItem>>, IdentityEnumerator<TRightItem>>(ref source, ref bridge, outerKeySelector, innerKeySelector, resultSelector);
//        }

//        public static GroupJoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, IEnumerable<TRightItem>, IEnumerableBridger<TRightItem>, IdentityEnumerator<TRightItem>>, IdentityEnumerator<TRightItem>> GroupJoin<TOutItem, TKeyItem, TRightItem>(this RangeEnumerable source, IEnumerable<TRightItem> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(inner, nameof(inner));
//            if (outerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(outerKeySelector));
//            if (innerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(innerKeySelector));
//            if (resultSelector == null) throw CommonImplementation.ArgumentNull(nameof(resultSelector));

//            return CommonImplementation.GroupJoinImpl<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, IEnumerable<TRightItem>, IEnumerableBridger<TRightItem>, IdentityEnumerator<TRightItem>>, IdentityEnumerator<TRightItem>>(ref source, ref bridge, outerKeySelector, innerKeySelector, resultSelector, comparer);
//        }

//        public static GroupJoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, object, IdentityEnumerable<object, IEnumerable, IEnumerableBridger, IdentityEnumerator>, IdentityEnumerator> GroupJoin<TOutItem, TKeyItem>(this RangeEnumerable source, IEnumerable inner, Func<int, TKeyItem> outerKeySelector, Func<object, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, object>, TOutItem> resultSelector)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(inner, nameof(inner));
//            if (outerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(outerKeySelector));
//            if (innerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(innerKeySelector));
//            if (resultSelector == null) throw CommonImplementation.ArgumentNull(nameof(resultSelector));

//            return CommonImplementation.GroupJoinImpl<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, object, IdentityEnumerable<object, IEnumerable, IEnumerableBridger, IdentityEnumerator>, IdentityEnumerator>(ref source, ref bridge, outerKeySelector, innerKeySelector, resultSelector);
//        }

//        public static GroupJoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, object, IdentityEnumerable<object, IEnumerable, IEnumerableBridger, IdentityEnumerator>, IdentityEnumerator> GroupJoin<TOutItem, TKeyItem>(this RangeEnumerable source, IEnumerable inner, Func<int, TKeyItem> outerKeySelector, Func<object, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, object>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(inner, nameof(inner));
//            if (outerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(outerKeySelector));
//            if (innerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(innerKeySelector));
//            if (resultSelector == null) throw CommonImplementation.ArgumentNull(nameof(resultSelector));

//            return CommonImplementation.GroupJoinImpl<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, object, IdentityEnumerable<object, IEnumerable, IEnumerableBridger, IdentityEnumerator>, IdentityEnumerator>(ref source, ref bridge, outerKeySelector, innerKeySelector, resultSelector, comparer);
//        }

//        public static GroupJoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, LinkedList<TRightItem>, LinkedListBridger<TRightItem>, LinkedListEnumerator<TRightItem>>, LinkedListEnumerator<TRightItem>> GroupJoin<TOutItem, TKeyItem, TRightItem>(this RangeEnumerable source, LinkedList<TRightItem> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(inner, nameof(inner));
//            if (outerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(outerKeySelector));
//            if (innerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(innerKeySelector));
//            if (resultSelector == null) throw CommonImplementation.ArgumentNull(nameof(resultSelector));

//            return CommonImplementation.GroupJoinImpl<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, LinkedList<TRightItem>, LinkedListBridger<TRightItem>, LinkedListEnumerator<TRightItem>>, LinkedListEnumerator<TRightItem>>(ref source, ref bridge, outerKeySelector, innerKeySelector, resultSelector);
//        }

//        public static GroupJoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, LinkedList<TRightItem>, LinkedListBridger<TRightItem>, LinkedListEnumerator<TRightItem>>, LinkedListEnumerator<TRightItem>> GroupJoin<TOutItem, TKeyItem, TRightItem>(this RangeEnumerable source, LinkedList<TRightItem> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(inner, nameof(inner));
//            if (outerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(outerKeySelector));
//            if (innerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(innerKeySelector));
//            if (resultSelector == null) throw CommonImplementation.ArgumentNull(nameof(resultSelector));

//            return CommonImplementation.GroupJoinImpl<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, LinkedList<TRightItem>, LinkedListBridger<TRightItem>, LinkedListEnumerator<TRightItem>>, LinkedListEnumerator<TRightItem>>(ref source, ref bridge, outerKeySelector, innerKeySelector, resultSelector, comparer);
//        }

//        public static GroupJoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, List<TRightItem>, ListBridger<TRightItem>, ListEnumerator<TRightItem>>, ListEnumerator<TRightItem>> GroupJoin<TOutItem, TKeyItem, TRightItem>(this RangeEnumerable source, List<TRightItem> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(inner, nameof(inner));
//            if (outerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(outerKeySelector));
//            if (innerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(innerKeySelector));
//            if (resultSelector == null) throw CommonImplementation.ArgumentNull(nameof(resultSelector));

//            return CommonImplementation.GroupJoinImpl<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, List<TRightItem>, ListBridger<TRightItem>, ListEnumerator<TRightItem>>, ListEnumerator<TRightItem>>(ref source, ref bridge, outerKeySelector, innerKeySelector, resultSelector);
//        }

//        public static GroupJoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, List<TRightItem>, ListBridger<TRightItem>, ListEnumerator<TRightItem>>, ListEnumerator<TRightItem>> GroupJoin<TOutItem, TKeyItem, TRightItem>(this RangeEnumerable source, List<TRightItem> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(inner, nameof(inner));
//            if (outerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(outerKeySelector));
//            if (innerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(innerKeySelector));
//            if (resultSelector == null) throw CommonImplementation.ArgumentNull(nameof(resultSelector));

//            return CommonImplementation.GroupJoinImpl<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, List<TRightItem>, ListBridger<TRightItem>, ListEnumerator<TRightItem>>, ListEnumerator<TRightItem>>(ref source, ref bridge, outerKeySelector, innerKeySelector, resultSelector, comparer);
//        }

//        public static GroupJoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, Queue<TRightItem>, QueueBridger<TRightItem>, QueueEnumerator<TRightItem>>, QueueEnumerator<TRightItem>> GroupJoin<TOutItem, TKeyItem, TRightItem>(this RangeEnumerable source, Queue<TRightItem> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(inner, nameof(inner));
//            if (outerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(outerKeySelector));
//            if (innerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(innerKeySelector));
//            if (resultSelector == null) throw CommonImplementation.ArgumentNull(nameof(resultSelector));

//            return CommonImplementation.GroupJoinImpl<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, Queue<TRightItem>, QueueBridger<TRightItem>, QueueEnumerator<TRightItem>>, QueueEnumerator<TRightItem>>(ref source, ref bridge, outerKeySelector, innerKeySelector, resultSelector);
//        }

//        public static GroupJoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, Queue<TRightItem>, QueueBridger<TRightItem>, QueueEnumerator<TRightItem>>, QueueEnumerator<TRightItem>> GroupJoin<TOutItem, TKeyItem, TRightItem>(this RangeEnumerable source, Queue<TRightItem> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(inner, nameof(inner));
//            if (outerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(outerKeySelector));
//            if (innerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(innerKeySelector));
//            if (resultSelector == null) throw CommonImplementation.ArgumentNull(nameof(resultSelector));

//            return CommonImplementation.GroupJoinImpl<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, Queue<TRightItem>, QueueBridger<TRightItem>, QueueEnumerator<TRightItem>>, QueueEnumerator<TRightItem>>(ref source, ref bridge, outerKeySelector, innerKeySelector, resultSelector, comparer);
//        }

//        public static GroupJoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, SortedDictionary<TRightItem, TDictionaryValue>.KeyCollection, SortedDictionaryKeysBridger<TRightItem, TDictionaryValue>, SortedDictionaryKeysEnumerator<TRightItem, TDictionaryValue>>, SortedDictionaryKeysEnumerator<TRightItem, TDictionaryValue>> GroupJoin<TOutItem, TKeyItem, TRightItem, TDictionaryValue>(this RangeEnumerable source, SortedDictionary<TRightItem, TDictionaryValue>.KeyCollection inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(inner, nameof(inner));
//            if (outerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(outerKeySelector));
//            if (innerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(innerKeySelector));
//            if (resultSelector == null) throw CommonImplementation.ArgumentNull(nameof(resultSelector));

//            return CommonImplementation.GroupJoinImpl<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, SortedDictionary<TRightItem, TDictionaryValue>.KeyCollection, SortedDictionaryKeysBridger<TRightItem, TDictionaryValue>, SortedDictionaryKeysEnumerator<TRightItem, TDictionaryValue>>, SortedDictionaryKeysEnumerator<TRightItem, TDictionaryValue>>(ref source, ref bridge, outerKeySelector, innerKeySelector, resultSelector);
//        }

//        public static GroupJoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, SortedDictionary<TRightItem, TDictionaryValue>.KeyCollection, SortedDictionaryKeysBridger<TRightItem, TDictionaryValue>, SortedDictionaryKeysEnumerator<TRightItem, TDictionaryValue>>, SortedDictionaryKeysEnumerator<TRightItem, TDictionaryValue>> GroupJoin<TOutItem, TKeyItem, TRightItem, TDictionaryValue>(this RangeEnumerable source, SortedDictionary<TRightItem, TDictionaryValue>.KeyCollection inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(inner, nameof(inner));
//            if (outerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(outerKeySelector));
//            if (innerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(innerKeySelector));
//            if (resultSelector == null) throw CommonImplementation.ArgumentNull(nameof(resultSelector));

//            return CommonImplementation.GroupJoinImpl<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, SortedDictionary<TRightItem, TDictionaryValue>.KeyCollection, SortedDictionaryKeysBridger<TRightItem, TDictionaryValue>, SortedDictionaryKeysEnumerator<TRightItem, TDictionaryValue>>, SortedDictionaryKeysEnumerator<TRightItem, TDictionaryValue>>(ref source, ref bridge, outerKeySelector, innerKeySelector, resultSelector, comparer);
//        }

//        public static GroupJoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, SortedDictionary<TDictionaryKey, TRightItem>.ValueCollection, SortedDictionaryValuesBridger<TDictionaryKey, TRightItem>, SortedDictionaryValuesEnumerator<TDictionaryKey, TRightItem>>, SortedDictionaryValuesEnumerator<TDictionaryKey, TRightItem>> GroupJoin<TOutItem, TKeyItem, TRightItem, TDictionaryKey>(this RangeEnumerable source, SortedDictionary<TDictionaryKey, TRightItem>.ValueCollection inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(inner, nameof(inner));
//            if (outerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(outerKeySelector));
//            if (innerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(innerKeySelector));
//            if (resultSelector == null) throw CommonImplementation.ArgumentNull(nameof(resultSelector));

//            return CommonImplementation.GroupJoinImpl<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, SortedDictionary<TDictionaryKey, TRightItem>.ValueCollection, SortedDictionaryValuesBridger<TDictionaryKey, TRightItem>, SortedDictionaryValuesEnumerator<TDictionaryKey, TRightItem>>, SortedDictionaryValuesEnumerator<TDictionaryKey, TRightItem>>(ref source, ref bridge, outerKeySelector, innerKeySelector, resultSelector);
//        }

//        public static GroupJoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, SortedDictionary<TDictionaryKey, TRightItem>.ValueCollection, SortedDictionaryValuesBridger<TDictionaryKey, TRightItem>, SortedDictionaryValuesEnumerator<TDictionaryKey, TRightItem>>, SortedDictionaryValuesEnumerator<TDictionaryKey, TRightItem>> GroupJoin<TOutItem, TKeyItem, TRightItem, TDictionaryKey>(this RangeEnumerable source, SortedDictionary<TDictionaryKey, TRightItem>.ValueCollection inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(inner, nameof(inner));
//            if (outerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(outerKeySelector));
//            if (innerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(innerKeySelector));
//            if (resultSelector == null) throw CommonImplementation.ArgumentNull(nameof(resultSelector));

//            return CommonImplementation.GroupJoinImpl<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, SortedDictionary<TDictionaryKey, TRightItem>.ValueCollection, SortedDictionaryValuesBridger<TDictionaryKey, TRightItem>, SortedDictionaryValuesEnumerator<TDictionaryKey, TRightItem>>, SortedDictionaryValuesEnumerator<TDictionaryKey, TRightItem>>(ref source, ref bridge, outerKeySelector, innerKeySelector, resultSelector, comparer);
//        }

//        public static GroupJoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, SortedSet<TRightItem>, SortedSetBridger<TRightItem>, SortedSetEnumerator<TRightItem>>, SortedSetEnumerator<TRightItem>> GroupJoin<TOutItem, TKeyItem, TRightItem>(this RangeEnumerable source, SortedSet<TRightItem> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(inner, nameof(inner));
//            if (outerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(outerKeySelector));
//            if (innerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(innerKeySelector));
//            if (resultSelector == null) throw CommonImplementation.ArgumentNull(nameof(resultSelector));

//            return CommonImplementation.GroupJoinImpl<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, SortedSet<TRightItem>, SortedSetBridger<TRightItem>, SortedSetEnumerator<TRightItem>>, SortedSetEnumerator<TRightItem>>(ref source, ref bridge, outerKeySelector, innerKeySelector, resultSelector);
//        }

//        public static GroupJoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, SortedSet<TRightItem>, SortedSetBridger<TRightItem>, SortedSetEnumerator<TRightItem>>, SortedSetEnumerator<TRightItem>> GroupJoin<TOutItem, TKeyItem, TRightItem>(this RangeEnumerable source, SortedSet<TRightItem> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(inner, nameof(inner));
//            if (outerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(outerKeySelector));
//            if (innerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(innerKeySelector));
//            if (resultSelector == null) throw CommonImplementation.ArgumentNull(nameof(resultSelector));

//            return CommonImplementation.GroupJoinImpl<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, SortedSet<TRightItem>, SortedSetBridger<TRightItem>, SortedSetEnumerator<TRightItem>>, SortedSetEnumerator<TRightItem>>(ref source, ref bridge, outerKeySelector, innerKeySelector, resultSelector, comparer);
//        }

//        public static GroupJoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, Stack<TRightItem>, StackBridger<TRightItem>, StackEnumerator<TRightItem>>, StackEnumerator<TRightItem>> GroupJoin<TOutItem, TKeyItem, TRightItem>(this RangeEnumerable source, Stack<TRightItem> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(inner, nameof(inner));
//            if (outerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(outerKeySelector));
//            if (innerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(innerKeySelector));
//            if (resultSelector == null) throw CommonImplementation.ArgumentNull(nameof(resultSelector));

//            return CommonImplementation.GroupJoinImpl<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, Stack<TRightItem>, StackBridger<TRightItem>, StackEnumerator<TRightItem>>, StackEnumerator<TRightItem>>(ref source, ref bridge, outerKeySelector, innerKeySelector, resultSelector);
//        }

//        public static GroupJoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, Stack<TRightItem>, StackBridger<TRightItem>, StackEnumerator<TRightItem>>, StackEnumerator<TRightItem>> GroupJoin<TOutItem, TKeyItem, TRightItem>(this RangeEnumerable source, Stack<TRightItem> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(inner, nameof(inner));
//            if (outerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(outerKeySelector));
//            if (innerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(innerKeySelector));
//            if (resultSelector == null) throw CommonImplementation.ArgumentNull(nameof(resultSelector));

//            return CommonImplementation.GroupJoinImpl<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, Stack<TRightItem>, StackBridger<TRightItem>, StackEnumerator<TRightItem>>, StackEnumerator<TRightItem>>(ref source, ref bridge, outerKeySelector, innerKeySelector, resultSelector, comparer);
//        }

//        public static GroupJoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, JoinDefaultEnumerable<TRightItem, TJoinKeyItem, TJoinLeftItem, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRightItem, TJoinRightEnumerable, TJoinRightEnumerator>, JoinDefaultEnumerator<TRightItem, TJoinKeyItem, TJoinLeftItem, TJoinLeftEnumerator, TJoinRightItem, TJoinRightEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TJoinKeyItem, TJoinLeftItem, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRightItem, TJoinRightEnumerable, TJoinRightEnumerator>(this RangeEnumerable source, JoinDefaultEnumerable<TRightItem, TJoinKeyItem, TJoinLeftItem, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRightItem, TJoinRightEnumerable, TJoinRightEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector)
//        where TJoinLeftEnumerable : struct, IStructEnumerable<TJoinLeftItem, TJoinLeftEnumerator>
//        where TJoinLeftEnumerator : struct, IStructEnumerator<TJoinLeftItem>
//        where TJoinRightEnumerable : struct, IStructEnumerable<TJoinRightItem, TJoinRightEnumerator>
//        where TJoinRightEnumerator : struct, IStructEnumerator<TJoinRightItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, JoinDefaultEnumerable<TRightItem, TJoinKeyItem, TJoinLeftItem, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRightItem, TJoinRightEnumerable, TJoinRightEnumerator>, JoinDefaultEnumerator<TRightItem, TJoinKeyItem, TJoinLeftItem, TJoinLeftEnumerator, TJoinRightItem, TJoinRightEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static GroupJoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, JoinDefaultEnumerable<TRightItem, TJoinKeyItem, TJoinLeftItem, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRightItem, TJoinRightEnumerable, TJoinRightEnumerator>, JoinDefaultEnumerator<TRightItem, TJoinKeyItem, TJoinLeftItem, TJoinLeftEnumerator, TJoinRightItem, TJoinRightEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TJoinKeyItem, TJoinLeftItem, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRightItem, TJoinRightEnumerable, TJoinRightEnumerator>(this RangeEnumerable source, JoinDefaultEnumerable<TRightItem, TJoinKeyItem, TJoinLeftItem, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRightItem, TJoinRightEnumerable, TJoinRightEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TJoinLeftEnumerable : struct, IStructEnumerable<TJoinLeftItem, TJoinLeftEnumerator>
//        where TJoinLeftEnumerator : struct, IStructEnumerator<TJoinLeftItem>
//        where TJoinRightEnumerable : struct, IStructEnumerable<TJoinRightItem, TJoinRightEnumerator>
//        where TJoinRightEnumerator : struct, IStructEnumerator<TJoinRightItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, JoinDefaultEnumerable<TRightItem, TJoinKeyItem, TJoinLeftItem, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRightItem, TJoinRightEnumerable, TJoinRightEnumerator>, JoinDefaultEnumerator<TRightItem, TJoinKeyItem, TJoinLeftItem, TJoinLeftEnumerator, TJoinRightItem, TJoinRightEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static GroupJoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, JoinSpecificEnumerable<TRightItem, TJoinKeyItem, TJoinLeftItem, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRightItem, TJoinRightEnumerable, TJoinRightEnumerator>, JoinSpecificEnumerator<TRightItem, TJoinKeyItem, TJoinLeftItem, TJoinLeftEnumerator, TJoinRightItem, TJoinRightEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TJoinKeyItem, TJoinLeftItem, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRightItem, TJoinRightEnumerable, TJoinRightEnumerator>(this RangeEnumerable source, JoinSpecificEnumerable<TRightItem, TJoinKeyItem, TJoinLeftItem, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRightItem, TJoinRightEnumerable, TJoinRightEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector)
//        where TJoinLeftEnumerable : struct, IStructEnumerable<TJoinLeftItem, TJoinLeftEnumerator>
//        where TJoinLeftEnumerator : struct, IStructEnumerator<TJoinLeftItem>
//        where TJoinRightEnumerable : struct, IStructEnumerable<TJoinRightItem, TJoinRightEnumerator>
//        where TJoinRightEnumerator : struct, IStructEnumerator<TJoinRightItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, JoinSpecificEnumerable<TRightItem, TJoinKeyItem, TJoinLeftItem, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRightItem, TJoinRightEnumerable, TJoinRightEnumerator>, JoinSpecificEnumerator<TRightItem, TJoinKeyItem, TJoinLeftItem, TJoinLeftEnumerator, TJoinRightItem, TJoinRightEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static GroupJoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, JoinSpecificEnumerable<TRightItem, TJoinKeyItem, TJoinLeftItem, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRightItem, TJoinRightEnumerable, TJoinRightEnumerator>, JoinSpecificEnumerator<TRightItem, TJoinKeyItem, TJoinLeftItem, TJoinLeftEnumerator, TJoinRightItem, TJoinRightEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TJoinKeyItem, TJoinLeftItem, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRightItem, TJoinRightEnumerable, TJoinRightEnumerator>(this RangeEnumerable source, JoinSpecificEnumerable<TRightItem, TJoinKeyItem, TJoinLeftItem, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRightItem, TJoinRightEnumerable, TJoinRightEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TJoinLeftEnumerable : struct, IStructEnumerable<TJoinLeftItem, TJoinLeftEnumerator>
//        where TJoinLeftEnumerator : struct, IStructEnumerator<TJoinLeftItem>
//        where TJoinRightEnumerable : struct, IStructEnumerable<TJoinRightItem, TJoinRightEnumerator>
//        where TJoinRightEnumerator : struct, IStructEnumerator<TJoinRightItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, JoinSpecificEnumerable<TRightItem, TJoinKeyItem, TJoinLeftItem, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRightItem, TJoinRightEnumerable, TJoinRightEnumerator>, JoinSpecificEnumerator<TRightItem, TJoinKeyItem, TJoinLeftItem, TJoinLeftEnumerator, TJoinRightItem, TJoinRightEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static GroupJoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, OfTypeEnumerable<TOfTypeInItem, TRightItem, TOfTypeInnerEnumerable, TOfTypeInnerEnumerator>, OfTypeEnumerator<TOfTypeInItem, TRightItem, TOfTypeInnerEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TOfTypeInItem, TOfTypeInnerEnumerable, TOfTypeInnerEnumerator>(this RangeEnumerable source, OfTypeEnumerable<TOfTypeInItem, TRightItem, TOfTypeInnerEnumerable, TOfTypeInnerEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector)
//        where TOfTypeInnerEnumerable : struct, IStructEnumerable<TOfTypeInItem, TOfTypeInnerEnumerator>
//        where TOfTypeInnerEnumerator : struct, IStructEnumerator<TOfTypeInItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, OfTypeEnumerable<TOfTypeInItem, TRightItem, TOfTypeInnerEnumerable, TOfTypeInnerEnumerator>, OfTypeEnumerator<TOfTypeInItem, TRightItem, TOfTypeInnerEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static GroupJoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, OfTypeEnumerable<TOfTypeInItem, TRightItem, TOfTypeInnerEnumerable, TOfTypeInnerEnumerator>, OfTypeEnumerator<TOfTypeInItem, TRightItem, TOfTypeInnerEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TOfTypeInItem, TOfTypeInnerEnumerable, TOfTypeInnerEnumerator>(this RangeEnumerable source, OfTypeEnumerable<TOfTypeInItem, TRightItem, TOfTypeInnerEnumerable, TOfTypeInnerEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TOfTypeInnerEnumerable : struct, IStructEnumerable<TOfTypeInItem, TOfTypeInnerEnumerator>
//        where TOfTypeInnerEnumerator : struct, IStructEnumerator<TOfTypeInItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, OfTypeEnumerable<TOfTypeInItem, TRightItem, TOfTypeInnerEnumerable, TOfTypeInnerEnumerator>, OfTypeEnumerator<TOfTypeInItem, TRightItem, TOfTypeInnerEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static GroupJoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, OrderByEnumerable<TRightItem, TOrderByKey, TOrderByInnerEnumerable, TOrderByInnerEnumerator, TOrderByComparer>, OrderByEnumerator<TRightItem, TOrderByKey, TOrderByInnerEnumerator, TOrderByComparer>> GroupJoin<TOutItem, TKeyItem, TRightItem, TOrderByKey, TOrderByInnerEnumerable, TOrderByInnerEnumerator, TOrderByComparer>(this RangeEnumerable source, OrderByEnumerable<TRightItem, TOrderByKey, TOrderByInnerEnumerable, TOrderByInnerEnumerator, TOrderByComparer> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector)
//        where TOrderByInnerEnumerable : struct, IStructEnumerable<TRightItem, TOrderByInnerEnumerator>
//        where TOrderByInnerEnumerator : struct, IStructEnumerator<TRightItem>
//        where TOrderByComparer : struct, IStructComparer<TRightItem, TOrderByKey>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, OrderByEnumerable<TRightItem, TOrderByKey, TOrderByInnerEnumerable, TOrderByInnerEnumerator, TOrderByComparer>, OrderByEnumerator<TRightItem, TOrderByKey, TOrderByInnerEnumerator, TOrderByComparer>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static GroupJoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, OrderByEnumerable<TRightItem, TOrderByKey, TOrderByInnerEnumerable, TOrderByInnerEnumerator, TOrderByComparer>, OrderByEnumerator<TRightItem, TOrderByKey, TOrderByInnerEnumerator, TOrderByComparer>> GroupJoin<TOutItem, TKeyItem, TRightItem, TOrderByKey, TOrderByInnerEnumerable, TOrderByInnerEnumerator, TOrderByComparer>(this RangeEnumerable source, OrderByEnumerable<TRightItem, TOrderByKey, TOrderByInnerEnumerable, TOrderByInnerEnumerator, TOrderByComparer> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TOrderByInnerEnumerable : struct, IStructEnumerable<TRightItem, TOrderByInnerEnumerator>
//        where TOrderByInnerEnumerator : struct, IStructEnumerator<TRightItem>
//        where TOrderByComparer : struct, IStructComparer<TRightItem, TOrderByKey>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, OrderByEnumerable<TRightItem, TOrderByKey, TOrderByInnerEnumerable, TOrderByInnerEnumerator, TOrderByComparer>, OrderByEnumerator<TRightItem, TOrderByKey, TOrderByInnerEnumerator, TOrderByComparer>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static GroupJoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, int, RangeEnumerable, RangeEnumerator> GroupJoin<TOutItem, TKeyItem>(this RangeEnumerable source, RangeEnumerable inner, Func<int, TKeyItem> outerKeySelector, Func<int, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, int>, TOutItem> resultSelector)
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, int, RangeEnumerable, RangeEnumerator>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static GroupJoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, int, RangeEnumerable, RangeEnumerator> GroupJoin<TOutItem, TKeyItem>(this RangeEnumerable source, RangeEnumerable inner, Func<int, TKeyItem> outerKeySelector, Func<int, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, int>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, int, RangeEnumerable, RangeEnumerator>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static GroupJoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, RepeatEnumerable<TRightItem>, RepeatEnumerator<TRightItem>> GroupJoin<TOutItem, TKeyItem, TRightItem>(this RangeEnumerable source, RepeatEnumerable<TRightItem> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector)
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, RepeatEnumerable<TRightItem>, RepeatEnumerator<TRightItem>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static GroupJoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, RepeatEnumerable<TRightItem>, RepeatEnumerator<TRightItem>> GroupJoin<TOutItem, TKeyItem, TRightItem>(this RangeEnumerable source, RepeatEnumerable<TRightItem> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, RepeatEnumerable<TRightItem>, RepeatEnumerator<TRightItem>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static GroupJoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, ReverseEnumerable<TRightItem, TReverseInnerEnumerable, TReverseInnerEnumerator>, ReverseEnumerator<TRightItem>> GroupJoin<TOutItem, TKeyItem, TRightItem, TReverseInnerEnumerable, TReverseInnerEnumerator>(this RangeEnumerable source, ReverseEnumerable<TRightItem, TReverseInnerEnumerable, TReverseInnerEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector)
//        where TReverseInnerEnumerable : struct, IStructEnumerable<TRightItem, TReverseInnerEnumerator>
//        where TReverseInnerEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, ReverseEnumerable<TRightItem, TReverseInnerEnumerable, TReverseInnerEnumerator>, ReverseEnumerator<TRightItem>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static GroupJoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, ReverseEnumerable<TRightItem, TReverseInnerEnumerable, TReverseInnerEnumerator>, ReverseEnumerator<TRightItem>> GroupJoin<TOutItem, TKeyItem, TRightItem, TReverseInnerEnumerable, TReverseInnerEnumerator>(this RangeEnumerable source, ReverseEnumerable<TRightItem, TReverseInnerEnumerable, TReverseInnerEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TReverseInnerEnumerable : struct, IStructEnumerable<TRightItem, TReverseInnerEnumerator>
//        where TReverseInnerEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, ReverseEnumerable<TRightItem, TReverseInnerEnumerable, TReverseInnerEnumerator>, ReverseEnumerator<TRightItem>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static GroupJoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectEnumerable<TSelectInItem, TRightItem, TSelectInnerEnumerable, TSelectInnerEnumerator>, SelectEnumerator<TSelectInItem, TRightItem, TSelectInnerEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TSelectInItem, TSelectInnerEnumerable, TSelectInnerEnumerator>(this RangeEnumerable source, SelectEnumerable<TSelectInItem, TRightItem, TSelectInnerEnumerable, TSelectInnerEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector)
//        where TSelectInnerEnumerable : struct, IStructEnumerable<TSelectInItem, TSelectInnerEnumerator>
//        where TSelectInnerEnumerator : struct, IStructEnumerator<TSelectInItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectEnumerable<TSelectInItem, TRightItem, TSelectInnerEnumerable, TSelectInnerEnumerator>, SelectEnumerator<TSelectInItem, TRightItem, TSelectInnerEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static GroupJoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectEnumerable<TSelectInItem, TRightItem, TSelectInnerEnumerable, TSelectInnerEnumerator>, SelectEnumerator<TSelectInItem, TRightItem, TSelectInnerEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TSelectInItem, TSelectInnerEnumerable, TSelectInnerEnumerator>(this RangeEnumerable source, SelectEnumerable<TSelectInItem, TRightItem, TSelectInnerEnumerable, TSelectInnerEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TSelectInnerEnumerable : struct, IStructEnumerable<TSelectInItem, TSelectInnerEnumerator>
//        where TSelectInnerEnumerator : struct, IStructEnumerator<TSelectInItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectEnumerable<TSelectInItem, TRightItem, TSelectInnerEnumerable, TSelectInnerEnumerator>, SelectEnumerator<TSelectInItem, TRightItem, TSelectInnerEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static GroupJoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectIndexedEnumerable<TSelectInItem, TRightItem, TSelectInnerEnumerable, TSelectInnerEnumerator>, SelectIndexedEnumerator<TSelectInItem, TRightItem, TSelectInnerEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TSelectInItem, TSelectInnerEnumerable, TSelectInnerEnumerator>(this RangeEnumerable source, SelectIndexedEnumerable<TSelectInItem, TRightItem, TSelectInnerEnumerable, TSelectInnerEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector)
//        where TSelectInnerEnumerable : struct, IStructEnumerable<TSelectInItem, TSelectInnerEnumerator>
//        where TSelectInnerEnumerator : struct, IStructEnumerator<TSelectInItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectIndexedEnumerable<TSelectInItem, TRightItem, TSelectInnerEnumerable, TSelectInnerEnumerator>, SelectIndexedEnumerator<TSelectInItem, TRightItem, TSelectInnerEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static GroupJoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectIndexedEnumerable<TSelectInItem, TRightItem, TSelectInnerEnumerable, TSelectInnerEnumerator>, SelectIndexedEnumerator<TSelectInItem, TRightItem, TSelectInnerEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TSelectInItem, TSelectInnerEnumerable, TSelectInnerEnumerator>(this RangeEnumerable source, SelectIndexedEnumerable<TSelectInItem, TRightItem, TSelectInnerEnumerable, TSelectInnerEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TSelectInnerEnumerable : struct, IStructEnumerable<TSelectInItem, TSelectInnerEnumerator>
//        where TSelectInnerEnumerator : struct, IStructEnumerator<TSelectInItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectIndexedEnumerable<TSelectInItem, TRightItem, TSelectInnerEnumerable, TSelectInnerEnumerator>, SelectIndexedEnumerator<TSelectInItem, TRightItem, TSelectInnerEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static GroupJoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectManyBridgeEnumerable<TSelectManyInItem, TRightItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyBridgeEnumerator<TSelectManyInItem, TRightItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TSelectManyInItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyBridgeEnumerable<TSelectManyInItem, TRightItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector)
//        where TSelectManyBridgeType : class
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectManyInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectManyInItem>
//        where TSelectManyProjectedEnumerator : struct, IStructEnumerator<TRightItem>
//        where TSelectManyBridger : struct, IStructBridger<TRightItem, TSelectManyBridgeType, TSelectManyProjectedEnumerator>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectManyBridgeEnumerable<TSelectManyInItem, TRightItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyBridgeEnumerator<TSelectManyInItem, TRightItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static GroupJoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectManyBridgeEnumerable<TSelectManyInItem, TRightItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyBridgeEnumerator<TSelectManyInItem, TRightItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TSelectManyInItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyBridgeEnumerable<TSelectManyInItem, TRightItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TSelectManyBridgeType : class
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectManyInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectManyInItem>
//        where TSelectManyProjectedEnumerator : struct, IStructEnumerator<TRightItem>
//        where TSelectManyBridger : struct, IStructBridger<TRightItem, TSelectManyBridgeType, TSelectManyProjectedEnumerator>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectManyBridgeEnumerable<TSelectManyInItem, TRightItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyBridgeEnumerator<TSelectManyInItem, TRightItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static GroupJoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectManyIndexedBridgeEnumerable<TSelectManyInItem, TRightItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyIndexedBridgeEnumerator<TSelectManyInItem, TRightItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TSelectManyInItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyIndexedBridgeEnumerable<TSelectManyInItem, TRightItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector)
//        where TSelectManyBridgeType : class
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectManyInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectManyInItem>
//        where TSelectManyProjectedEnumerator : struct, IStructEnumerator<TRightItem>
//        where TSelectManyBridger : struct, IStructBridger<TRightItem, TSelectManyBridgeType, TSelectManyProjectedEnumerator>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectManyIndexedBridgeEnumerable<TSelectManyInItem, TRightItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyIndexedBridgeEnumerator<TSelectManyInItem, TRightItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static GroupJoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectManyIndexedBridgeEnumerable<TSelectManyInItem, TRightItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyIndexedBridgeEnumerator<TSelectManyInItem, TRightItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TSelectManyInItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyIndexedBridgeEnumerable<TSelectManyInItem, TRightItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TSelectManyBridgeType : class
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectManyInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectManyInItem>
//        where TSelectManyProjectedEnumerator : struct, IStructEnumerator<TRightItem>
//        where TSelectManyBridger : struct, IStructBridger<TRightItem, TSelectManyBridgeType, TSelectManyProjectedEnumerator>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectManyIndexedBridgeEnumerable<TSelectManyInItem, TRightItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyIndexedBridgeEnumerator<TSelectManyInItem, TRightItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static GroupJoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectManyCollectionBridgeEnumerable<TSelectManyInItem, TRightItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyCollectionBridgeEnumerator<TSelectManyInItem, TRightItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TSelectManyCollectionItem, TSelectManyInItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyCollectionBridgeEnumerable<TSelectManyInItem, TRightItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector)
//        where TSelectManyBridgeType : class
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectManyInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectManyInItem>
//        where TSelectManyProjectedEnumerator : struct, IStructEnumerator<TSelectManyCollectionItem>
//        where TSelectManyBridger : struct, IStructBridger<TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyProjectedEnumerator>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectManyCollectionBridgeEnumerable<TSelectManyInItem, TRightItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyCollectionBridgeEnumerator<TSelectManyInItem, TRightItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static GroupJoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectManyCollectionBridgeEnumerable<TSelectManyInItem, TRightItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyCollectionBridgeEnumerator<TSelectManyInItem, TRightItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TSelectManyCollectionItem, TSelectManyInItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyCollectionBridgeEnumerable<TSelectManyInItem, TRightItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TSelectManyBridgeType : class
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectManyInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectManyInItem>
//        where TSelectManyProjectedEnumerator : struct, IStructEnumerator<TSelectManyCollectionItem>
//        where TSelectManyBridger : struct, IStructBridger<TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyProjectedEnumerator>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectManyCollectionBridgeEnumerable<TSelectManyInItem, TRightItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyCollectionBridgeEnumerator<TSelectManyInItem, TRightItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static GroupJoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectManyCollectionIndexedBridgeEnumerable<TSelectManyInItem, TRightItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyCollectionIndexedBridgeEnumerator<TSelectManyInItem, TRightItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TSelectManyCollectionItem, TSelectManyInItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyCollectionIndexedBridgeEnumerable<TSelectManyInItem, TRightItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector)
//        where TSelectManyBridgeType : class
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectManyInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectManyInItem>
//        where TSelectManyProjectedEnumerator : struct, IStructEnumerator<TSelectManyCollectionItem>
//        where TSelectManyBridger : struct, IStructBridger<TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyProjectedEnumerator>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectManyCollectionIndexedBridgeEnumerable<TSelectManyInItem, TRightItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyCollectionIndexedBridgeEnumerator<TSelectManyInItem, TRightItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static GroupJoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectManyCollectionIndexedBridgeEnumerable<TSelectManyInItem, TRightItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyCollectionIndexedBridgeEnumerator<TSelectManyInItem, TRightItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TSelectManyCollectionItem, TSelectManyInItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyCollectionIndexedBridgeEnumerable<TSelectManyInItem, TRightItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TSelectManyBridgeType : class
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectManyInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectManyInItem>
//        where TSelectManyProjectedEnumerator : struct, IStructEnumerator<TSelectManyCollectionItem>
//        where TSelectManyBridger : struct, IStructBridger<TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyProjectedEnumerator>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectManyCollectionIndexedBridgeEnumerable<TSelectManyInItem, TRightItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyCollectionIndexedBridgeEnumerator<TSelectManyInItem, TRightItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static GroupJoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectManyEnumerable<TSelectManyInItem, TRightItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>, SelectManyEnumerator<TSelectManyInItem, TRightItem, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TSelectManyInItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyEnumerable<TSelectManyInItem, TRightItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector)
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectManyInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectManyInItem>
//        where TSelectManyProjectedEnumerable : struct, IStructEnumerable<TRightItem, TSelectManyProjectedEnumerator>
//        where TSelectManyProjectedEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectManyEnumerable<TSelectManyInItem, TRightItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>, SelectManyEnumerator<TSelectManyInItem, TRightItem, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static GroupJoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectManyEnumerable<TSelectManyInItem, TRightItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>, SelectManyEnumerator<TSelectManyInItem, TRightItem, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TSelectManyInItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyEnumerable<TSelectManyInItem, TRightItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectManyInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectManyInItem>
//        where TSelectManyProjectedEnumerable : struct, IStructEnumerable<TRightItem, TSelectManyProjectedEnumerator>
//        where TSelectManyProjectedEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectManyEnumerable<TSelectManyInItem, TRightItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>, SelectManyEnumerator<TSelectManyInItem, TRightItem, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static GroupJoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectManyIndexedEnumerable<TSelectManyInItem, TRightItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>, SelectManyIndexedEnumerator<TSelectManyInItem, TRightItem, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TSelectManyInItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyIndexedEnumerable<TSelectManyInItem, TRightItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector)
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectManyInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectManyInItem>
//        where TSelectManyProjectedEnumerable : struct, IStructEnumerable<TRightItem, TSelectManyProjectedEnumerator>
//        where TSelectManyProjectedEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectManyIndexedEnumerable<TSelectManyInItem, TRightItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>, SelectManyIndexedEnumerator<TSelectManyInItem, TRightItem, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static GroupJoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectManyIndexedEnumerable<TSelectManyInItem, TRightItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>, SelectManyIndexedEnumerator<TSelectManyInItem, TRightItem, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TSelectManyInItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyIndexedEnumerable<TSelectManyInItem, TRightItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectManyInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectManyInItem>
//        where TSelectManyProjectedEnumerable : struct, IStructEnumerable<TRightItem, TSelectManyProjectedEnumerator>
//        where TSelectManyProjectedEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectManyIndexedEnumerable<TSelectManyInItem, TRightItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>, SelectManyIndexedEnumerator<TSelectManyInItem, TRightItem, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static GroupJoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectManyCollectionEnumerable<TSelectManyInItem, TRightItem, TSelectManyCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>, SelectManyCollectionEnumerator<TSelectManyInItem, TRightItem, TSelectManyCollectionItem, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TSelectManyInItem, TSelectManyCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyCollectionEnumerable<TSelectManyInItem, TRightItem, TSelectManyCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector)
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectManyInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectManyInItem>
//        where TSelectManyProjectedEnumerable : struct, IStructEnumerable<TSelectManyCollectionItem, TSelectManyProjectedEnumerator>
//        where TSelectManyProjectedEnumerator : struct, IStructEnumerator<TSelectManyCollectionItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectManyCollectionEnumerable<TSelectManyInItem, TRightItem, TSelectManyCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>, SelectManyCollectionEnumerator<TSelectManyInItem, TRightItem, TSelectManyCollectionItem, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static GroupJoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectManyCollectionEnumerable<TSelectManyInItem, TRightItem, TSelectManyCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>, SelectManyCollectionEnumerator<TSelectManyInItem, TRightItem, TSelectManyCollectionItem, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TSelectManyInItem, TSelectManyCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyCollectionEnumerable<TSelectManyInItem, TRightItem, TSelectManyCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectManyInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectManyInItem>
//        where TSelectManyProjectedEnumerable : struct, IStructEnumerable<TSelectManyCollectionItem, TSelectManyProjectedEnumerator>
//        where TSelectManyProjectedEnumerator : struct, IStructEnumerator<TSelectManyCollectionItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectManyCollectionEnumerable<TSelectManyInItem, TRightItem, TSelectManyCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>, SelectManyCollectionEnumerator<TSelectManyInItem, TRightItem, TSelectManyCollectionItem, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static GroupJoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectManyCollectionIndexedEnumerable<TSelectManyInItem, TRightItem, TSelectManyCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>, SelectManyCollectionIndexedEnumerator<TSelectManyInItem, TRightItem, TSelectManyCollectionItem, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TSelectManyInItem, TSelectManyCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyCollectionIndexedEnumerable<TSelectManyInItem, TRightItem, TSelectManyCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector)
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectManyInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectManyInItem>
//        where TSelectManyProjectedEnumerable : struct, IStructEnumerable<TSelectManyCollectionItem, TSelectManyProjectedEnumerator>
//        where TSelectManyProjectedEnumerator : struct, IStructEnumerator<TSelectManyCollectionItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectManyCollectionIndexedEnumerable<TSelectManyInItem, TRightItem, TSelectManyCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>, SelectManyCollectionIndexedEnumerator<TSelectManyInItem, TRightItem, TSelectManyCollectionItem, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static GroupJoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectManyCollectionIndexedEnumerable<TSelectManyInItem, TRightItem, TSelectManyCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>, SelectManyCollectionIndexedEnumerator<TSelectManyInItem, TRightItem, TSelectManyCollectionItem, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TSelectManyInItem, TSelectManyCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyCollectionIndexedEnumerable<TSelectManyInItem, TRightItem, TSelectManyCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectManyInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectManyInItem>
//        where TSelectManyProjectedEnumerable : struct, IStructEnumerable<TSelectManyCollectionItem, TSelectManyProjectedEnumerator>
//        where TSelectManyProjectedEnumerator : struct, IStructEnumerator<TSelectManyCollectionItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectManyCollectionIndexedEnumerable<TSelectManyInItem, TRightItem, TSelectManyCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>, SelectManyCollectionIndexedEnumerator<TSelectManyInItem, TRightItem, TSelectManyCollectionItem, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static GroupJoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectSelectEnumerable<TRightItem, TSelectInnerItem, TSelectInnerEnumerable, TSelectInnerEnumerator, TSelectProjection>, SelectSelectEnumerator<TRightItem, TSelectInnerItem, TSelectInnerEnumerator, TSelectProjection>> GroupJoin<TOutItem, TKeyItem, TRightItem, TSelectInnerItem, TSelectInnerEnumerable, TSelectInnerEnumerator, TSelectProjection>(this RangeEnumerable source, SelectSelectEnumerable<TRightItem, TSelectInnerItem, TSelectInnerEnumerable, TSelectInnerEnumerator, TSelectProjection> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector)
//        where TSelectInnerEnumerable : struct, IStructEnumerable<TSelectInnerItem, TSelectInnerEnumerator>
//        where TSelectInnerEnumerator : struct, IStructEnumerator<TSelectInnerItem>
//        where TSelectProjection : struct, IStructProjection<TRightItem, TSelectInnerItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectSelectEnumerable<TRightItem, TSelectInnerItem, TSelectInnerEnumerable, TSelectInnerEnumerator, TSelectProjection>, SelectSelectEnumerator<TRightItem, TSelectInnerItem, TSelectInnerEnumerator, TSelectProjection>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static GroupJoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectSelectEnumerable<TRightItem, TSelectInnerItem, TSelectInnerEnumerable, TSelectInnerEnumerator, TSelectProjection>, SelectSelectEnumerator<TRightItem, TSelectInnerItem, TSelectInnerEnumerator, TSelectProjection>> GroupJoin<TOutItem, TKeyItem, TRightItem, TSelectInnerItem, TSelectInnerEnumerable, TSelectInnerEnumerator, TSelectProjection>(this RangeEnumerable source, SelectSelectEnumerable<TRightItem, TSelectInnerItem, TSelectInnerEnumerable, TSelectInnerEnumerator, TSelectProjection> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TSelectInnerEnumerable : struct, IStructEnumerable<TSelectInnerItem, TSelectInnerEnumerator>
//        where TSelectInnerEnumerator : struct, IStructEnumerator<TSelectInnerItem>
//        where TSelectProjection : struct, IStructProjection<TRightItem, TSelectInnerItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectSelectEnumerable<TRightItem, TSelectInnerItem, TSelectInnerEnumerable, TSelectInnerEnumerator, TSelectProjection>, SelectSelectEnumerator<TRightItem, TSelectInnerItem, TSelectInnerEnumerator, TSelectProjection>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static GroupJoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectWhereEnumerable<TRightItem, TSelectInnerItem, TSelectInnerEnumerable, TSelectInnerEnumerator, TSelectProjection, TSelectPredicate>, SelectWhereEnumerator<TRightItem, TSelectInnerItem, TSelectInnerEnumerator, TSelectProjection, TSelectPredicate>> GroupJoin<TOutItem, TKeyItem, TRightItem, TSelectInnerItem, TSelectInnerEnumerable, TSelectInnerEnumerator, TSelectProjection, TSelectPredicate>(this RangeEnumerable source, SelectWhereEnumerable<TRightItem, TSelectInnerItem, TSelectInnerEnumerable, TSelectInnerEnumerator, TSelectProjection, TSelectPredicate> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector)
//        where TSelectInnerEnumerable : struct, IStructEnumerable<TSelectInnerItem, TSelectInnerEnumerator>
//        where TSelectInnerEnumerator : struct, IStructEnumerator<TSelectInnerItem>
//        where TSelectProjection : struct, IStructProjection<TRightItem, TSelectInnerItem>
//        where TSelectPredicate : struct, IStructPredicate<TRightItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectWhereEnumerable<TRightItem, TSelectInnerItem, TSelectInnerEnumerable, TSelectInnerEnumerator, TSelectProjection, TSelectPredicate>, SelectWhereEnumerator<TRightItem, TSelectInnerItem, TSelectInnerEnumerator, TSelectProjection, TSelectPredicate>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static GroupJoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectWhereEnumerable<TRightItem, TSelectInnerItem, TSelectInnerEnumerable, TSelectInnerEnumerator, TSelectProjection, TSelectPredicate>, SelectWhereEnumerator<TRightItem, TSelectInnerItem, TSelectInnerEnumerator, TSelectProjection, TSelectPredicate>> GroupJoin<TOutItem, TKeyItem, TRightItem, TSelectInnerItem, TSelectInnerEnumerable, TSelectInnerEnumerator, TSelectProjection, TSelectPredicate>(this RangeEnumerable source, SelectWhereEnumerable<TRightItem, TSelectInnerItem, TSelectInnerEnumerable, TSelectInnerEnumerator, TSelectProjection, TSelectPredicate> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TSelectInnerEnumerable : struct, IStructEnumerable<TSelectInnerItem, TSelectInnerEnumerator>
//        where TSelectInnerEnumerator : struct, IStructEnumerator<TSelectInnerItem>
//        where TSelectProjection : struct, IStructProjection<TRightItem, TSelectInnerItem>
//        where TSelectPredicate : struct, IStructPredicate<TRightItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectWhereEnumerable<TRightItem, TSelectInnerItem, TSelectInnerEnumerable, TSelectInnerEnumerator, TSelectProjection, TSelectPredicate>, SelectWhereEnumerator<TRightItem, TSelectInnerItem, TSelectInnerEnumerator, TSelectProjection, TSelectPredicate>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static GroupJoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SkipEnumerable<TRightItem, TSkipInnerEnumerable, TSkipInnerEnumerator>, SkipEnumerator<TRightItem, TSkipInnerEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TSkipInnerEnumerable, TSkipInnerEnumerator>(this RangeEnumerable source, SkipEnumerable<TRightItem, TSkipInnerEnumerable, TSkipInnerEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector)
//        where TSkipInnerEnumerable : struct, IStructEnumerable<TRightItem, TSkipInnerEnumerator>
//        where TSkipInnerEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SkipEnumerable<TRightItem, TSkipInnerEnumerable, TSkipInnerEnumerator>, SkipEnumerator<TRightItem, TSkipInnerEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static GroupJoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SkipEnumerable<TRightItem, TSkipInnerEnumerable, TSkipInnerEnumerator>, SkipEnumerator<TRightItem, TSkipInnerEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TSkipInnerEnumerable, TSkipInnerEnumerator>(this RangeEnumerable source, SkipEnumerable<TRightItem, TSkipInnerEnumerable, TSkipInnerEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TSkipInnerEnumerable : struct, IStructEnumerable<TRightItem, TSkipInnerEnumerator>
//        where TSkipInnerEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SkipEnumerable<TRightItem, TSkipInnerEnumerable, TSkipInnerEnumerator>, SkipEnumerator<TRightItem, TSkipInnerEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static GroupJoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SkipWhileEnumerable<TRightItem, TSkipInnerEnumerable, TSkipInnerEnumerator>, SkipWhileEnumerator<TRightItem, TSkipInnerEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TSkipInnerEnumerable, TSkipInnerEnumerator>(this RangeEnumerable source, SkipWhileEnumerable<TRightItem, TSkipInnerEnumerable, TSkipInnerEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector)
//        where TSkipInnerEnumerable : struct, IStructEnumerable<TRightItem, TSkipInnerEnumerator>
//        where TSkipInnerEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SkipWhileEnumerable<TRightItem, TSkipInnerEnumerable, TSkipInnerEnumerator>, SkipWhileEnumerator<TRightItem, TSkipInnerEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static GroupJoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SkipWhileEnumerable<TRightItem, TSkipInnerEnumerable, TSkipInnerEnumerator>, SkipWhileEnumerator<TRightItem, TSkipInnerEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TSkipInnerEnumerable, TSkipInnerEnumerator>(this RangeEnumerable source, SkipWhileEnumerable<TRightItem, TSkipInnerEnumerable, TSkipInnerEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TSkipInnerEnumerable : struct, IStructEnumerable<TRightItem, TSkipInnerEnumerator>
//        where TSkipInnerEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SkipWhileEnumerable<TRightItem, TSkipInnerEnumerable, TSkipInnerEnumerator>, SkipWhileEnumerator<TRightItem, TSkipInnerEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static GroupJoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SkipWhileIndexedEnumerable<TRightItem, TSkipInnerEnumerable, TSkipInnerEnumerator>, SkipWhileIndexedEnumerator<TRightItem, TSkipInnerEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TSkipInnerEnumerable, TSkipInnerEnumerator>(this RangeEnumerable source, SkipWhileIndexedEnumerable<TRightItem, TSkipInnerEnumerable, TSkipInnerEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector)
//        where TSkipInnerEnumerable : struct, IStructEnumerable<TRightItem, TSkipInnerEnumerator>
//        where TSkipInnerEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SkipWhileIndexedEnumerable<TRightItem, TSkipInnerEnumerable, TSkipInnerEnumerator>, SkipWhileIndexedEnumerator<TRightItem, TSkipInnerEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static GroupJoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SkipWhileIndexedEnumerable<TRightItem, TSkipInnerEnumerable, TSkipInnerEnumerator>, SkipWhileIndexedEnumerator<TRightItem, TSkipInnerEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TSkipInnerEnumerable, TSkipInnerEnumerator>(this RangeEnumerable source, SkipWhileIndexedEnumerable<TRightItem, TSkipInnerEnumerable, TSkipInnerEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TSkipInnerEnumerable : struct, IStructEnumerable<TRightItem, TSkipInnerEnumerator>
//        where TSkipInnerEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SkipWhileIndexedEnumerable<TRightItem, TSkipInnerEnumerable, TSkipInnerEnumerator>, SkipWhileIndexedEnumerator<TRightItem, TSkipInnerEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static GroupJoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, TakeEnumerable<TRightItem, TTakeInnerEnumerable, TTakeInnerEnumerator>, TakeEnumerator<TRightItem, TTakeInnerEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TTakeInnerEnumerable, TTakeInnerEnumerator>(this RangeEnumerable source, TakeEnumerable<TRightItem, TTakeInnerEnumerable, TTakeInnerEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector)
//        where TTakeInnerEnumerable : struct, IStructEnumerable<TRightItem, TTakeInnerEnumerator>
//        where TTakeInnerEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, TakeEnumerable<TRightItem, TTakeInnerEnumerable, TTakeInnerEnumerator>, TakeEnumerator<TRightItem, TTakeInnerEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static GroupJoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, TakeEnumerable<TRightItem, TTakeInnerEnumerable, TTakeInnerEnumerator>, TakeEnumerator<TRightItem, TTakeInnerEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TTakeInnerEnumerable, TTakeInnerEnumerator>(this RangeEnumerable source, TakeEnumerable<TRightItem, TTakeInnerEnumerable, TTakeInnerEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TTakeInnerEnumerable : struct, IStructEnumerable<TRightItem, TTakeInnerEnumerator>
//        where TTakeInnerEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, TakeEnumerable<TRightItem, TTakeInnerEnumerable, TTakeInnerEnumerator>, TakeEnumerator<TRightItem, TTakeInnerEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static GroupJoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, TakeWhileEnumerable<TRightItem, TTakeInnerEnumerable, TTakeInnerEnumerator>, TakeWhileEnumerator<TRightItem, TTakeInnerEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TTakeInnerEnumerable, TTakeInnerEnumerator>(this RangeEnumerable source, TakeWhileEnumerable<TRightItem, TTakeInnerEnumerable, TTakeInnerEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector)
//        where TTakeInnerEnumerable : struct, IStructEnumerable<TRightItem, TTakeInnerEnumerator>
//        where TTakeInnerEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, TakeWhileEnumerable<TRightItem, TTakeInnerEnumerable, TTakeInnerEnumerator>, TakeWhileEnumerator<TRightItem, TTakeInnerEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static GroupJoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, TakeWhileEnumerable<TRightItem, TTakeInnerEnumerable, TTakeInnerEnumerator>, TakeWhileEnumerator<TRightItem, TTakeInnerEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TTakeInnerEnumerable, TTakeInnerEnumerator>(this RangeEnumerable source, TakeWhileEnumerable<TRightItem, TTakeInnerEnumerable, TTakeInnerEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TTakeInnerEnumerable : struct, IStructEnumerable<TRightItem, TTakeInnerEnumerator>
//        where TTakeInnerEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, TakeWhileEnumerable<TRightItem, TTakeInnerEnumerable, TTakeInnerEnumerator>, TakeWhileEnumerator<TRightItem, TTakeInnerEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static GroupJoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, TakeWhileIndexedEnumerable<TRightItem, TTakeInnerEnumerable, TTakeInnerEnumerator>, TakeWhileIndexedEnumerator<TRightItem, TTakeInnerEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TTakeInnerEnumerable, TTakeInnerEnumerator>(this RangeEnumerable source, TakeWhileIndexedEnumerable<TRightItem, TTakeInnerEnumerable, TTakeInnerEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector)
//        where TTakeInnerEnumerable : struct, IStructEnumerable<TRightItem, TTakeInnerEnumerator>
//        where TTakeInnerEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, TakeWhileIndexedEnumerable<TRightItem, TTakeInnerEnumerable, TTakeInnerEnumerator>, TakeWhileIndexedEnumerator<TRightItem, TTakeInnerEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static GroupJoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, TakeWhileIndexedEnumerable<TRightItem, TTakeInnerEnumerable, TTakeInnerEnumerator>, TakeWhileIndexedEnumerator<TRightItem, TTakeInnerEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TTakeInnerEnumerable, TTakeInnerEnumerator>(this RangeEnumerable source, TakeWhileIndexedEnumerable<TRightItem, TTakeInnerEnumerable, TTakeInnerEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TTakeInnerEnumerable : struct, IStructEnumerable<TRightItem, TTakeInnerEnumerator>
//        where TTakeInnerEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, TakeWhileIndexedEnumerable<TRightItem, TTakeInnerEnumerable, TTakeInnerEnumerator>, TakeWhileIndexedEnumerator<TRightItem, TTakeInnerEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static GroupJoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, UnionDefaultEnumerable<TRightItem, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator>, UnionDefaultEnumerator<TRightItem, TUnionFirstEnumerator, TUnionSecondEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator>(this RangeEnumerable source, UnionDefaultEnumerable<TRightItem, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector)
//        where TUnionFirstEnumerable : struct, IStructEnumerable<TRightItem, TUnionFirstEnumerator>
//        where TUnionFirstEnumerator : struct, IStructEnumerator<TRightItem>
//        where TUnionSecondEnumerable : struct, IStructEnumerable<TRightItem, TUnionSecondEnumerator>
//        where TUnionSecondEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, UnionDefaultEnumerable<TRightItem, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator>, UnionDefaultEnumerator<TRightItem, TUnionFirstEnumerator, TUnionSecondEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static GroupJoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, UnionDefaultEnumerable<TRightItem, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator>, UnionDefaultEnumerator<TRightItem, TUnionFirstEnumerator, TUnionSecondEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator>(this RangeEnumerable source, UnionDefaultEnumerable<TRightItem, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TUnionFirstEnumerable : struct, IStructEnumerable<TRightItem, TUnionFirstEnumerator>
//        where TUnionFirstEnumerator : struct, IStructEnumerator<TRightItem>
//        where TUnionSecondEnumerable : struct, IStructEnumerable<TRightItem, TUnionSecondEnumerator>
//        where TUnionSecondEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, UnionDefaultEnumerable<TRightItem, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator>, UnionDefaultEnumerator<TRightItem, TUnionFirstEnumerator, TUnionSecondEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static GroupJoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, UnionSpecificEnumerable<TRightItem, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator>, UnionSpecificEnumerator<TRightItem, TUnionFirstEnumerator, TUnionSecondEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator>(this RangeEnumerable source, UnionSpecificEnumerable<TRightItem, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector)
//        where TUnionFirstEnumerable : struct, IStructEnumerable<TRightItem, TUnionFirstEnumerator>
//        where TUnionFirstEnumerator : struct, IStructEnumerator<TRightItem>
//        where TUnionSecondEnumerable : struct, IStructEnumerable<TRightItem, TUnionSecondEnumerator>
//        where TUnionSecondEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, UnionSpecificEnumerable<TRightItem, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator>, UnionSpecificEnumerator<TRightItem, TUnionFirstEnumerator, TUnionSecondEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static GroupJoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, UnionSpecificEnumerable<TRightItem, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator>, UnionSpecificEnumerator<TRightItem, TUnionFirstEnumerator, TUnionSecondEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator>(this RangeEnumerable source, UnionSpecificEnumerable<TRightItem, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TUnionFirstEnumerable : struct, IStructEnumerable<TRightItem, TUnionFirstEnumerator>
//        where TUnionFirstEnumerator : struct, IStructEnumerator<TRightItem>
//        where TUnionSecondEnumerable : struct, IStructEnumerable<TRightItem, TUnionSecondEnumerator>
//        where TUnionSecondEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, UnionSpecificEnumerable<TRightItem, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator>, UnionSpecificEnumerator<TRightItem, TUnionFirstEnumerator, TUnionSecondEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static GroupJoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, WhereEnumerable<TRightItem, TWhereInnerEnumerable, TWhereInnerEnumerator>, WhereEnumerator<TRightItem, TWhereInnerEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TWhereInnerEnumerable, TWhereInnerEnumerator>(this RangeEnumerable source, WhereEnumerable<TRightItem, TWhereInnerEnumerable, TWhereInnerEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector)
//        where TWhereInnerEnumerable : struct, IStructEnumerable<TRightItem, TWhereInnerEnumerator>
//        where TWhereInnerEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, WhereEnumerable<TRightItem, TWhereInnerEnumerable, TWhereInnerEnumerator>, WhereEnumerator<TRightItem, TWhereInnerEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static GroupJoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, WhereEnumerable<TRightItem, TWhereInnerEnumerable, TWhereInnerEnumerator>, WhereEnumerator<TRightItem, TWhereInnerEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TWhereInnerEnumerable, TWhereInnerEnumerator>(this RangeEnumerable source, WhereEnumerable<TRightItem, TWhereInnerEnumerable, TWhereInnerEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TWhereInnerEnumerable : struct, IStructEnumerable<TRightItem, TWhereInnerEnumerator>
//        where TWhereInnerEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, WhereEnumerable<TRightItem, TWhereInnerEnumerable, TWhereInnerEnumerator>, WhereEnumerator<TRightItem, TWhereInnerEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static GroupJoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, WhereIndexedEnumerable<TRightItem, TWhereInnerEnumerable, TWhereInnerEnumerator>, WhereIndexedEnumerator<TRightItem, TWhereInnerEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TWhereInnerEnumerable, TWhereInnerEnumerator>(this RangeEnumerable source, WhereIndexedEnumerable<TRightItem, TWhereInnerEnumerable, TWhereInnerEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector)
//        where TWhereInnerEnumerable : struct, IStructEnumerable<TRightItem, TWhereInnerEnumerator>
//        where TWhereInnerEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, WhereIndexedEnumerable<TRightItem, TWhereInnerEnumerable, TWhereInnerEnumerator>, WhereIndexedEnumerator<TRightItem, TWhereInnerEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static GroupJoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, WhereIndexedEnumerable<TRightItem, TWhereInnerEnumerable, TWhereInnerEnumerator>, WhereIndexedEnumerator<TRightItem, TWhereInnerEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TWhereInnerEnumerable, TWhereInnerEnumerator>(this RangeEnumerable source, WhereIndexedEnumerable<TRightItem, TWhereInnerEnumerable, TWhereInnerEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TWhereInnerEnumerable : struct, IStructEnumerable<TRightItem, TWhereInnerEnumerator>
//        where TWhereInnerEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, WhereIndexedEnumerable<TRightItem, TWhereInnerEnumerable, TWhereInnerEnumerator>, WhereIndexedEnumerator<TRightItem, TWhereInnerEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static GroupJoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, WhereSelectEnumerable<TRightItem, TWhereInnerItem, TWhereInnerEnumerable, TWhereInnerEnumerator, TWherePredicate, TWhereProjection>, WhereSelectEnumerator<TRightItem, TWhereInnerItem, TWhereInnerEnumerator, TWherePredicate, TWhereProjection>> GroupJoin<TOutItem, TKeyItem, TRightItem, TWhereInnerItem, TWhereInnerEnumerable, TWhereInnerEnumerator, TWherePredicate, TWhereProjection>(this RangeEnumerable source, WhereSelectEnumerable<TRightItem, TWhereInnerItem, TWhereInnerEnumerable, TWhereInnerEnumerator, TWherePredicate, TWhereProjection> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector)
//        where TWhereInnerEnumerable : struct, IStructEnumerable<TWhereInnerItem, TWhereInnerEnumerator>
//        where TWhereInnerEnumerator : struct, IStructEnumerator<TWhereInnerItem>
//        where TWherePredicate : struct, IStructPredicate<TWhereInnerItem>
//        where TWhereProjection : struct, IStructProjection<TRightItem, TWhereInnerItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, WhereSelectEnumerable<TRightItem, TWhereInnerItem, TWhereInnerEnumerable, TWhereInnerEnumerator, TWherePredicate, TWhereProjection>, WhereSelectEnumerator<TRightItem, TWhereInnerItem, TWhereInnerEnumerator, TWherePredicate, TWhereProjection>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static GroupJoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, WhereSelectEnumerable<TRightItem, TWhereInnerItem, TWhereInnerEnumerable, TWhereInnerEnumerator, TWherePredicate, TWhereProjection>, WhereSelectEnumerator<TRightItem, TWhereInnerItem, TWhereInnerEnumerator, TWherePredicate, TWhereProjection>> GroupJoin<TOutItem, TKeyItem, TRightItem, TWhereInnerItem, TWhereInnerEnumerable, TWhereInnerEnumerator, TWherePredicate, TWhereProjection>(this RangeEnumerable source, WhereSelectEnumerable<TRightItem, TWhereInnerItem, TWhereInnerEnumerable, TWhereInnerEnumerator, TWherePredicate, TWhereProjection> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TWhereInnerEnumerable : struct, IStructEnumerable<TWhereInnerItem, TWhereInnerEnumerator>
//        where TWhereInnerEnumerator : struct, IStructEnumerator<TWhereInnerItem>
//        where TWherePredicate : struct, IStructPredicate<TWhereInnerItem>
//        where TWhereProjection : struct, IStructProjection<TRightItem, TWhereInnerItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, WhereSelectEnumerable<TRightItem, TWhereInnerItem, TWhereInnerEnumerable, TWhereInnerEnumerator, TWherePredicate, TWhereProjection>, WhereSelectEnumerator<TRightItem, TWhereInnerItem, TWhereInnerEnumerator, TWherePredicate, TWhereProjection>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static GroupJoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, WhereWhereEnumerable<TRightItem, TWhereInnerEnumerable, TWhereInnerEnumerator, TWherePredicate>, WhereWhereEnumerator<TRightItem, TWhereInnerEnumerator, TWherePredicate>> GroupJoin<TOutItem, TKeyItem, TRightItem, TWhereInnerEnumerable, TWhereInnerEnumerator, TWherePredicate>(this RangeEnumerable source, WhereWhereEnumerable<TRightItem, TWhereInnerEnumerable, TWhereInnerEnumerator, TWherePredicate> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector)
//        where TWhereInnerEnumerable : struct, IStructEnumerable<TRightItem, TWhereInnerEnumerator>
//        where TWhereInnerEnumerator : struct, IStructEnumerator<TRightItem>
//        where TWherePredicate : struct, IStructPredicate<TRightItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, WhereWhereEnumerable<TRightItem, TWhereInnerEnumerable, TWhereInnerEnumerator, TWherePredicate>, WhereWhereEnumerator<TRightItem, TWhereInnerEnumerator, TWherePredicate>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static GroupJoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, WhereWhereEnumerable<TRightItem, TWhereInnerEnumerable, TWhereInnerEnumerator, TWherePredicate>, WhereWhereEnumerator<TRightItem, TWhereInnerEnumerator, TWherePredicate>> GroupJoin<TOutItem, TKeyItem, TRightItem, TWhereInnerEnumerable, TWhereInnerEnumerator, TWherePredicate>(this RangeEnumerable source, WhereWhereEnumerable<TRightItem, TWhereInnerEnumerable, TWhereInnerEnumerator, TWherePredicate> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TWhereInnerEnumerable : struct, IStructEnumerable<TRightItem, TWhereInnerEnumerator>
//        where TWhereInnerEnumerator : struct, IStructEnumerator<TRightItem>
//        where TWherePredicate : struct, IStructPredicate<TRightItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, WhereWhereEnumerable<TRightItem, TWhereInnerEnumerable, TWhereInnerEnumerator, TWherePredicate>, WhereWhereEnumerator<TRightItem, TWhereInnerEnumerator, TWherePredicate>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static GroupJoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, ZipEnumerable<TRightItem, TZipFirstItem, TZipSecondItem, TZipFirstEnumerable, TZipFirstEnumerator, TZipSecondEnumerable, TZipSecondEnumerator>, ZipEnumerator<TRightItem, TZipFirstItem, TZipSecondItem, TZipFirstEnumerator, TZipSecondEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TZipFirstItem, TZipSecondItem, TZipFirstEnumerable, TZipFirstEnumerator, TZipSecondEnumerable, TZipSecondEnumerator>(this RangeEnumerable source, ZipEnumerable<TRightItem, TZipFirstItem, TZipSecondItem, TZipFirstEnumerable, TZipFirstEnumerator, TZipSecondEnumerable, TZipSecondEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector)
//        where TZipFirstEnumerable : struct, IStructEnumerable<TZipFirstItem, TZipFirstEnumerator>
//        where TZipFirstEnumerator : struct, IStructEnumerator<TZipFirstItem>
//        where TZipSecondEnumerable : struct, IStructEnumerable<TZipSecondItem, TZipSecondEnumerator>
//        where TZipSecondEnumerator : struct, IStructEnumerator<TZipSecondItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, ZipEnumerable<TRightItem, TZipFirstItem, TZipSecondItem, TZipFirstEnumerable, TZipFirstEnumerator, TZipSecondEnumerable, TZipSecondEnumerator>, ZipEnumerator<TRightItem, TZipFirstItem, TZipSecondItem, TZipFirstEnumerator, TZipSecondEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static GroupJoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, ZipEnumerable<TRightItem, TZipFirstItem, TZipSecondItem, TZipFirstEnumerable, TZipFirstEnumerator, TZipSecondEnumerable, TZipSecondEnumerator>, ZipEnumerator<TRightItem, TZipFirstItem, TZipSecondItem, TZipFirstEnumerator, TZipSecondEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TZipFirstItem, TZipSecondItem, TZipFirstEnumerable, TZipFirstEnumerator, TZipSecondEnumerable, TZipSecondEnumerator>(this RangeEnumerable source, ZipEnumerable<TRightItem, TZipFirstItem, TZipSecondItem, TZipFirstEnumerable, TZipFirstEnumerator, TZipSecondEnumerable, TZipSecondEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TZipFirstEnumerable : struct, IStructEnumerable<TZipFirstItem, TZipFirstEnumerator>
//        where TZipFirstEnumerator : struct, IStructEnumerator<TZipFirstItem>
//        where TZipSecondEnumerable : struct, IStructEnumerable<TZipSecondItem, TZipSecondEnumerator>
//        where TZipSecondEnumerator : struct, IStructEnumerator<TZipSecondItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, ZipEnumerable<TRightItem, TZipFirstItem, TZipSecondItem, TZipFirstEnumerable, TZipFirstEnumerator, TZipSecondEnumerable, TZipSecondEnumerator>, ZipEnumerator<TRightItem, TZipFirstItem, TZipSecondItem, TZipFirstEnumerator, TZipSecondEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static GroupJoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, TBridgeType, TIdentityBridger, TIdentityEnumerator>, TIdentityEnumerator> GroupJoin<TOutItem, TKeyItem, TRightItem, TBridgeType, TIdentityBridger, TIdentityEnumerator>(this RangeEnumerable source, IdentityEnumerable<TRightItem, TBridgeType, TIdentityBridger, TIdentityEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector)
//        where TBridgeType : class
//        where TIdentityEnumerator : struct, IStructEnumerator<TRightItem>
//        where TIdentityBridger : struct, IStructBridger<TRightItem, TBridgeType, TIdentityEnumerator>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, TBridgeType, TIdentityBridger, TIdentityEnumerator>, TIdentityEnumerator>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static GroupJoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, TBridgeType, TIdentityBridger, TIdentityEnumerator>, TIdentityEnumerator> GroupJoin<TOutItem, TKeyItem, TRightItem, TBridgeType, TIdentityBridger, TIdentityEnumerator>(this RangeEnumerable source, IdentityEnumerable<TRightItem, TBridgeType, TIdentityBridger, TIdentityEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TBridgeType : class
//        where TIdentityEnumerator : struct, IStructEnumerator<TRightItem>
//        where TIdentityBridger : struct, IStructBridger<TRightItem, TBridgeType, TIdentityEnumerator>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, TBridgeType, TIdentityBridger, TIdentityEnumerator>, TIdentityEnumerator>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static GroupJoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, int, ReverseRangeEnumerable, ReverseRangeEnumerator> GroupJoin<TOutItem, TKeyItem>(this RangeEnumerable source, ReverseRangeEnumerable inner, Func<int, TKeyItem> outerKeySelector, Func<int, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, int>, TOutItem> resultSelector)
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, int, ReverseRangeEnumerable, ReverseRangeEnumerator>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static GroupJoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, int, ReverseRangeEnumerable, ReverseRangeEnumerator> GroupJoin<TOutItem, TKeyItem>(this RangeEnumerable source, ReverseRangeEnumerable inner, Func<int, TKeyItem> outerKeySelector, Func<int, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, int>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, int, ReverseRangeEnumerable, ReverseRangeEnumerator>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static GroupJoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, GroupingEnumerable<TGroupByKey, TGroupByElement>, GroupByDefaultEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByEnumerable, TGroupByEnumerator>, GroupByDefaultEnumerator<TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByEnumerator>> GroupJoin<TOutItem, TKeyItem, TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByEnumerable, TGroupByEnumerator>(this RangeEnumerable source, GroupByDefaultEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByEnumerable, TGroupByEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<GroupingEnumerable<TGroupByKey, TGroupByElement>, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, GroupingEnumerable<TGroupByKey, TGroupByElement>>, TOutItem> resultSelector)
//        where TGroupByEnumerable : struct, IStructEnumerable<TGroupByInItem, TGroupByEnumerator>
//        where TGroupByEnumerator : struct, IStructEnumerator<TGroupByInItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, GroupingEnumerable<TGroupByKey, TGroupByElement>, GroupByDefaultEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByEnumerable, TGroupByEnumerator>, GroupByDefaultEnumerator<TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static GroupJoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, GroupingEnumerable<TGroupByKey, TGroupByElement>, GroupByDefaultEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByEnumerable, TGroupByEnumerator>, GroupByDefaultEnumerator<TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByEnumerator>> GroupJoin<TOutItem, TKeyItem, TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByEnumerable, TGroupByEnumerator>(this RangeEnumerable source, GroupByDefaultEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByEnumerable, TGroupByEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<GroupingEnumerable<TGroupByKey, TGroupByElement>, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, GroupingEnumerable<TGroupByKey, TGroupByElement>>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TGroupByEnumerable : struct, IStructEnumerable<TGroupByInItem, TGroupByEnumerator>
//        where TGroupByEnumerator : struct, IStructEnumerator<TGroupByInItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, GroupingEnumerable<TGroupByKey, TGroupByElement>, GroupByDefaultEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByEnumerable, TGroupByEnumerator>, GroupByDefaultEnumerator<TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static GroupJoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, GroupingEnumerable<TGroupByKey, TGroupByElement>, GroupBySpecificEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByEnumerable, TGroupByEnumerator>, GroupBySpecificEnumerator<TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByEnumerator>> GroupJoin<TOutItem, TKeyItem, TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByEnumerable, TGroupByEnumerator>(this RangeEnumerable source, GroupBySpecificEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByEnumerable, TGroupByEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<GroupingEnumerable<TGroupByKey, TGroupByElement>, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, GroupingEnumerable<TGroupByKey, TGroupByElement>>, TOutItem> resultSelector)
//        where TGroupByEnumerable : struct, IStructEnumerable<TGroupByInItem, TGroupByEnumerator>
//        where TGroupByEnumerator : struct, IStructEnumerator<TGroupByInItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, GroupingEnumerable<TGroupByKey, TGroupByElement>, GroupBySpecificEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByEnumerable, TGroupByEnumerator>, GroupBySpecificEnumerator<TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static GroupJoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, GroupingEnumerable<TGroupByKey, TGroupByElement>, GroupBySpecificEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByEnumerable, TGroupByEnumerator>, GroupBySpecificEnumerator<TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByEnumerator>> GroupJoin<TOutItem, TKeyItem, TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByEnumerable, TGroupByEnumerator>(this RangeEnumerable source, GroupBySpecificEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByEnumerable, TGroupByEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<GroupingEnumerable<TGroupByKey, TGroupByElement>, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, GroupingEnumerable<TGroupByKey, TGroupByElement>>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TGroupByEnumerable : struct, IStructEnumerable<TGroupByInItem, TGroupByEnumerator>
//        where TGroupByEnumerator : struct, IStructEnumerator<TGroupByInItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, GroupingEnumerable<TGroupByKey, TGroupByElement>, GroupBySpecificEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByEnumerable, TGroupByEnumerator>, GroupBySpecificEnumerator<TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static GroupJoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, KeyValuePair<TDictionaryKey, TDictionaryValue>, IdentityEnumerable<KeyValuePair<TDictionaryKey, TDictionaryValue>, Dictionary<TDictionaryKey, TDictionaryValue>, DictionaryBridger<TDictionaryKey, TDictionaryValue>, DictionaryEnumerator<TDictionaryKey, TDictionaryValue>>, DictionaryEnumerator<TDictionaryKey, TDictionaryValue>> GroupJoin<TOutItem, TKeyItem, TDictionaryKey, TDictionaryValue>(this RangeEnumerable source, Dictionary<TDictionaryKey, TDictionaryValue> inner, Func<int, TKeyItem> outerKeySelector, Func<KeyValuePair<TDictionaryKey, TDictionaryValue>, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, KeyValuePair<TDictionaryKey, TDictionaryValue>>, TOutItem> resultSelector)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(inner, nameof(inner));
//            if (outerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(outerKeySelector));
//            if (innerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(innerKeySelector));
//            if (resultSelector == null) throw CommonImplementation.ArgumentNull(nameof(resultSelector));

//            return CommonImplementation.GroupJoinImpl<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, KeyValuePair<TDictionaryKey, TDictionaryValue>, IdentityEnumerable<KeyValuePair<TDictionaryKey, TDictionaryValue>, Dictionary<TDictionaryKey, TDictionaryValue>, DictionaryBridger<TDictionaryKey, TDictionaryValue>, DictionaryEnumerator<TDictionaryKey, TDictionaryValue>>, DictionaryEnumerator<TDictionaryKey, TDictionaryValue>>(ref source, ref bridge, outerKeySelector, innerKeySelector, resultSelector);
//        }

//        public static GroupJoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, KeyValuePair<TDictionaryKey, TDictionaryValue>, IdentityEnumerable<KeyValuePair<TDictionaryKey, TDictionaryValue>, Dictionary<TDictionaryKey, TDictionaryValue>, DictionaryBridger<TDictionaryKey, TDictionaryValue>, DictionaryEnumerator<TDictionaryKey, TDictionaryValue>>, DictionaryEnumerator<TDictionaryKey, TDictionaryValue>> GroupJoin<TOutItem, TKeyItem, TDictionaryKey, TDictionaryValue>(this RangeEnumerable source, Dictionary<TDictionaryKey, TDictionaryValue> inner, Func<int, TKeyItem> outerKeySelector, Func<KeyValuePair<TDictionaryKey, TDictionaryValue>, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, KeyValuePair<TDictionaryKey, TDictionaryValue>>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(inner, nameof(inner));
//            if (outerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(outerKeySelector));
//            if (innerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(innerKeySelector));
//            if (resultSelector == null) throw CommonImplementation.ArgumentNull(nameof(resultSelector));

//            return CommonImplementation.GroupJoinImpl<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, KeyValuePair<TDictionaryKey, TDictionaryValue>, IdentityEnumerable<KeyValuePair<TDictionaryKey, TDictionaryValue>, Dictionary<TDictionaryKey, TDictionaryValue>, DictionaryBridger<TDictionaryKey, TDictionaryValue>, DictionaryEnumerator<TDictionaryKey, TDictionaryValue>>, DictionaryEnumerator<TDictionaryKey, TDictionaryValue>>(ref source, ref bridge, outerKeySelector, innerKeySelector, resultSelector, comparer);
//        }

//        public static GroupJoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, KeyValuePair<TDictionaryKey, TDictionaryValue>, IdentityEnumerable<KeyValuePair<TDictionaryKey, TDictionaryValue>, SortedDictionary<TDictionaryKey, TDictionaryValue>, SortedDictionaryBridger<TDictionaryKey, TDictionaryValue>, SortedDictionaryEnumerator<TDictionaryKey, TDictionaryValue>>, SortedDictionaryEnumerator<TDictionaryKey, TDictionaryValue>> GroupJoin<TOutItem, TKeyItem, TDictionaryKey, TDictionaryValue>(this RangeEnumerable source, SortedDictionary<TDictionaryKey, TDictionaryValue> inner, Func<int, TKeyItem> outerKeySelector, Func<KeyValuePair<TDictionaryKey, TDictionaryValue>, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, KeyValuePair<TDictionaryKey, TDictionaryValue>>, TOutItem> resultSelector)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(inner, nameof(inner));
//            if (outerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(outerKeySelector));
//            if (innerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(innerKeySelector));
//            if (resultSelector == null) throw CommonImplementation.ArgumentNull(nameof(resultSelector));

//            return CommonImplementation.GroupJoinImpl<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, KeyValuePair<TDictionaryKey, TDictionaryValue>, IdentityEnumerable<KeyValuePair<TDictionaryKey, TDictionaryValue>, SortedDictionary<TDictionaryKey, TDictionaryValue>, SortedDictionaryBridger<TDictionaryKey, TDictionaryValue>, SortedDictionaryEnumerator<TDictionaryKey, TDictionaryValue>>, SortedDictionaryEnumerator<TDictionaryKey, TDictionaryValue>>(ref source, ref bridge, outerKeySelector, innerKeySelector, resultSelector);
//        }

//        public static GroupJoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, KeyValuePair<TDictionaryKey, TDictionaryValue>, IdentityEnumerable<KeyValuePair<TDictionaryKey, TDictionaryValue>, SortedDictionary<TDictionaryKey, TDictionaryValue>, SortedDictionaryBridger<TDictionaryKey, TDictionaryValue>, SortedDictionaryEnumerator<TDictionaryKey, TDictionaryValue>>, SortedDictionaryEnumerator<TDictionaryKey, TDictionaryValue>> GroupJoin<TOutItem, TKeyItem, TDictionaryKey, TDictionaryValue>(this RangeEnumerable source, SortedDictionary<TDictionaryKey, TDictionaryValue> inner, Func<int, TKeyItem> outerKeySelector, Func<KeyValuePair<TDictionaryKey, TDictionaryValue>, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, KeyValuePair<TDictionaryKey, TDictionaryValue>>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(inner, nameof(inner));
//            if (outerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(outerKeySelector));
//            if (innerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(innerKeySelector));
//            if (resultSelector == null) throw CommonImplementation.ArgumentNull(nameof(resultSelector));

//            return CommonImplementation.GroupJoinImpl<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, KeyValuePair<TDictionaryKey, TDictionaryValue>, IdentityEnumerable<KeyValuePair<TDictionaryKey, TDictionaryValue>, SortedDictionary<TDictionaryKey, TDictionaryValue>, SortedDictionaryBridger<TDictionaryKey, TDictionaryValue>, SortedDictionaryEnumerator<TDictionaryKey, TDictionaryValue>>, SortedDictionaryEnumerator<TDictionaryKey, TDictionaryValue>>(ref source, ref bridge, outerKeySelector, innerKeySelector, resultSelector, comparer);
//        }

//        public static GroupJoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, GroupingEnumerable<TLookupKey, TLookupElement>, LookupDefaultEnumerable<TLookupKey, TLookupElement>, LookupDefaultEnumerator<TLookupKey, TLookupElement>> GroupJoin<TOutItem, TKeyItem, TLookupKey, TLookupElement>(this RangeEnumerable source, LookupDefaultEnumerable<TLookupKey, TLookupElement> inner, Func<int, TKeyItem> outerKeySelector, Func<GroupingEnumerable<TLookupKey, TLookupElement>, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, GroupingEnumerable<TLookupKey, TLookupElement>>, TOutItem> resultSelector)
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, GroupingEnumerable<TLookupKey, TLookupElement>, LookupDefaultEnumerable<TLookupKey, TLookupElement>, LookupDefaultEnumerator<TLookupKey, TLookupElement>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static GroupJoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, GroupingEnumerable<TLookupKey, TLookupElement>, LookupSpecificEnumerable<TLookupKey, TLookupElement>, LookupSpecificEnumerator<TLookupKey, TLookupElement>> GroupJoin<TOutItem, TKeyItem, TLookupKey, TLookupElement>(this RangeEnumerable source, LookupSpecificEnumerable<TLookupKey, TLookupElement> inner, Func<int, TKeyItem> outerKeySelector, Func<GroupingEnumerable<TLookupKey, TLookupElement>, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, GroupingEnumerable<TLookupKey, TLookupElement>>, TOutItem> resultSelector)
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, GroupingEnumerable<TLookupKey, TLookupElement>, LookupSpecificEnumerable<TLookupKey, TLookupElement>, LookupSpecificEnumerator<TLookupKey, TLookupElement>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static GroupJoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, GroupingEnumerable<TLookupKey, TLookupElement>, LookupDefaultEnumerable<TLookupKey, TLookupElement>, LookupDefaultEnumerator<TLookupKey, TLookupElement>> GroupJoin<TOutItem, TKeyItem, TLookupKey, TLookupElement>(this RangeEnumerable source, LookupDefaultEnumerable<TLookupKey, TLookupElement> inner, Func<int, TKeyItem> outerKeySelector, Func<GroupingEnumerable<TLookupKey, TLookupElement>, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, GroupingEnumerable<TLookupKey, TLookupElement>>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, GroupingEnumerable<TLookupKey, TLookupElement>, LookupDefaultEnumerable<TLookupKey, TLookupElement>, LookupDefaultEnumerator<TLookupKey, TLookupElement>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static GroupJoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, GroupingEnumerable<TLookupKey, TLookupElement>, LookupSpecificEnumerable<TLookupKey, TLookupElement>, LookupSpecificEnumerator<TLookupKey, TLookupElement>> GroupJoin<TOutItem, TKeyItem, TLookupKey, TLookupElement>(this RangeEnumerable source, LookupSpecificEnumerable<TLookupKey, TLookupElement> inner, Func<int, TKeyItem> outerKeySelector, Func<GroupingEnumerable<TLookupKey, TLookupElement>, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, GroupingEnumerable<TLookupKey, TLookupElement>>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, GroupingEnumerable<TLookupKey, TLookupElement>, LookupSpecificEnumerable<TLookupKey, TLookupElement>, LookupSpecificEnumerator<TLookupKey, TLookupElement>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static GroupJoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, OneItemDefaultEnumerable<TRightItem>, OneItemDefaultEnumerator<TRightItem>> GroupJoin<TOutItem, TKeyItem, TRightItem>(this RangeEnumerable source, OneItemDefaultEnumerable<TRightItem> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector)
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, OneItemDefaultEnumerable<TRightItem>, OneItemDefaultEnumerator<TRightItem>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static GroupJoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, OneItemDefaultEnumerable<TRightItem>, OneItemDefaultEnumerator<TRightItem>> GroupJoin<TOutItem, TKeyItem, TRightItem>(this RangeEnumerable source, OneItemDefaultEnumerable<TRightItem> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, OneItemDefaultEnumerable<TRightItem>, OneItemDefaultEnumerator<TRightItem>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static GroupJoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, OneItemSpecificEnumerable<TRightItem>, OneItemSpecificEnumerator<TRightItem>> GroupJoin<TOutItem, TKeyItem, TRightItem>(this RangeEnumerable source, OneItemSpecificEnumerable<TRightItem> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector)
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, OneItemSpecificEnumerable<TRightItem>, OneItemSpecificEnumerator<TRightItem>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static GroupJoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, OneItemSpecificEnumerable<TRightItem>, OneItemSpecificEnumerator<TRightItem>> GroupJoin<TOutItem, TKeyItem, TRightItem>(this RangeEnumerable source, OneItemSpecificEnumerable<TRightItem> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, OneItemSpecificEnumerable<TRightItem>, OneItemSpecificEnumerator<TRightItem>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static GroupJoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, OneItemDefaultOrderedEnumerable<TRightItem>, OneItemDefaultOrderedEnumerator<TRightItem>> GroupJoin<TOutItem, TKeyItem, TRightItem>(this RangeEnumerable source, OneItemDefaultOrderedEnumerable<TRightItem> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector)
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, OneItemDefaultOrderedEnumerable<TRightItem>, OneItemDefaultOrderedEnumerator<TRightItem>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static GroupJoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, OneItemDefaultOrderedEnumerable<TRightItem>, OneItemDefaultOrderedEnumerator<TRightItem>> GroupJoin<TOutItem, TKeyItem, TRightItem>(this RangeEnumerable source, OneItemDefaultOrderedEnumerable<TRightItem> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, OneItemDefaultOrderedEnumerable<TRightItem>, OneItemDefaultOrderedEnumerator<TRightItem>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static GroupJoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, OneItemSpecificOrderedEnumerable<TRightItem>, OneItemSpecificOrderedEnumerator<TRightItem>> GroupJoin<TOutItem, TKeyItem, TRightItem>(this RangeEnumerable source, OneItemSpecificOrderedEnumerable<TRightItem> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector)
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, OneItemSpecificOrderedEnumerable<TRightItem>, OneItemSpecificOrderedEnumerator<TRightItem>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static GroupJoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, OneItemSpecificOrderedEnumerable<TRightItem>, OneItemSpecificOrderedEnumerator<TRightItem>> GroupJoin<TOutItem, TKeyItem, TRightItem>(this RangeEnumerable source, OneItemSpecificOrderedEnumerable<TRightItem> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, OneItemSpecificOrderedEnumerable<TRightItem>, OneItemSpecificOrderedEnumerator<TRightItem>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static GroupJoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, EmptyEnumerable<TRightItem>, EmptyEnumerator<TRightItem>> GroupJoin<TOutItem, TRightItem, TKeyItem>(this RangeEnumerable source, EmptyEnumerable<TRightItem> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector)
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, EmptyEnumerable<TRightItem>, EmptyEnumerator<TRightItem>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static GroupJoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, EmptyEnumerable<TRightItem>, EmptyEnumerator<TRightItem>> GroupJoin<TOutItem, TRightItem, TKeyItem>(this RangeEnumerable source, EmptyEnumerable<TRightItem> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, EmptyEnumerable<TRightItem>, EmptyEnumerator<TRightItem>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static GroupJoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, EmptyOrderedEnumerable<TRightItem>, EmptyOrderedEnumerator<TRightItem>> GroupJoin<TOutItem, TRightItem, TKeyItem>(this RangeEnumerable source, EmptyOrderedEnumerable<TRightItem> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector)
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, EmptyOrderedEnumerable<TRightItem>, EmptyOrderedEnumerator<TRightItem>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static GroupJoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, EmptyOrderedEnumerable<TRightItem>, EmptyOrderedEnumerator<TRightItem>> GroupJoin<TOutItem, TRightItem, TKeyItem>(this RangeEnumerable source, EmptyOrderedEnumerable<TRightItem> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, EmptyOrderedEnumerable<TRightItem>, EmptyOrderedEnumerator<TRightItem>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static GroupJoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SkipLastEnumerable<TRightItem, TSkipEnumerable, TSkipEnumerator>, SkipLastEnumerator<TRightItem, TSkipEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TSkipEnumerable, TSkipEnumerator>(this RangeEnumerable source, SkipLastEnumerable<TRightItem, TSkipEnumerable, TSkipEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector)
//        where TSkipEnumerable : struct, IStructEnumerable<TRightItem, TSkipEnumerator>
//        where TSkipEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SkipLastEnumerable<TRightItem, TSkipEnumerable, TSkipEnumerator>, SkipLastEnumerator<TRightItem, TSkipEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static GroupJoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SkipLastEnumerable<TRightItem, TSkipEnumerable, TSkipEnumerator>, SkipLastEnumerator<TRightItem, TSkipEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TSkipEnumerable, TSkipEnumerator>(this RangeEnumerable source, SkipLastEnumerable<TRightItem, TSkipEnumerable, TSkipEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TSkipEnumerable : struct, IStructEnumerable<TRightItem, TSkipEnumerator>
//        where TSkipEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SkipLastEnumerable<TRightItem, TSkipEnumerable, TSkipEnumerator>, SkipLastEnumerator<TRightItem, TSkipEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static GroupJoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, TakeLastEnumerable<TRightItem, TTakeEnumerable, TTakeEnumerator>, TakeLastEnumerator<TRightItem, TTakeEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TTakeEnumerable, TTakeEnumerator>(this RangeEnumerable source, TakeLastEnumerable<TRightItem, TTakeEnumerable, TTakeEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector)
//        where TTakeEnumerable : struct, IStructEnumerable<TRightItem, TTakeEnumerator>
//        where TTakeEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, TakeLastEnumerable<TRightItem, TTakeEnumerable, TTakeEnumerator>, TakeLastEnumerator<TRightItem, TTakeEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static GroupJoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, TakeLastEnumerable<TRightItem, TTakeEnumerable, TTakeEnumerator>, TakeLastEnumerator<TRightItem, TTakeEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TTakeEnumerable, TTakeEnumerator>(this RangeEnumerable source, TakeLastEnumerable<TRightItem, TTakeEnumerable, TTakeEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TTakeEnumerable : struct, IStructEnumerable<TRightItem, TTakeEnumerator>
//        where TTakeEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, TakeLastEnumerable<TRightItem, TTakeEnumerable, TTakeEnumerator>, TakeLastEnumerator<TRightItem, TTakeEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static GroupJoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, AppendEnumerable<TRightItem, TAppendEnumerable, TAppendEnumerator>, AppendEnumerator<TRightItem, TAppendEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TAppendEnumerable, TAppendEnumerator>(this RangeEnumerable source, AppendEnumerable<TRightItem, TAppendEnumerable, TAppendEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector)
//        where TAppendEnumerable : struct, IStructEnumerable<TRightItem, TAppendEnumerator>
//        where TAppendEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, AppendEnumerable<TRightItem, TAppendEnumerable, TAppendEnumerator>, AppendEnumerator<TRightItem, TAppendEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static GroupJoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, AppendEnumerable<TRightItem, TAppendEnumerable, TAppendEnumerator>, AppendEnumerator<TRightItem, TAppendEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TAppendEnumerable, TAppendEnumerator>(this RangeEnumerable source, AppendEnumerable<TRightItem, TAppendEnumerable, TAppendEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TAppendEnumerable : struct, IStructEnumerable<TRightItem, TAppendEnumerator>
//        where TAppendEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, AppendEnumerable<TRightItem, TAppendEnumerable, TAppendEnumerator>, AppendEnumerator<TRightItem, TAppendEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static GroupJoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, PrependEnumerable<TRightItem, TPrependEnumerable, TPrependEnumerator>, PrependEnumerator<TRightItem, TPrependEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TPrependEnumerable, TPrependEnumerator>(this RangeEnumerable source, PrependEnumerable<TRightItem, TPrependEnumerable, TPrependEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector)
//        where TPrependEnumerable : struct, IStructEnumerable<TRightItem, TPrependEnumerator>
//        where TPrependEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, PrependEnumerable<TRightItem, TPrependEnumerable, TPrependEnumerator>, PrependEnumerator<TRightItem, TPrependEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static GroupJoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, PrependEnumerable<TRightItem, TPrependEnumerable, TPrependEnumerator>, PrependEnumerator<TRightItem, TPrependEnumerator>> GroupJoin<TOutItem, TKeyItem, TRightItem, TPrependEnumerable, TPrependEnumerator>(this RangeEnumerable source, PrependEnumerable<TRightItem, TPrependEnumerable, TPrependEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, GroupedEnumerable<TKeyItem, TRightItem>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TPrependEnumerable : struct, IStructEnumerable<TRightItem, TPrependEnumerator>
//        where TPrependEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.GroupJoin<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, PrependEnumerable<TRightItem, TPrependEnumerable, TPrependEnumerator>, PrependEnumerator<TRightItem, TPrependEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        // Intersect 

//        public static IntersectDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, BoxedEnumerable<int>, BoxedEnumerator<int>> Intersect(this RangeEnumerable source, BoxedEnumerable<int> second)
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, BoxedEnumerable<int>, BoxedEnumerator<int>>(ref source, ref second);

//        public static IntersectDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, IEnumerable<int>, IEnumerableBridger<int>, IdentityEnumerator<int>>, IdentityEnumerator<int>> Intersect(this RangeEnumerable source, IEnumerable<int> second)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(second, nameof(second));

//            return CommonImplementation.IntersectImpl<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, IEnumerable<int>, IEnumerableBridger<int>, IdentityEnumerator<int>>, IdentityEnumerator<int>>(ref source, ref bridge);
//        }

//        public static IntersectDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, Dictionary<int, TDictionaryValue>.KeyCollection, DictionaryKeysBridger<int, TDictionaryValue>, DictionaryKeysEnumerator<int, TDictionaryValue>>, DictionaryKeysEnumerator<int, TDictionaryValue>> Intersect<TDictionaryValue>(this RangeEnumerable source, Dictionary<int, TDictionaryValue>.KeyCollection second)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(second, nameof(second));

//            return CommonImplementation.IntersectImpl<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, Dictionary<int, TDictionaryValue>.KeyCollection, DictionaryKeysBridger<int, TDictionaryValue>, DictionaryKeysEnumerator<int, TDictionaryValue>>, DictionaryKeysEnumerator<int, TDictionaryValue>>(ref source, ref bridge);
//        }

//        public static IntersectDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, Dictionary<TExcept_DictionaryKey, int>.ValueCollection, DictionaryValuesBridger<TExcept_DictionaryKey, int>, DictionaryValuesEnumerator<TExcept_DictionaryKey, int>>, DictionaryValuesEnumerator<TExcept_DictionaryKey, int>> Intersect<TExcept_DictionaryKey>(this RangeEnumerable source, Dictionary<TExcept_DictionaryKey, int>.ValueCollection second)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(second, nameof(second));

//            return CommonImplementation.IntersectImpl<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, Dictionary<TExcept_DictionaryKey, int>.ValueCollection, DictionaryValuesBridger<TExcept_DictionaryKey, int>, DictionaryValuesEnumerator<TExcept_DictionaryKey, int>>, DictionaryValuesEnumerator<TExcept_DictionaryKey, int>>(ref source, ref bridge);
//        }

//        public static IntersectDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, HashSet<int>, HashSetBridger<int>, HashSetEnumerator<int>>, HashSetEnumerator<int>> Intersect(this RangeEnumerable source, HashSet<int> second)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(second, nameof(second));

//            return CommonImplementation.IntersectImpl<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, HashSet<int>, HashSetBridger<int>, HashSetEnumerator<int>>, HashSetEnumerator<int>>(ref source, ref bridge);
//        }

//        public static IntersectDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, LinkedList<int>, LinkedListBridger<int>, LinkedListEnumerator<int>>, LinkedListEnumerator<int>> Intersect(this RangeEnumerable source, LinkedList<int> second)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(second, nameof(second));

//            return CommonImplementation.IntersectImpl<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, LinkedList<int>, LinkedListBridger<int>, LinkedListEnumerator<int>>, LinkedListEnumerator<int>>(ref source, ref bridge);
//        }

//        public static IntersectDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, List<int>, ListBridger<int>, ListEnumerator<int>>, ListEnumerator<int>> Intersect(this RangeEnumerable source, List<int> second)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(second, nameof(second));

//            return CommonImplementation.IntersectImpl<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, List<int>, ListBridger<int>, ListEnumerator<int>>, ListEnumerator<int>>(ref source, ref bridge);
//        }

//        public static IntersectDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, Queue<int>, QueueBridger<int>, QueueEnumerator<int>>, QueueEnumerator<int>> Intersect(this RangeEnumerable source, Queue<int> second)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(second, nameof(second));

//            return CommonImplementation.IntersectImpl<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, Queue<int>, QueueBridger<int>, QueueEnumerator<int>>, QueueEnumerator<int>>(ref source, ref bridge);
//        }

//        public static IntersectDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, SortedDictionary<int, TExcept_DictionaryValue>.KeyCollection, SortedDictionaryKeysBridger<int, TExcept_DictionaryValue>, SortedDictionaryKeysEnumerator<int, TExcept_DictionaryValue>>, SortedDictionaryKeysEnumerator<int, TExcept_DictionaryValue>> Intersect<TExcept_DictionaryValue>(this RangeEnumerable source, SortedDictionary<int, TExcept_DictionaryValue>.KeyCollection second)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(second, nameof(second));

//            return CommonImplementation.IntersectImpl<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, SortedDictionary<int, TExcept_DictionaryValue>.KeyCollection, SortedDictionaryKeysBridger<int, TExcept_DictionaryValue>, SortedDictionaryKeysEnumerator<int, TExcept_DictionaryValue>>, SortedDictionaryKeysEnumerator<int, TExcept_DictionaryValue>>(ref source, ref bridge);
//        }

//        public static IntersectDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, SortedDictionary<TExcept_DictionaryKey, int>.ValueCollection, SortedDictionaryValuesBridger<TExcept_DictionaryKey, int>, SortedDictionaryValuesEnumerator<TExcept_DictionaryKey, int>>, SortedDictionaryValuesEnumerator<TExcept_DictionaryKey, int>> Intersect<TExcept_DictionaryKey>(this RangeEnumerable source, SortedDictionary<TExcept_DictionaryKey, int>.ValueCollection second)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(second, nameof(second));

//            return CommonImplementation.IntersectImpl<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, SortedDictionary<TExcept_DictionaryKey, int>.ValueCollection, SortedDictionaryValuesBridger<TExcept_DictionaryKey, int>, SortedDictionaryValuesEnumerator<TExcept_DictionaryKey, int>>, SortedDictionaryValuesEnumerator<TExcept_DictionaryKey, int>>(ref source, ref bridge);
//        }

//        public static IntersectDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, SortedSet<int>, SortedSetBridger<int>, SortedSetEnumerator<int>>, SortedSetEnumerator<int>> Intersect(this RangeEnumerable source, SortedSet<int> second)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(second, nameof(second));

//            return CommonImplementation.IntersectImpl<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, SortedSet<int>, SortedSetBridger<int>, SortedSetEnumerator<int>>, SortedSetEnumerator<int>>(ref source, ref bridge);
//        }

//        public static IntersectDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, Stack<int>, StackBridger<int>, StackEnumerator<int>>, StackEnumerator<int>> Intersect(this RangeEnumerable source, Stack<int> second)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(second, nameof(second));

//            return CommonImplementation.IntersectImpl<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, Stack<int>, StackBridger<int>, StackEnumerator<int>>, StackEnumerator<int>>(ref source, ref bridge);
//        }

//        public static IntersectDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, int[], ArrayBridger<int>, ArrayEnumerator<int>>, ArrayEnumerator<int>> Intersect(this RangeEnumerable source, int[] second)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(second, nameof(second));

//            return CommonImplementation.IntersectImpl<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, int[], ArrayBridger<int>, ArrayEnumerator<int>>, ArrayEnumerator<int>>(ref source, ref bridge);
//        }

//        public static IntersectDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, TExcept_IdentityBridgeType, TExcept_IdentityBridger, TExcept_IdentityEnumerator>, TExcept_IdentityEnumerator> Intersect<TExcept_IdentityBridgeType, TExcept_IdentityBridger, TExcept_IdentityEnumerator>(this RangeEnumerable source, IdentityEnumerable<int, TExcept_IdentityBridgeType, TExcept_IdentityBridger, TExcept_IdentityEnumerator> second)
//        where TExcept_IdentityBridgeType : class
//        where TExcept_IdentityEnumerator : struct, IStructEnumerator<int>
//        where TExcept_IdentityBridger : struct, IStructBridger<int, TExcept_IdentityBridgeType, TExcept_IdentityEnumerator>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, TExcept_IdentityBridgeType, TExcept_IdentityBridger, TExcept_IdentityEnumerator>, TExcept_IdentityEnumerator>(ref source, ref second);

//        public static IntersectDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, ConcatEnumerable<int, TInnerLeftEnumerable, TInnerLeftEnumerator, TInnerRightEnumerable, TInnerRightEnumerator>, ConcatEnumerator<int, TInnerLeftEnumerator, TInnerRightEnumerator>> Intersect<TInnerLeftEnumerable, TInnerLeftEnumerator, TInnerRightEnumerable, TInnerRightEnumerator>(this RangeEnumerable source, ConcatEnumerable<int, TInnerLeftEnumerable, TInnerLeftEnumerator, TInnerRightEnumerable, TInnerRightEnumerator> second)
//        where TInnerLeftEnumerable : struct, IStructEnumerable<int, TInnerLeftEnumerator>
//        where TInnerLeftEnumerator : struct, IStructEnumerator<int>
//        where TInnerRightEnumerable : struct, IStructEnumerable<int, TInnerRightEnumerator>
//        where TInnerRightEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, ConcatEnumerable<int, TInnerLeftEnumerable, TInnerLeftEnumerator, TInnerRightEnumerable, TInnerRightEnumerator>, ConcatEnumerator<int, TInnerLeftEnumerator, TInnerRightEnumerator>>(ref source, ref second);

//        public static IntersectDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, EmptyEnumerable<int>, EmptyEnumerator<int>> Intersect(this RangeEnumerable source, EmptyEnumerable<int> second)
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, EmptyEnumerable<int>, EmptyEnumerator<int>>(ref source, ref second);

//        public static IntersectDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, RepeatEnumerable<int>, RepeatEnumerator<int>> Intersect(this RangeEnumerable source, RepeatEnumerable<int> second)
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, RepeatEnumerable<int>, RepeatEnumerator<int>>(ref source, ref second);

//        public static IntersectDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, SelectEnumerable<TExcept_SelectInItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, SelectEnumerator<TExcept_SelectInItem, int, TExcept_InnerEnumerator>> Intersect<TExcept_SelectInItem, TExcept_InnerEnumerable, TExcept_InnerEnumerator>(this RangeEnumerable source, SelectEnumerable<TExcept_SelectInItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator> second)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<TExcept_SelectInItem, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<TExcept_SelectInItem>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, SelectEnumerable<TExcept_SelectInItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, SelectEnumerator<TExcept_SelectInItem, int, TExcept_InnerEnumerator>>(ref source, ref second);

//        public static IntersectDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, SelectIndexedEnumerable<TExcept_SelectInItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, SelectIndexedEnumerator<TExcept_SelectInItem, int, TExcept_InnerEnumerator>> Intersect<TExcept_SelectInItem, TExcept_InnerEnumerable, TExcept_InnerEnumerator>(this RangeEnumerable source, SelectIndexedEnumerable<TExcept_SelectInItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator> second)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<TExcept_SelectInItem, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<TExcept_SelectInItem>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, SelectIndexedEnumerable<TExcept_SelectInItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, SelectIndexedEnumerator<TExcept_SelectInItem, int, TExcept_InnerEnumerator>>(ref source, ref second);

//        public static IntersectDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, SelectManyBridgeEnumerable<TExcept_SelectManyInItem, int, TExcept_BridgeType, TExcept_Bridger, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_ProjectedEnumerator>, SelectManyBridgeEnumerator<TExcept_SelectManyInItem, int, TExcept_BridgeType, TExcept_Bridger, TExcept_InnerEnumerator, TExcept_ProjectedEnumerator>> Intersect<TExcept_SelectManyInItem, TExcept_BridgeType, TExcept_Bridger, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_ProjectedEnumerator>(this RangeEnumerable source, SelectManyBridgeEnumerable<TExcept_SelectManyInItem, int, TExcept_BridgeType, TExcept_Bridger, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_ProjectedEnumerator> second)
//        where TExcept_BridgeType : class
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<TExcept_SelectManyInItem, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<TExcept_SelectManyInItem>
//        where TExcept_ProjectedEnumerator : struct, IStructEnumerator<int>
//        where TExcept_Bridger : struct, IStructBridger<int, TExcept_BridgeType, TExcept_ProjectedEnumerator>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, SelectManyBridgeEnumerable<TExcept_SelectManyInItem, int, TExcept_BridgeType, TExcept_Bridger, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_ProjectedEnumerator>, SelectManyBridgeEnumerator<TExcept_SelectManyInItem, int, TExcept_BridgeType, TExcept_Bridger, TExcept_InnerEnumerator, TExcept_ProjectedEnumerator>>(ref source, ref second);

//        public static IntersectDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, SelectManyIndexedBridgeEnumerable<TExcept_SelectManyInItem, int, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerator>, SelectManyIndexedBridgeEnumerator<TExcept_SelectManyInItem, int, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerator>> Intersect<TExcept_SelectManyInItem, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyIndexedBridgeEnumerable<TExcept_SelectManyInItem, int, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerator> second)
//        where TExcept_SelectManyBridgeType : class
//        where TExcept_SelectManyInnerEnumerable : struct, IStructEnumerable<TExcept_SelectManyInItem, TExcept_SelectManyInnerEnumerator>
//        where TExcept_SelectManyInnerEnumerator : struct, IStructEnumerator<TExcept_SelectManyInItem>
//        where TExcept_SelectManyProjectedEnumerator : struct, IStructEnumerator<int>
//        where TExcept_Bridger : struct, IStructBridger<int, TExcept_SelectManyBridgeType, TExcept_SelectManyProjectedEnumerator>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, SelectManyIndexedBridgeEnumerable<TExcept_SelectManyInItem, int, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerator>, SelectManyIndexedBridgeEnumerator<TExcept_SelectManyInItem, int, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerator>>(ref source, ref second);

//        public static IntersectDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, SelectManyCollectionBridgeEnumerable<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_SelectManyProjectedEnumerator>, SelectManyCollectionBridgeEnumerator<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_InnerEnumerator, TExcept_SelectManyProjectedEnumerator>> Intersect<TExcept_SelectManyInItem, TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_SelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyCollectionBridgeEnumerable<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_SelectManyProjectedEnumerator> second)
//        where TExcept_SelectManyBridgeType : class
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<TExcept_SelectManyInItem, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<TExcept_SelectManyInItem>
//        where TExcept_SelectManyProjectedEnumerator : struct, IStructEnumerator<TExcept_CollectionItem>
//        where TExcept_Bridger : struct, IStructBridger<TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_SelectManyProjectedEnumerator>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, SelectManyCollectionBridgeEnumerable<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_SelectManyProjectedEnumerator>, SelectManyCollectionBridgeEnumerator<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_InnerEnumerator, TExcept_SelectManyProjectedEnumerator>>(ref source, ref second);

//        public static IntersectDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, SelectManyCollectionIndexedBridgeEnumerable<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerator>, SelectManyCollectionIndexedBridgeEnumerator<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerator>> Intersect<TExcept_SelectManyInItem, TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyCollectionIndexedBridgeEnumerable<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerator> second)
//        where TExcept_SelectManyBridgeType : class
//        where TExcept_SelectManyInnerEnumerable : struct, IStructEnumerable<TExcept_SelectManyInItem, TExcept_SelectManyInnerEnumerator>
//        where TExcept_SelectManyInnerEnumerator : struct, IStructEnumerator<TExcept_SelectManyInItem>
//        where TExcept_SelectManyProjectedEnumerator : struct, IStructEnumerator<TExcept_CollectionItem>
//        where TExcept_Bridger : struct, IStructBridger<TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_SelectManyProjectedEnumerator>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, SelectManyCollectionIndexedBridgeEnumerable<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerator>, SelectManyCollectionIndexedBridgeEnumerator<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerator>>(ref source, ref second);

//        public static IntersectDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, SelectManyEnumerable<TExcept_SelectManyInItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_ProjectedEnumerable, TExcept_ProjectedEnumerator>, SelectManyEnumerator<TExcept_SelectManyInItem, int, TExcept_InnerEnumerator, TExcept_ProjectedEnumerable, TExcept_ProjectedEnumerator>> Intersect<TExcept_SelectManyInItem, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_ProjectedEnumerable, TExcept_ProjectedEnumerator>(this RangeEnumerable source, SelectManyEnumerable<TExcept_SelectManyInItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_ProjectedEnumerable, TExcept_ProjectedEnumerator> second)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<TExcept_SelectManyInItem, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<TExcept_SelectManyInItem>
//        where TExcept_ProjectedEnumerable : struct, IStructEnumerable<int, TExcept_ProjectedEnumerator>
//        where TExcept_ProjectedEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, SelectManyEnumerable<TExcept_SelectManyInItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_ProjectedEnumerable, TExcept_ProjectedEnumerator>, SelectManyEnumerator<TExcept_SelectManyInItem, int, TExcept_InnerEnumerator, TExcept_ProjectedEnumerable, TExcept_ProjectedEnumerator>>(ref source, ref second);

//        public static IntersectDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, SelectManyIndexedEnumerable<TExcept_SelectManyInItem, int, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerable, TExcept_SelectManyProjectedEnumerator>, SelectManyIndexedEnumerator<TExcept_SelectManyInItem, int, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerable, TExcept_SelectManyProjectedEnumerator>> Intersect<TExcept_SelectManyInItem, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerable, TExcept_SelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyIndexedEnumerable<TExcept_SelectManyInItem, int, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerable, TExcept_SelectManyProjectedEnumerator> second)
//        where TExcept_SelectManyInnerEnumerable : struct, IStructEnumerable<TExcept_SelectManyInItem, TExcept_SelectManyInnerEnumerator>
//        where TExcept_SelectManyInnerEnumerator : struct, IStructEnumerator<TExcept_SelectManyInItem>
//        where TExcept_SelectManyProjectedEnumerable : struct, IStructEnumerable<int, TExcept_SelectManyProjectedEnumerator>
//        where TExcept_SelectManyProjectedEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, SelectManyIndexedEnumerable<TExcept_SelectManyInItem, int, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerable, TExcept_SelectManyProjectedEnumerator>, SelectManyIndexedEnumerator<TExcept_SelectManyInItem, int, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerable, TExcept_SelectManyProjectedEnumerator>>(ref source, ref second);

//        public static IntersectDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, SelectManyCollectionEnumerable<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_ProjectedEnumerable, TExcept_ProjectedEnumerator>, SelectManyCollectionEnumerator<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_InnerEnumerator, TExcept_ProjectedEnumerable, TExcept_ProjectedEnumerator>> Intersect<TExcept_SelectManyInItem, TExcept_CollectionItem, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_ProjectedEnumerable, TExcept_ProjectedEnumerator>(this RangeEnumerable source, SelectManyCollectionEnumerable<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_ProjectedEnumerable, TExcept_ProjectedEnumerator> second)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<TExcept_SelectManyInItem, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<TExcept_SelectManyInItem>
//        where TExcept_ProjectedEnumerable : struct, IStructEnumerable<TExcept_CollectionItem, TExcept_ProjectedEnumerator>
//        where TExcept_ProjectedEnumerator : struct, IStructEnumerator<TExcept_CollectionItem>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, SelectManyCollectionEnumerable<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_ProjectedEnumerable, TExcept_ProjectedEnumerator>, SelectManyCollectionEnumerator<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_InnerEnumerator, TExcept_ProjectedEnumerable, TExcept_ProjectedEnumerator>>(ref source, ref second);

//        public static IntersectDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, SelectManyCollectionIndexedEnumerable<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerable, TExcept_SelectManyProjectedEnumerator>, SelectManyCollectionIndexedEnumerator<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerable, TExcept_SelectManyProjectedEnumerator>> Intersect<TExcept_SelectManyInItem, TExcept_CollectionItem, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerable, TExcept_SelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyCollectionIndexedEnumerable<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerable, TExcept_SelectManyProjectedEnumerator> second)
//        where TExcept_SelectManyInnerEnumerable : struct, IStructEnumerable<TExcept_SelectManyInItem, TExcept_SelectManyInnerEnumerator>
//        where TExcept_SelectManyInnerEnumerator : struct, IStructEnumerator<TExcept_SelectManyInItem>
//        where TExcept_SelectManyProjectedEnumerable : struct, IStructEnumerable<TExcept_CollectionItem, TExcept_SelectManyProjectedEnumerator>
//        where TExcept_SelectManyProjectedEnumerator : struct, IStructEnumerator<TExcept_CollectionItem>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, SelectManyCollectionIndexedEnumerable<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerable, TExcept_SelectManyProjectedEnumerator>, SelectManyCollectionIndexedEnumerator<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerable, TExcept_SelectManyProjectedEnumerator>>(ref source, ref second);

//        public static IntersectDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, WhereEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, WhereEnumerator<int, TExcept_InnerEnumerator>> Intersect<TExcept_InnerEnumerable, TExcept_InnerEnumerator>(this RangeEnumerable source, WhereEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator> second)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<int, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, WhereEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, WhereEnumerator<int, TExcept_InnerEnumerator>>(ref source, ref second);

//        public static IntersectDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, WhereIndexedEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, WhereIndexedEnumerator<int, TExcept_InnerEnumerator>> Intersect<TExcept_InnerEnumerable, TExcept_InnerEnumerator>(this RangeEnumerable source, WhereIndexedEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator> second)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<int, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, WhereIndexedEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, WhereIndexedEnumerator<int, TExcept_InnerEnumerator>>(ref source, ref second);

//        public static IntersectDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, DefaultIfEmptyDefaultEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, DefaultIfEmptyDefaultEnumerator<int, TExcept_InnerEnumerator>> Intersect<TExcept_InnerEnumerable, TExcept_InnerEnumerator>(this RangeEnumerable source, DefaultIfEmptyDefaultEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator> second)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<int, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, DefaultIfEmptyDefaultEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, DefaultIfEmptyDefaultEnumerator<int, TExcept_InnerEnumerator>>(ref source, ref second);

//        public static IntersectDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, DefaultIfEmptySpecificEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, DefaultIfEmptySpecificEnumerator<int, TExcept_InnerEnumerator>> Intersect<TExcept_InnerEnumerable, TExcept_InnerEnumerator>(this RangeEnumerable source, DefaultIfEmptySpecificEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator> second)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<int, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, DefaultIfEmptySpecificEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, DefaultIfEmptySpecificEnumerator<int, TExcept_InnerEnumerator>>(ref source, ref second);

//        public static IntersectDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, TakeEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, TakeEnumerator<int, TExcept_InnerEnumerator>> Intersect<TExcept_InnerEnumerable, TExcept_InnerEnumerator>(this RangeEnumerable source, TakeEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator> second)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<int, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, TakeEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, TakeEnumerator<int, TExcept_InnerEnumerator>>(ref source, ref second);

//        public static IntersectDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, TakeWhileEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, TakeWhileEnumerator<int, TExcept_InnerEnumerator>> Intersect<TExcept_InnerEnumerable, TExcept_InnerEnumerator>(this RangeEnumerable source, TakeWhileEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator> second)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<int, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, TakeWhileEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, TakeWhileEnumerator<int, TExcept_InnerEnumerator>>(ref source, ref second);

//        public static IntersectDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, TakeWhileIndexedEnumerable<int, TInnerEnumerable, TInnerEnumerator>, TakeWhileIndexedEnumerator<int, TInnerEnumerator>> Intersect<TInnerEnumerable, TInnerEnumerator>(this RangeEnumerable source, TakeWhileIndexedEnumerable<int, TInnerEnumerable, TInnerEnumerator> second)
//        where TInnerEnumerable : struct, IStructEnumerable<int, TInnerEnumerator>
//        where TInnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, TakeWhileIndexedEnumerable<int, TInnerEnumerable, TInnerEnumerator>, TakeWhileIndexedEnumerator<int, TInnerEnumerator>>(ref source, ref second);

//        public static IntersectDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, SkipEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, SkipEnumerator<int, TExcept_InnerEnumerator>> Intersect<TExcept_InnerEnumerable, TExcept_InnerEnumerator>(this RangeEnumerable source, SkipEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator> second)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<int, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, SkipEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, SkipEnumerator<int, TExcept_InnerEnumerator>>(ref source, ref second);

//        public static IntersectDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, SkipWhileEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, SkipWhileEnumerator<int, TExcept_InnerEnumerator>> Intersect<TExcept_InnerEnumerable, TExcept_InnerEnumerator>(this RangeEnumerable source, SkipWhileEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator> second)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<int, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, SkipWhileEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, SkipWhileEnumerator<int, TExcept_InnerEnumerator>>(ref source, ref second);

//        public static IntersectDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, SkipWhileIndexedEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, SkipWhileIndexedEnumerator<int, TExcept_InnerEnumerator>> Intersect<TExcept_InnerEnumerable, TExcept_InnerEnumerator>(this RangeEnumerable source, SkipWhileIndexedEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator> second)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<int, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, SkipWhileIndexedEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, SkipWhileIndexedEnumerator<int, TExcept_InnerEnumerator>>(ref source, ref second);

//        public static IntersectDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, CastEnumerable<TExcept_InItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, CastEnumerator<TExcept_InItem, int, TExcept_InnerEnumerator>> Intersect<TExcept_InItem, TExcept_InnerEnumerable, TExcept_InnerEnumerator>(this RangeEnumerable source, CastEnumerable<TExcept_InItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator> second)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<TExcept_InItem, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<TExcept_InItem>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, CastEnumerable<TExcept_InItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, CastEnumerator<TExcept_InItem, int, TExcept_InnerEnumerator>>(ref source, ref second);

//        public static IntersectDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, OfTypeEnumerable<TExcept_InItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, OfTypeEnumerator<TExcept_InItem, int, TExcept_InnerEnumerator>> Intersect<TExcept_InItem, TExcept_InnerEnumerable, TExcept_InnerEnumerator>(this RangeEnumerable source, OfTypeEnumerable<TExcept_InItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator> second)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<TExcept_InItem, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<TExcept_InItem>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, OfTypeEnumerable<TExcept_InItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, OfTypeEnumerator<TExcept_InItem, int, TExcept_InnerEnumerator>>(ref source, ref second);

//        public static IntersectDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, ZipEnumerable<int, TExcept_ZipFirsint, TExcept_ZipSecondItem, TExcept_ZipFirstEnumerable, TExcept_ZipFirstEnumerator, TExcept_ZipSecondEnumerable, TExcept_ZipSecondEnumerator>, ZipEnumerator<int, TExcept_ZipFirsint, TExcept_ZipSecondItem, TExcept_ZipFirstEnumerator, TExcept_ZipSecondEnumerator>> Intersect<TExcept_ZipFirsint, TExcept_ZipSecondItem, TExcept_ZipFirstEnumerable, TExcept_ZipFirstEnumerator, TExcept_ZipSecondEnumerable, TExcept_ZipSecondEnumerator>(this RangeEnumerable source, ZipEnumerable<int, TExcept_ZipFirsint, TExcept_ZipSecondItem, TExcept_ZipFirstEnumerable, TExcept_ZipFirstEnumerator, TExcept_ZipSecondEnumerable, TExcept_ZipSecondEnumerator> second)
//        where TExcept_ZipFirstEnumerable : struct, IStructEnumerable<TExcept_ZipFirsint, TExcept_ZipFirstEnumerator>
//        where TExcept_ZipFirstEnumerator : struct, IStructEnumerator<TExcept_ZipFirsint>
//        where TExcept_ZipSecondEnumerable : struct, IStructEnumerable<TExcept_ZipSecondItem, TExcept_ZipSecondEnumerator>
//        where TExcept_ZipSecondEnumerator : struct, IStructEnumerator<TExcept_ZipSecondItem>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, ZipEnumerable<int, TExcept_ZipFirsint, TExcept_ZipSecondItem, TExcept_ZipFirstEnumerable, TExcept_ZipFirstEnumerator, TExcept_ZipSecondEnumerable, TExcept_ZipSecondEnumerator>, ZipEnumerator<int, TExcept_ZipFirsint, TExcept_ZipSecondItem, TExcept_ZipFirstEnumerator, TExcept_ZipSecondEnumerator>>(ref source, ref second);

//        public static IntersectDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, SelectSelectEnumerable<int, TExcept_SelectInnerItem, TExcept_SelectInnerEnumerable, TExcept_SelectInnerEnumerator, TExcept_SelectProjection>, SelectSelectEnumerator<int, TExcept_SelectInnerItem, TExcept_SelectInnerEnumerator, TExcept_SelectProjection>> Intersect<TExcept_SelectInnerItem, TExcept_SelectInnerEnumerable, TExcept_SelectInnerEnumerator, TExcept_SelectProjection>(this RangeEnumerable source, SelectSelectEnumerable<int, TExcept_SelectInnerItem, TExcept_SelectInnerEnumerable, TExcept_SelectInnerEnumerator, TExcept_SelectProjection> second)
//        where TExcept_SelectInnerEnumerable : struct, IStructEnumerable<TExcept_SelectInnerItem, TExcept_SelectInnerEnumerator>
//        where TExcept_SelectInnerEnumerator : struct, IStructEnumerator<TExcept_SelectInnerItem>
//        where TExcept_SelectProjection : struct, IStructProjection<int, TExcept_SelectInnerItem>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, SelectSelectEnumerable<int, TExcept_SelectInnerItem, TExcept_SelectInnerEnumerable, TExcept_SelectInnerEnumerator, TExcept_SelectProjection>, SelectSelectEnumerator<int, TExcept_SelectInnerItem, TExcept_SelectInnerEnumerator, TExcept_SelectProjection>>(ref source, ref second);

//        public static IntersectDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, SelectWhereEnumerable<int, TExcept_SelectInnerItem, TExcept_SelectInnerEnumerable, TExcept_SelectInnerEnumerator, TExcept_SelectProjection, TExcept_SelectPredicate>, SelectWhereEnumerator<int, TExcept_SelectInnerItem, TExcept_SelectInnerEnumerator, TExcept_SelectProjection, TExcept_SelectPredicate>> Intersect<TExcept_SelectInnerItem, TExcept_SelectInnerEnumerable, TExcept_SelectInnerEnumerator, TExcept_SelectProjection, TExcept_SelectPredicate>(this RangeEnumerable source, SelectWhereEnumerable<int, TExcept_SelectInnerItem, TExcept_SelectInnerEnumerable, TExcept_SelectInnerEnumerator, TExcept_SelectProjection, TExcept_SelectPredicate> second)
//        where TExcept_SelectInnerEnumerable : struct, IStructEnumerable<TExcept_SelectInnerItem, TExcept_SelectInnerEnumerator>
//        where TExcept_SelectInnerEnumerator : struct, IStructEnumerator<TExcept_SelectInnerItem>
//        where TExcept_SelectProjection : struct, IStructProjection<int, TExcept_SelectInnerItem>
//        where TExcept_SelectPredicate : struct, IStructPredicate<int>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, SelectWhereEnumerable<int, TExcept_SelectInnerItem, TExcept_SelectInnerEnumerable, TExcept_SelectInnerEnumerator, TExcept_SelectProjection, TExcept_SelectPredicate>, SelectWhereEnumerator<int, TExcept_SelectInnerItem, TExcept_SelectInnerEnumerator, TExcept_SelectProjection, TExcept_SelectPredicate>>(ref source, ref second);

//        public static IntersectDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, WhereWhereEnumerable<int, TExcept_WhereInnerEnumerable, TExcept_WhereInnerEnumerator, TExcept_WherePredicate>, WhereWhereEnumerator<int, TExcept_WhereInnerEnumerator, TExcept_WherePredicate>> Intersect<TExcept_WhereInnerEnumerable, TExcept_WhereInnerEnumerator, TExcept_WherePredicate>(this RangeEnumerable source, WhereWhereEnumerable<int, TExcept_WhereInnerEnumerable, TExcept_WhereInnerEnumerator, TExcept_WherePredicate> second)
//        where TExcept_WhereInnerEnumerable : struct, IStructEnumerable<int, TExcept_WhereInnerEnumerator>
//        where TExcept_WhereInnerEnumerator : struct, IStructEnumerator<int>
//        where TExcept_WherePredicate : struct, IStructPredicate<int>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, WhereWhereEnumerable<int, TExcept_WhereInnerEnumerable, TExcept_WhereInnerEnumerator, TExcept_WherePredicate>, WhereWhereEnumerator<int, TExcept_WhereInnerEnumerator, TExcept_WherePredicate>>(ref source, ref second);

//        public static IntersectDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, WhereSelectEnumerable<int, TExcept_WhereInnerItem, TExcept_WhereInnerEnumerable, TExcept_WhereInnerEnumerator, TExcept_WherePredicate, TExcept_WhereProjection>, WhereSelectEnumerator<int, TExcept_WhereInnerItem, TExcept_WhereInnerEnumerator, TExcept_WherePredicate, TExcept_WhereProjection>> Intersect<TExcept_WhereInnerItem, TExcept_WhereInnerEnumerable, TExcept_WhereInnerEnumerator, TExcept_WherePredicate, TExcept_WhereProjection>(this RangeEnumerable source, WhereSelectEnumerable<int, TExcept_WhereInnerItem, TExcept_WhereInnerEnumerable, TExcept_WhereInnerEnumerator, TExcept_WherePredicate, TExcept_WhereProjection> second)
//        where TExcept_WhereInnerEnumerable : struct, IStructEnumerable<TExcept_WhereInnerItem, TExcept_WhereInnerEnumerator>
//        where TExcept_WhereInnerEnumerator : struct, IStructEnumerator<TExcept_WhereInnerItem>
//        where TExcept_WherePredicate : struct, IStructPredicate<TExcept_WhereInnerItem>
//        where TExcept_WhereProjection : struct, IStructProjection<int, TExcept_WhereInnerItem>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, WhereSelectEnumerable<int, TExcept_WhereInnerItem, TExcept_WhereInnerEnumerable, TExcept_WhereInnerEnumerator, TExcept_WherePredicate, TExcept_WhereProjection>, WhereSelectEnumerator<int, TExcept_WhereInnerItem, TExcept_WhereInnerEnumerator, TExcept_WherePredicate, TExcept_WhereProjection>>(ref source, ref second);

//        public static IntersectDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, DistinctDefaultEnumerable<int, TExcept_DistinctInnerEnumerable, TExcept_DistinctInnerEnumerator>, DistinctDefaultEnumerator<int, TExcept_DistinctInnerEnumerator>> Intersect<TExcept_DistinctInnerEnumerable, TExcept_DistinctInnerEnumerator>(this RangeEnumerable source, DistinctDefaultEnumerable<int, TExcept_DistinctInnerEnumerable, TExcept_DistinctInnerEnumerator> second)
//        where TExcept_DistinctInnerEnumerable : struct, IStructEnumerable<int, TExcept_DistinctInnerEnumerator>
//        where TExcept_DistinctInnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, DistinctDefaultEnumerable<int, TExcept_DistinctInnerEnumerable, TExcept_DistinctInnerEnumerator>, DistinctDefaultEnumerator<int, TExcept_DistinctInnerEnumerator>>(ref source, ref second);

//        public static IntersectDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, DistinctSpecificEnumerable<int, TExcept_DistinctInnerEnumerable, TExcept_DistinctInnerEnumerator>, DistinctSpecificEnumerator<int, TExcept_DistinctInnerEnumerator>> Intersect<TExcept_DistinctInnerEnumerable, TExcept_DistinctInnerEnumerator>(this RangeEnumerable source, DistinctSpecificEnumerable<int, TExcept_DistinctInnerEnumerable, TExcept_DistinctInnerEnumerator> second)
//        where TExcept_DistinctInnerEnumerable : struct, IStructEnumerable<int, TExcept_DistinctInnerEnumerator>
//        where TExcept_DistinctInnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, DistinctSpecificEnumerable<int, TExcept_DistinctInnerEnumerable, TExcept_DistinctInnerEnumerator>, DistinctSpecificEnumerator<int, TExcept_DistinctInnerEnumerator>>(ref source, ref second);

//        public static IntersectDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, EmptyEnumerable<int>, EmptyEnumerator<int>> Intersect(this RangeEnumerable source, EmptyOrderedEnumerable<int> second)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            if (second.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(second));

//            var empty = EmptyCache<int>.Empty;
//            return CommonImplementation.IntersectImpl<int, RangeEnumerable, RangeEnumerator, EmptyEnumerable<int>, EmptyEnumerator<int>>(ref source, ref empty);
//        }

//        public static IntersectDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, ExceptDefaultEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>, ExceptDefaultEnumerator<int, TExceptFirstEnumerator, TExceptSecondEnumerator>> Intersect<TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>(this RangeEnumerable source, ExceptDefaultEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator> second)
//        where TExceptFirstEnumerable : struct, IStructEnumerable<int, TExceptFirstEnumerator>
//        where TExceptFirstEnumerator : struct, IStructEnumerator<int>
//        where TExceptSecondEnumerable : struct, IStructEnumerable<int, TExceptSecondEnumerator>
//        where TExceptSecondEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, ExceptDefaultEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>, ExceptDefaultEnumerator<int, TExceptFirstEnumerator, TExceptSecondEnumerator>>(ref source, ref second);

//        public static IntersectDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, ExceptSpecificEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>, ExceptSpecificEnumerator<int, TExceptFirstEnumerator, TExceptSecondEnumerator>> Intersect<TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>(this RangeEnumerable source, ExceptSpecificEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator> second)
//        where TExceptFirstEnumerable : struct, IStructEnumerable<int, TExceptFirstEnumerator>
//        where TExceptFirstEnumerator : struct, IStructEnumerator<int>
//        where TExceptSecondEnumerable : struct, IStructEnumerable<int, TExceptSecondEnumerator>
//        where TExceptSecondEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, ExceptSpecificEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>, ExceptSpecificEnumerator<int, TExceptFirstEnumerator, TExceptSecondEnumerator>>(ref source, ref second);

//        public static IntersectDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, IntersectDefaultEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>, IntersectDefaultEnumerator<int, TExceptFirstEnumerator, TExceptSecondEnumerator>> Intersect<TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>(this RangeEnumerable source, IntersectDefaultEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator> second)
//        where TExceptFirstEnumerable : struct, IStructEnumerable<int, TExceptFirstEnumerator>
//        where TExceptFirstEnumerator : struct, IStructEnumerator<int>
//        where TExceptSecondEnumerable : struct, IStructEnumerable<int, TExceptSecondEnumerator>
//        where TExceptSecondEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, IntersectDefaultEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>, IntersectDefaultEnumerator<int, TExceptFirstEnumerator, TExceptSecondEnumerator>>(ref source, ref second);

//        public static IntersectDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, IntersectSpecificEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>, IntersectSpecificEnumerator<int, TExceptFirstEnumerator, TExceptSecondEnumerator>> Intersect<TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>(this RangeEnumerable source, IntersectSpecificEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator> second)
//        where TExceptFirstEnumerable : struct, IStructEnumerable<int, TExceptFirstEnumerator>
//        where TExceptFirstEnumerator : struct, IStructEnumerator<int>
//        where TExceptSecondEnumerable : struct, IStructEnumerable<int, TExceptSecondEnumerator>
//        where TExceptSecondEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, IntersectSpecificEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>, IntersectSpecificEnumerator<int, TExceptFirstEnumerator, TExceptSecondEnumerator>>(ref source, ref second);

//        public static IntersectDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, UnionDefaultEnumerable<int, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator>, UnionDefaultEnumerator<int, TUnionFirstEnumerator, TUnionSecondEnumerator>> Intersect<TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator>(this RangeEnumerable source, UnionDefaultEnumerable<int, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator> second)
//        where TUnionFirstEnumerable : struct, IStructEnumerable<int, TUnionFirstEnumerator>
//        where TUnionFirstEnumerator : struct, IStructEnumerator<int>
//        where TUnionSecondEnumerable : struct, IStructEnumerable<int, TUnionSecondEnumerator>
//        where TUnionSecondEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, UnionDefaultEnumerable<int, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator>, UnionDefaultEnumerator<int, TUnionFirstEnumerator, TUnionSecondEnumerator>>(ref source, ref second);

//        public static IntersectDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, UnionSpecificEnumerable<int, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator>, UnionSpecificEnumerator<int, TUnionFirstEnumerator, TUnionSecondEnumerator>> Intersect<TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator>(this RangeEnumerable source, UnionSpecificEnumerable<int, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator> second)
//        where TUnionFirstEnumerable : struct, IStructEnumerable<int, TUnionFirstEnumerator>
//        where TUnionFirstEnumerator : struct, IStructEnumerator<int>
//        where TUnionSecondEnumerable : struct, IStructEnumerable<int, TUnionSecondEnumerator>
//        where TUnionSecondEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, UnionSpecificEnumerable<int, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator>, UnionSpecificEnumerator<int, TUnionFirstEnumerator, TUnionSecondEnumerator>>(ref source, ref second);

//        public static IntersectDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, GroupedEnumerable<TGroupedKey, int>, GroupedEnumerator<int>> Intersect<TGroupedKey>(this RangeEnumerable source, GroupedEnumerable<TGroupedKey, int> second)
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, GroupedEnumerable<TGroupedKey, int>, GroupedEnumerator<int>>(ref source, ref second);

//        public static IntersectDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, GroupingEnumerable<TGroupedKey, int>, GroupingEnumerator<int>> Intersect<TGroupedKey>(this RangeEnumerable source, GroupingEnumerable<TGroupedKey, int> second)
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, GroupingEnumerable<TGroupedKey, int>, GroupingEnumerator<int>>(ref source, ref second);

//        public static IntersectDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, ReverseEnumerable<int, TReverseEnumerable, TReverseEnumerator>, ReverseEnumerator<int>> Intersect<TReverseEnumerable, TReverseEnumerator>(this RangeEnumerable source, ReverseEnumerable<int, TReverseEnumerable, TReverseEnumerator> second)
//        where TReverseEnumerable : struct, IStructEnumerable<int, TReverseEnumerator>
//        where TReverseEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, ReverseEnumerable<int, TReverseEnumerable, TReverseEnumerator>, ReverseEnumerator<int>>(ref source, ref second);

//        public static IntersectDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, OrderByEnumerable<int, TOrderByKey, TOrderByEnumerable, TOrderByEnumerator, TOrderByComparer>, OrderByEnumerator<int, TOrderByKey, TOrderByEnumerator, TOrderByComparer>> Intersect<TOrderByKey, TOrderByEnumerable, TOrderByEnumerator, TOrderByComparer>(this RangeEnumerable source, OrderByEnumerable<int, TOrderByKey, TOrderByEnumerable, TOrderByEnumerator, TOrderByComparer> second)
//        where TOrderByEnumerable : struct, IStructEnumerable<int, TOrderByEnumerator>
//        where TOrderByEnumerator : struct, IStructEnumerator<int>
//        where TOrderByComparer : struct, IStructComparer<int, TOrderByKey>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, OrderByEnumerable<int, TOrderByKey, TOrderByEnumerable, TOrderByEnumerator, TOrderByComparer>, OrderByEnumerator<int, TOrderByKey, TOrderByEnumerator, TOrderByComparer>>(ref source, ref second);

//        public static IntersectDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, GroupJoinDefaultEnumerable<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator>, GroupJoinDefaultEnumerator<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerator>> Intersect<TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator>(this RangeEnumerable source, GroupJoinDefaultEnumerable<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator> second)
//        where TGroupJoinLeftEnumerable : struct, IStructEnumerable<TGroupJoinLefint, TGroupJoinLeftEnumerator>
//        where TGroupJoinLeftEnumerator : struct, IStructEnumerator<TGroupJoinLefint>
//        where TGroupJoinRightEnumerable : struct, IStructEnumerable<TGroupJoinRighint, TGroupJoinRightEnumerator>
//        where TGroupJoinRightEnumerator : struct, IStructEnumerator<TGroupJoinRighint>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, GroupJoinDefaultEnumerable<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator>, GroupJoinDefaultEnumerator<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerator>>(ref source, ref second);

//        public static IntersectDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, GroupJoinSpecificEnumerable<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator>, GroupJoinSpecificEnumerator<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerator>> Intersect<TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator>(this RangeEnumerable source, GroupJoinSpecificEnumerable<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator> second)
//        where TGroupJoinLeftEnumerable : struct, IStructEnumerable<TGroupJoinLefint, TGroupJoinLeftEnumerator>
//        where TGroupJoinLeftEnumerator : struct, IStructEnumerator<TGroupJoinLefint>
//        where TGroupJoinRightEnumerable : struct, IStructEnumerable<TGroupJoinRighint, TGroupJoinRightEnumerator>
//        where TGroupJoinRightEnumerator : struct, IStructEnumerator<TGroupJoinRighint>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, GroupJoinSpecificEnumerable<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator>, GroupJoinSpecificEnumerator<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerator>>(ref source, ref second);

//        public static IntersectDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, GroupByCollectionDefaultEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, int, TGroupByEnumerable, TGroupByEnumerator>, GroupByCollectionDefaultEnumerator<TGroupByInItem, TGroupByKey, TGroupByElement, int, TGroupByEnumerator>> Intersect<TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByEnumerable, TGroupByEnumerator>(this RangeEnumerable source, GroupByCollectionDefaultEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, int, TGroupByEnumerable, TGroupByEnumerator> second)
//        where TGroupByEnumerable : struct, IStructEnumerable<TGroupByInItem, TGroupByEnumerator>
//        where TGroupByEnumerator : struct, IStructEnumerator<TGroupByInItem>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, GroupByCollectionDefaultEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, int, TGroupByEnumerable, TGroupByEnumerator>, GroupByCollectionDefaultEnumerator<TGroupByInItem, TGroupByKey, TGroupByElement, int, TGroupByEnumerator>>(ref source, ref second);

//        public static IntersectDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, GroupByCollectionSpecificEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, int, TGroupByEnumerable, TGroupByEnumerator>, GroupByCollectionSpecificEnumerator<TGroupByInItem, TGroupByKey, TGroupByElement, int, TGroupByEnumerator>> Intersect<TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByEnumerable, TGroupByEnumerator>(this RangeEnumerable source, GroupByCollectionSpecificEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, int, TGroupByEnumerable, TGroupByEnumerator> second)
//        where TGroupByEnumerable : struct, IStructEnumerable<TGroupByInItem, TGroupByEnumerator>
//        where TGroupByEnumerator : struct, IStructEnumerator<TGroupByInItem>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, GroupByCollectionSpecificEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, int, TGroupByEnumerable, TGroupByEnumerator>, GroupByCollectionSpecificEnumerator<TGroupByInItem, TGroupByKey, TGroupByElement, int, TGroupByEnumerator>>(ref source, ref second);

//        public static IntersectDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, JoinDefaultEnumerable<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerable, TJoinRightEnumerator>, JoinDefaultEnumerator<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerator>> Intersect<TJoinKeyItem, TJoinLefint, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerable, TJoinRightEnumerator>(this RangeEnumerable source, JoinDefaultEnumerable<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerable, TJoinRightEnumerator> second)
//        where TJoinLeftEnumerable : struct, IStructEnumerable<TJoinLefint, TJoinLeftEnumerator>
//        where TJoinLeftEnumerator : struct, IStructEnumerator<TJoinLefint>
//        where TJoinRightEnumerable : struct, IStructEnumerable<TJoinRighint, TJoinRightEnumerator>
//        where TJoinRightEnumerator : struct, IStructEnumerator<TJoinRighint>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, JoinDefaultEnumerable<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerable, TJoinRightEnumerator>, JoinDefaultEnumerator<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerator>>(ref source, ref second);

//        public static IntersectDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, JoinSpecificEnumerable<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerable, TJoinRightEnumerator>, JoinSpecificEnumerator<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerator>> Intersect<TJoinKeyItem, TJoinLefint, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerable, TJoinRightEnumerator>(this RangeEnumerable source, JoinSpecificEnumerable<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerable, TJoinRightEnumerator> second)
//        where TJoinLeftEnumerable : struct, IStructEnumerable<TJoinLefint, TJoinLeftEnumerator>
//        where TJoinLeftEnumerator : struct, IStructEnumerator<TJoinLefint>
//        where TJoinRightEnumerable : struct, IStructEnumerable<TJoinRighint, TJoinRightEnumerator>
//        where TJoinRightEnumerator : struct, IStructEnumerator<TJoinRighint>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, JoinSpecificEnumerable<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerable, TJoinRightEnumerator>, JoinSpecificEnumerator<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerator>>(ref source, ref second);

//        public static IntersectSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, BoxedEnumerable<int>, BoxedEnumerator<int>> Intersect(this RangeEnumerable source, BoxedEnumerable<int> second, IEqualityComparer<int> comparer)
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, BoxedEnumerable<int>, BoxedEnumerator<int>>(ref source, ref second, comparer);

//        public static IntersectSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, IEnumerable<int>, IEnumerableBridger<int>, IdentityEnumerator<int>>, IdentityEnumerator<int>> Intersect(this RangeEnumerable source, IEnumerable<int> second, IEqualityComparer<int> comparer)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(second, nameof(second));

//            return CommonImplementation.IntersectImpl<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, IEnumerable<int>, IEnumerableBridger<int>, IdentityEnumerator<int>>, IdentityEnumerator<int>>(ref source, ref bridge, comparer);
//        }

//        public static IntersectSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, Dictionary<int, TDictionaryValue>.KeyCollection, DictionaryKeysBridger<int, TDictionaryValue>, DictionaryKeysEnumerator<int, TDictionaryValue>>, DictionaryKeysEnumerator<int, TDictionaryValue>> Intersect<TDictionaryValue>(this RangeEnumerable source, Dictionary<int, TDictionaryValue>.KeyCollection second, IEqualityComparer<int> comparer)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(second, nameof(second));

//            return CommonImplementation.IntersectImpl<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, Dictionary<int, TDictionaryValue>.KeyCollection, DictionaryKeysBridger<int, TDictionaryValue>, DictionaryKeysEnumerator<int, TDictionaryValue>>, DictionaryKeysEnumerator<int, TDictionaryValue>>(ref source, ref bridge, comparer);
//        }

//        public static IntersectSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, Dictionary<TExcept_DictionaryKey, int>.ValueCollection, DictionaryValuesBridger<TExcept_DictionaryKey, int>, DictionaryValuesEnumerator<TExcept_DictionaryKey, int>>, DictionaryValuesEnumerator<TExcept_DictionaryKey, int>> Intersect<TExcept_DictionaryKey>(this RangeEnumerable source, Dictionary<TExcept_DictionaryKey, int>.ValueCollection second, IEqualityComparer<int> comparer)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(second, nameof(second));

//            return CommonImplementation.IntersectImpl<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, Dictionary<TExcept_DictionaryKey, int>.ValueCollection, DictionaryValuesBridger<TExcept_DictionaryKey, int>, DictionaryValuesEnumerator<TExcept_DictionaryKey, int>>, DictionaryValuesEnumerator<TExcept_DictionaryKey, int>>(ref source, ref bridge, comparer);
//        }

//        public static IntersectSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, HashSet<int>, HashSetBridger<int>, HashSetEnumerator<int>>, HashSetEnumerator<int>> Intersect(this RangeEnumerable source, HashSet<int> second, IEqualityComparer<int> comparer)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(second, nameof(second));

//            return CommonImplementation.IntersectImpl<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, HashSet<int>, HashSetBridger<int>, HashSetEnumerator<int>>, HashSetEnumerator<int>>(ref source, ref bridge, comparer);
//        }

//        public static IntersectSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, LinkedList<int>, LinkedListBridger<int>, LinkedListEnumerator<int>>, LinkedListEnumerator<int>> Intersect(this RangeEnumerable source, LinkedList<int> second, IEqualityComparer<int> comparer)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(second, nameof(second));

//            return CommonImplementation.IntersectImpl<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, LinkedList<int>, LinkedListBridger<int>, LinkedListEnumerator<int>>, LinkedListEnumerator<int>>(ref source, ref bridge, comparer);
//        }

//        public static IntersectSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, List<int>, ListBridger<int>, ListEnumerator<int>>, ListEnumerator<int>> Intersect(this RangeEnumerable source, List<int> second, IEqualityComparer<int> comparer)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(second, nameof(second));

//            return CommonImplementation.IntersectImpl<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, List<int>, ListBridger<int>, ListEnumerator<int>>, ListEnumerator<int>>(ref source, ref bridge, comparer);
//        }

//        public static IntersectSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, Queue<int>, QueueBridger<int>, QueueEnumerator<int>>, QueueEnumerator<int>> Intersect(this RangeEnumerable source, Queue<int> second, IEqualityComparer<int> comparer)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(second, nameof(second));

//            return CommonImplementation.IntersectImpl<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, Queue<int>, QueueBridger<int>, QueueEnumerator<int>>, QueueEnumerator<int>>(ref source, ref bridge, comparer);
//        }

//        public static IntersectSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, SortedDictionary<int, TExcept_DictionaryValue>.KeyCollection, SortedDictionaryKeysBridger<int, TExcept_DictionaryValue>, SortedDictionaryKeysEnumerator<int, TExcept_DictionaryValue>>, SortedDictionaryKeysEnumerator<int, TExcept_DictionaryValue>> Intersect<TExcept_DictionaryValue>(this RangeEnumerable source, SortedDictionary<int, TExcept_DictionaryValue>.KeyCollection second, IEqualityComparer<int> comparer)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(second, nameof(second));

//            return CommonImplementation.IntersectImpl<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, SortedDictionary<int, TExcept_DictionaryValue>.KeyCollection, SortedDictionaryKeysBridger<int, TExcept_DictionaryValue>, SortedDictionaryKeysEnumerator<int, TExcept_DictionaryValue>>, SortedDictionaryKeysEnumerator<int, TExcept_DictionaryValue>>(ref source, ref bridge, comparer);
//        }

//        public static IntersectSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, SortedDictionary<TExcept_DictionaryKey, int>.ValueCollection, SortedDictionaryValuesBridger<TExcept_DictionaryKey, int>, SortedDictionaryValuesEnumerator<TExcept_DictionaryKey, int>>, SortedDictionaryValuesEnumerator<TExcept_DictionaryKey, int>> Intersect<TExcept_DictionaryKey>(this RangeEnumerable source, SortedDictionary<TExcept_DictionaryKey, int>.ValueCollection second, IEqualityComparer<int> comparer)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(second, nameof(second));

//            return CommonImplementation.IntersectImpl<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, SortedDictionary<TExcept_DictionaryKey, int>.ValueCollection, SortedDictionaryValuesBridger<TExcept_DictionaryKey, int>, SortedDictionaryValuesEnumerator<TExcept_DictionaryKey, int>>, SortedDictionaryValuesEnumerator<TExcept_DictionaryKey, int>>(ref source, ref bridge, comparer);
//        }

//        public static IntersectSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, SortedSet<int>, SortedSetBridger<int>, SortedSetEnumerator<int>>, SortedSetEnumerator<int>> Intersect(this RangeEnumerable source, SortedSet<int> second, IEqualityComparer<int> comparer)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(second, nameof(second));

//            return CommonImplementation.IntersectImpl<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, SortedSet<int>, SortedSetBridger<int>, SortedSetEnumerator<int>>, SortedSetEnumerator<int>>(ref source, ref bridge, comparer);
//        }

//        public static IntersectSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, Stack<int>, StackBridger<int>, StackEnumerator<int>>, StackEnumerator<int>> Intersect(this RangeEnumerable source, Stack<int> second, IEqualityComparer<int> comparer)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(second, nameof(second));

//            return CommonImplementation.IntersectImpl<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, Stack<int>, StackBridger<int>, StackEnumerator<int>>, StackEnumerator<int>>(ref source, ref bridge, comparer);
//        }

//        public static IntersectSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, int[], ArrayBridger<int>, ArrayEnumerator<int>>, ArrayEnumerator<int>> Intersect(this RangeEnumerable source, int[] second, IEqualityComparer<int> comparer)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(second, nameof(second));

//            return CommonImplementation.IntersectImpl<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, int[], ArrayBridger<int>, ArrayEnumerator<int>>, ArrayEnumerator<int>>(ref source, ref bridge, comparer);
//        }

//        public static IntersectSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, TExcept_IdentityBridgeType, TExcept_IdentityBridger, TExcept_IdentityEnumerator>, TExcept_IdentityEnumerator> Intersect<TExcept_IdentityBridgeType, TExcept_IdentityBridger, TExcept_IdentityEnumerator>(this RangeEnumerable source, IdentityEnumerable<int, TExcept_IdentityBridgeType, TExcept_IdentityBridger, TExcept_IdentityEnumerator> second, IEqualityComparer<int> comparer)
//        where TExcept_IdentityBridgeType : class
//        where TExcept_IdentityEnumerator : struct, IStructEnumerator<int>
//        where TExcept_IdentityBridger : struct, IStructBridger<int, TExcept_IdentityBridgeType, TExcept_IdentityEnumerator>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, TExcept_IdentityBridgeType, TExcept_IdentityBridger, TExcept_IdentityEnumerator>, TExcept_IdentityEnumerator>(ref source, ref second, comparer);

//        public static IntersectSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, ConcatEnumerable<int, TInnerLeftEnumerable, TInnerLeftEnumerator, TInnerRightEnumerable, TInnerRightEnumerator>, ConcatEnumerator<int, TInnerLeftEnumerator, TInnerRightEnumerator>> Intersect<TInnerLeftEnumerable, TInnerLeftEnumerator, TInnerRightEnumerable, TInnerRightEnumerator>(this RangeEnumerable source, ConcatEnumerable<int, TInnerLeftEnumerable, TInnerLeftEnumerator, TInnerRightEnumerable, TInnerRightEnumerator> second, IEqualityComparer<int> comparer)
//        where TInnerLeftEnumerable : struct, IStructEnumerable<int, TInnerLeftEnumerator>
//        where TInnerLeftEnumerator : struct, IStructEnumerator<int>
//        where TInnerRightEnumerable : struct, IStructEnumerable<int, TInnerRightEnumerator>
//        where TInnerRightEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, ConcatEnumerable<int, TInnerLeftEnumerable, TInnerLeftEnumerator, TInnerRightEnumerable, TInnerRightEnumerator>, ConcatEnumerator<int, TInnerLeftEnumerator, TInnerRightEnumerator>>(ref source, ref second, comparer);

//        public static IntersectSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, EmptyEnumerable<int>, EmptyEnumerator<int>> Intersect(this RangeEnumerable source, EmptyEnumerable<int> second, IEqualityComparer<int> comparer)
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, EmptyEnumerable<int>, EmptyEnumerator<int>>(ref source, ref second, comparer);

//        public static IntersectSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, RepeatEnumerable<int>, RepeatEnumerator<int>> Intersect(this RangeEnumerable source, RepeatEnumerable<int> second, IEqualityComparer<int> comparer)
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, RepeatEnumerable<int>, RepeatEnumerator<int>>(ref source, ref second, comparer);

//        public static IntersectSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, SelectEnumerable<TExcept_SelectInItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, SelectEnumerator<TExcept_SelectInItem, int, TExcept_InnerEnumerator>> Intersect<TExcept_SelectInItem, TExcept_InnerEnumerable, TExcept_InnerEnumerator>(this RangeEnumerable source, SelectEnumerable<TExcept_SelectInItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator> second, IEqualityComparer<int> comparer)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<TExcept_SelectInItem, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<TExcept_SelectInItem>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, SelectEnumerable<TExcept_SelectInItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, SelectEnumerator<TExcept_SelectInItem, int, TExcept_InnerEnumerator>>(ref source, ref second, comparer);

//        public static IntersectSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, SelectIndexedEnumerable<TExcept_SelectInItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, SelectIndexedEnumerator<TExcept_SelectInItem, int, TExcept_InnerEnumerator>> Intersect<TExcept_SelectInItem, TExcept_InnerEnumerable, TExcept_InnerEnumerator>(this RangeEnumerable source, SelectIndexedEnumerable<TExcept_SelectInItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator> second, IEqualityComparer<int> comparer)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<TExcept_SelectInItem, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<TExcept_SelectInItem>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, SelectIndexedEnumerable<TExcept_SelectInItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, SelectIndexedEnumerator<TExcept_SelectInItem, int, TExcept_InnerEnumerator>>(ref source, ref second, comparer);

//        public static IntersectSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, SelectManyBridgeEnumerable<TExcept_SelectManyInItem, int, TExcept_BridgeType, TExcept_Bridger, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_ProjectedEnumerator>, SelectManyBridgeEnumerator<TExcept_SelectManyInItem, int, TExcept_BridgeType, TExcept_Bridger, TExcept_InnerEnumerator, TExcept_ProjectedEnumerator>> Intersect<TExcept_SelectManyInItem, TExcept_BridgeType, TExcept_Bridger, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_ProjectedEnumerator>(this RangeEnumerable source, SelectManyBridgeEnumerable<TExcept_SelectManyInItem, int, TExcept_BridgeType, TExcept_Bridger, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_ProjectedEnumerator> second, IEqualityComparer<int> comparer)
//        where TExcept_BridgeType : class
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<TExcept_SelectManyInItem, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<TExcept_SelectManyInItem>
//        where TExcept_ProjectedEnumerator : struct, IStructEnumerator<int>
//        where TExcept_Bridger : struct, IStructBridger<int, TExcept_BridgeType, TExcept_ProjectedEnumerator>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, SelectManyBridgeEnumerable<TExcept_SelectManyInItem, int, TExcept_BridgeType, TExcept_Bridger, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_ProjectedEnumerator>, SelectManyBridgeEnumerator<TExcept_SelectManyInItem, int, TExcept_BridgeType, TExcept_Bridger, TExcept_InnerEnumerator, TExcept_ProjectedEnumerator>>(ref source, ref second, comparer);

//        public static IntersectSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, SelectManyIndexedBridgeEnumerable<TExcept_SelectManyInItem, int, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerator>, SelectManyIndexedBridgeEnumerator<TExcept_SelectManyInItem, int, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerator>> Intersect<TExcept_SelectManyInItem, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyIndexedBridgeEnumerable<TExcept_SelectManyInItem, int, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerator> second, IEqualityComparer<int> comparer)
//        where TExcept_SelectManyBridgeType : class
//        where TExcept_SelectManyInnerEnumerable : struct, IStructEnumerable<TExcept_SelectManyInItem, TExcept_SelectManyInnerEnumerator>
//        where TExcept_SelectManyInnerEnumerator : struct, IStructEnumerator<TExcept_SelectManyInItem>
//        where TExcept_SelectManyProjectedEnumerator : struct, IStructEnumerator<int>
//        where TExcept_Bridger : struct, IStructBridger<int, TExcept_SelectManyBridgeType, TExcept_SelectManyProjectedEnumerator>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, SelectManyIndexedBridgeEnumerable<TExcept_SelectManyInItem, int, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerator>, SelectManyIndexedBridgeEnumerator<TExcept_SelectManyInItem, int, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerator>>(ref source, ref second, comparer);

//        public static IntersectSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, SelectManyCollectionBridgeEnumerable<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_SelectManyProjectedEnumerator>, SelectManyCollectionBridgeEnumerator<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_InnerEnumerator, TExcept_SelectManyProjectedEnumerator>> Intersect<TExcept_SelectManyInItem, TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_SelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyCollectionBridgeEnumerable<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_SelectManyProjectedEnumerator> second, IEqualityComparer<int> comparer)
//        where TExcept_SelectManyBridgeType : class
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<TExcept_SelectManyInItem, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<TExcept_SelectManyInItem>
//        where TExcept_SelectManyProjectedEnumerator : struct, IStructEnumerator<TExcept_CollectionItem>
//        where TExcept_Bridger : struct, IStructBridger<TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_SelectManyProjectedEnumerator>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, SelectManyCollectionBridgeEnumerable<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_SelectManyProjectedEnumerator>, SelectManyCollectionBridgeEnumerator<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_InnerEnumerator, TExcept_SelectManyProjectedEnumerator>>(ref source, ref second, comparer);

//        public static IntersectSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, SelectManyCollectionIndexedBridgeEnumerable<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerator>, SelectManyCollectionIndexedBridgeEnumerator<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerator>> Intersect<TExcept_SelectManyInItem, TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyCollectionIndexedBridgeEnumerable<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerator> second, IEqualityComparer<int> comparer)
//        where TExcept_SelectManyBridgeType : class
//        where TExcept_SelectManyInnerEnumerable : struct, IStructEnumerable<TExcept_SelectManyInItem, TExcept_SelectManyInnerEnumerator>
//        where TExcept_SelectManyInnerEnumerator : struct, IStructEnumerator<TExcept_SelectManyInItem>
//        where TExcept_SelectManyProjectedEnumerator : struct, IStructEnumerator<TExcept_CollectionItem>
//        where TExcept_Bridger : struct, IStructBridger<TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_SelectManyProjectedEnumerator>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, SelectManyCollectionIndexedBridgeEnumerable<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerator>, SelectManyCollectionIndexedBridgeEnumerator<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerator>>(ref source, ref second, comparer);

//        public static IntersectSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, SelectManyEnumerable<TExcept_SelectManyInItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_ProjectedEnumerable, TExcept_ProjectedEnumerator>, SelectManyEnumerator<TExcept_SelectManyInItem, int, TExcept_InnerEnumerator, TExcept_ProjectedEnumerable, TExcept_ProjectedEnumerator>> Intersect<TExcept_SelectManyInItem, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_ProjectedEnumerable, TExcept_ProjectedEnumerator>(this RangeEnumerable source, SelectManyEnumerable<TExcept_SelectManyInItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_ProjectedEnumerable, TExcept_ProjectedEnumerator> second, IEqualityComparer<int> comparer)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<TExcept_SelectManyInItem, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<TExcept_SelectManyInItem>
//        where TExcept_ProjectedEnumerable : struct, IStructEnumerable<int, TExcept_ProjectedEnumerator>
//        where TExcept_ProjectedEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, SelectManyEnumerable<TExcept_SelectManyInItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_ProjectedEnumerable, TExcept_ProjectedEnumerator>, SelectManyEnumerator<TExcept_SelectManyInItem, int, TExcept_InnerEnumerator, TExcept_ProjectedEnumerable, TExcept_ProjectedEnumerator>>(ref source, ref second, comparer);

//        public static IntersectSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, SelectManyIndexedEnumerable<TExcept_SelectManyInItem, int, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerable, TExcept_SelectManyProjectedEnumerator>, SelectManyIndexedEnumerator<TExcept_SelectManyInItem, int, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerable, TExcept_SelectManyProjectedEnumerator>> Intersect<TExcept_SelectManyInItem, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerable, TExcept_SelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyIndexedEnumerable<TExcept_SelectManyInItem, int, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerable, TExcept_SelectManyProjectedEnumerator> second, IEqualityComparer<int> comparer)
//        where TExcept_SelectManyInnerEnumerable : struct, IStructEnumerable<TExcept_SelectManyInItem, TExcept_SelectManyInnerEnumerator>
//        where TExcept_SelectManyInnerEnumerator : struct, IStructEnumerator<TExcept_SelectManyInItem>
//        where TExcept_SelectManyProjectedEnumerable : struct, IStructEnumerable<int, TExcept_SelectManyProjectedEnumerator>
//        where TExcept_SelectManyProjectedEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, SelectManyIndexedEnumerable<TExcept_SelectManyInItem, int, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerable, TExcept_SelectManyProjectedEnumerator>, SelectManyIndexedEnumerator<TExcept_SelectManyInItem, int, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerable, TExcept_SelectManyProjectedEnumerator>>(ref source, ref second, comparer);

//        public static IntersectSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, SelectManyCollectionEnumerable<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_ProjectedEnumerable, TExcept_ProjectedEnumerator>, SelectManyCollectionEnumerator<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_InnerEnumerator, TExcept_ProjectedEnumerable, TExcept_ProjectedEnumerator>> Intersect<TExcept_SelectManyInItem, TExcept_CollectionItem, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_ProjectedEnumerable, TExcept_ProjectedEnumerator>(this RangeEnumerable source, SelectManyCollectionEnumerable<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_ProjectedEnumerable, TExcept_ProjectedEnumerator> second, IEqualityComparer<int> comparer)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<TExcept_SelectManyInItem, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<TExcept_SelectManyInItem>
//        where TExcept_ProjectedEnumerable : struct, IStructEnumerable<TExcept_CollectionItem, TExcept_ProjectedEnumerator>
//        where TExcept_ProjectedEnumerator : struct, IStructEnumerator<TExcept_CollectionItem>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, SelectManyCollectionEnumerable<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_ProjectedEnumerable, TExcept_ProjectedEnumerator>, SelectManyCollectionEnumerator<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_InnerEnumerator, TExcept_ProjectedEnumerable, TExcept_ProjectedEnumerator>>(ref source, ref second, comparer);

//        public static IntersectSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, SelectManyCollectionIndexedEnumerable<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerable, TExcept_SelectManyProjectedEnumerator>, SelectManyCollectionIndexedEnumerator<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerable, TExcept_SelectManyProjectedEnumerator>> Intersect<TExcept_SelectManyInItem, TExcept_CollectionItem, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerable, TExcept_SelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyCollectionIndexedEnumerable<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerable, TExcept_SelectManyProjectedEnumerator> second, IEqualityComparer<int> comparer)
//        where TExcept_SelectManyInnerEnumerable : struct, IStructEnumerable<TExcept_SelectManyInItem, TExcept_SelectManyInnerEnumerator>
//        where TExcept_SelectManyInnerEnumerator : struct, IStructEnumerator<TExcept_SelectManyInItem>
//        where TExcept_SelectManyProjectedEnumerable : struct, IStructEnumerable<TExcept_CollectionItem, TExcept_SelectManyProjectedEnumerator>
//        where TExcept_SelectManyProjectedEnumerator : struct, IStructEnumerator<TExcept_CollectionItem>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, SelectManyCollectionIndexedEnumerable<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerable, TExcept_SelectManyProjectedEnumerator>, SelectManyCollectionIndexedEnumerator<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerable, TExcept_SelectManyProjectedEnumerator>>(ref source, ref second, comparer);

//        public static IntersectSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, WhereEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, WhereEnumerator<int, TExcept_InnerEnumerator>> Intersect<TExcept_InnerEnumerable, TExcept_InnerEnumerator>(this RangeEnumerable source, WhereEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator> second, IEqualityComparer<int> comparer)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<int, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, WhereEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, WhereEnumerator<int, TExcept_InnerEnumerator>>(ref source, ref second, comparer);

//        public static IntersectSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, WhereIndexedEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, WhereIndexedEnumerator<int, TExcept_InnerEnumerator>> Intersect<TExcept_InnerEnumerable, TExcept_InnerEnumerator>(this RangeEnumerable source, WhereIndexedEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator> second, IEqualityComparer<int> comparer)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<int, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, WhereIndexedEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, WhereIndexedEnumerator<int, TExcept_InnerEnumerator>>(ref source, ref second, comparer);

//        public static IntersectSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, DefaultIfEmptyDefaultEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, DefaultIfEmptyDefaultEnumerator<int, TExcept_InnerEnumerator>> Intersect<TExcept_InnerEnumerable, TExcept_InnerEnumerator>(this RangeEnumerable source, DefaultIfEmptyDefaultEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator> second, IEqualityComparer<int> comparer)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<int, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, DefaultIfEmptyDefaultEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, DefaultIfEmptyDefaultEnumerator<int, TExcept_InnerEnumerator>>(ref source, ref second, comparer);

//        public static IntersectSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, DefaultIfEmptySpecificEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, DefaultIfEmptySpecificEnumerator<int, TExcept_InnerEnumerator>> Intersect<TExcept_InnerEnumerable, TExcept_InnerEnumerator>(this RangeEnumerable source, DefaultIfEmptySpecificEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator> second, IEqualityComparer<int> comparer)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<int, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, DefaultIfEmptySpecificEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, DefaultIfEmptySpecificEnumerator<int, TExcept_InnerEnumerator>>(ref source, ref second, comparer);

//        public static IntersectSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, TakeEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, TakeEnumerator<int, TExcept_InnerEnumerator>> Intersect<TExcept_InnerEnumerable, TExcept_InnerEnumerator>(this RangeEnumerable source, TakeEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator> second, IEqualityComparer<int> comparer)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<int, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, TakeEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, TakeEnumerator<int, TExcept_InnerEnumerator>>(ref source, ref second, comparer);

//        public static IntersectSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, TakeWhileEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, TakeWhileEnumerator<int, TExcept_InnerEnumerator>> Intersect<TExcept_InnerEnumerable, TExcept_InnerEnumerator>(this RangeEnumerable source, TakeWhileEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator> second, IEqualityComparer<int> comparer)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<int, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, TakeWhileEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, TakeWhileEnumerator<int, TExcept_InnerEnumerator>>(ref source, ref second, comparer);

//        public static IntersectSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, TakeWhileIndexedEnumerable<int, TInnerEnumerable, TInnerEnumerator>, TakeWhileIndexedEnumerator<int, TInnerEnumerator>> Intersect<TInnerEnumerable, TInnerEnumerator>(this RangeEnumerable source, TakeWhileIndexedEnumerable<int, TInnerEnumerable, TInnerEnumerator> second, IEqualityComparer<int> comparer)
//        where TInnerEnumerable : struct, IStructEnumerable<int, TInnerEnumerator>
//        where TInnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, TakeWhileIndexedEnumerable<int, TInnerEnumerable, TInnerEnumerator>, TakeWhileIndexedEnumerator<int, TInnerEnumerator>>(ref source, ref second, comparer);

//        public static IntersectSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, SkipEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, SkipEnumerator<int, TExcept_InnerEnumerator>> Intersect<TExcept_InnerEnumerable, TExcept_InnerEnumerator>(this RangeEnumerable source, SkipEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator> second, IEqualityComparer<int> comparer)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<int, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, SkipEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, SkipEnumerator<int, TExcept_InnerEnumerator>>(ref source, ref second, comparer);

//        public static IntersectSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, SkipWhileEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, SkipWhileEnumerator<int, TExcept_InnerEnumerator>> Intersect<TExcept_InnerEnumerable, TExcept_InnerEnumerator>(this RangeEnumerable source, SkipWhileEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator> second, IEqualityComparer<int> comparer)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<int, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, SkipWhileEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, SkipWhileEnumerator<int, TExcept_InnerEnumerator>>(ref source, ref second, comparer);

//        public static IntersectSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, SkipWhileIndexedEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, SkipWhileIndexedEnumerator<int, TExcept_InnerEnumerator>> Intersect<TExcept_InnerEnumerable, TExcept_InnerEnumerator>(this RangeEnumerable source, SkipWhileIndexedEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator> second, IEqualityComparer<int> comparer)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<int, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, SkipWhileIndexedEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, SkipWhileIndexedEnumerator<int, TExcept_InnerEnumerator>>(ref source, ref second, comparer);

//        public static IntersectSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, CastEnumerable<TExcept_InItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, CastEnumerator<TExcept_InItem, int, TExcept_InnerEnumerator>> Intersect<TExcept_InItem, TExcept_InnerEnumerable, TExcept_InnerEnumerator>(this RangeEnumerable source, CastEnumerable<TExcept_InItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator> second, IEqualityComparer<int> comparer)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<TExcept_InItem, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<TExcept_InItem>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, CastEnumerable<TExcept_InItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, CastEnumerator<TExcept_InItem, int, TExcept_InnerEnumerator>>(ref source, ref second, comparer);

//        public static IntersectSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, OfTypeEnumerable<TExcept_InItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, OfTypeEnumerator<TExcept_InItem, int, TExcept_InnerEnumerator>> Intersect<TExcept_InItem, TExcept_InnerEnumerable, TExcept_InnerEnumerator>(this RangeEnumerable source, OfTypeEnumerable<TExcept_InItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator> second, IEqualityComparer<int> comparer)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<TExcept_InItem, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<TExcept_InItem>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, OfTypeEnumerable<TExcept_InItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, OfTypeEnumerator<TExcept_InItem, int, TExcept_InnerEnumerator>>(ref source, ref second, comparer);

//        public static IntersectSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, ZipEnumerable<int, TExcept_ZipFirsint, TExcept_ZipSecondItem, TExcept_ZipFirstEnumerable, TExcept_ZipFirstEnumerator, TExcept_ZipSecondEnumerable, TExcept_ZipSecondEnumerator>, ZipEnumerator<int, TExcept_ZipFirsint, TExcept_ZipSecondItem, TExcept_ZipFirstEnumerator, TExcept_ZipSecondEnumerator>> Intersect<TExcept_ZipFirsint, TExcept_ZipSecondItem, TExcept_ZipFirstEnumerable, TExcept_ZipFirstEnumerator, TExcept_ZipSecondEnumerable, TExcept_ZipSecondEnumerator>(this RangeEnumerable source, ZipEnumerable<int, TExcept_ZipFirsint, TExcept_ZipSecondItem, TExcept_ZipFirstEnumerable, TExcept_ZipFirstEnumerator, TExcept_ZipSecondEnumerable, TExcept_ZipSecondEnumerator> second, IEqualityComparer<int> comparer)
//        where TExcept_ZipFirstEnumerable : struct, IStructEnumerable<TExcept_ZipFirsint, TExcept_ZipFirstEnumerator>
//        where TExcept_ZipFirstEnumerator : struct, IStructEnumerator<TExcept_ZipFirsint>
//        where TExcept_ZipSecondEnumerable : struct, IStructEnumerable<TExcept_ZipSecondItem, TExcept_ZipSecondEnumerator>
//        where TExcept_ZipSecondEnumerator : struct, IStructEnumerator<TExcept_ZipSecondItem>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, ZipEnumerable<int, TExcept_ZipFirsint, TExcept_ZipSecondItem, TExcept_ZipFirstEnumerable, TExcept_ZipFirstEnumerator, TExcept_ZipSecondEnumerable, TExcept_ZipSecondEnumerator>, ZipEnumerator<int, TExcept_ZipFirsint, TExcept_ZipSecondItem, TExcept_ZipFirstEnumerator, TExcept_ZipSecondEnumerator>>(ref source, ref second, comparer);

//        public static IntersectSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, SelectSelectEnumerable<int, TExcept_SelectInnerItem, TExcept_SelectInnerEnumerable, TExcept_SelectInnerEnumerator, TExcept_SelectProjection>, SelectSelectEnumerator<int, TExcept_SelectInnerItem, TExcept_SelectInnerEnumerator, TExcept_SelectProjection>> Intersect<TExcept_SelectInnerItem, TExcept_SelectInnerEnumerable, TExcept_SelectInnerEnumerator, TExcept_SelectProjection>(this RangeEnumerable source, SelectSelectEnumerable<int, TExcept_SelectInnerItem, TExcept_SelectInnerEnumerable, TExcept_SelectInnerEnumerator, TExcept_SelectProjection> second, IEqualityComparer<int> comparer)
//        where TExcept_SelectInnerEnumerable : struct, IStructEnumerable<TExcept_SelectInnerItem, TExcept_SelectInnerEnumerator>
//        where TExcept_SelectInnerEnumerator : struct, IStructEnumerator<TExcept_SelectInnerItem>
//        where TExcept_SelectProjection : struct, IStructProjection<int, TExcept_SelectInnerItem>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, SelectSelectEnumerable<int, TExcept_SelectInnerItem, TExcept_SelectInnerEnumerable, TExcept_SelectInnerEnumerator, TExcept_SelectProjection>, SelectSelectEnumerator<int, TExcept_SelectInnerItem, TExcept_SelectInnerEnumerator, TExcept_SelectProjection>>(ref source, ref second, comparer);

//        public static IntersectSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, SelectWhereEnumerable<int, TExcept_SelectInnerItem, TExcept_SelectInnerEnumerable, TExcept_SelectInnerEnumerator, TExcept_SelectProjection, TExcept_SelectPredicate>, SelectWhereEnumerator<int, TExcept_SelectInnerItem, TExcept_SelectInnerEnumerator, TExcept_SelectProjection, TExcept_SelectPredicate>> Intersect<TExcept_SelectInnerItem, TExcept_SelectInnerEnumerable, TExcept_SelectInnerEnumerator, TExcept_SelectProjection, TExcept_SelectPredicate>(this RangeEnumerable source, SelectWhereEnumerable<int, TExcept_SelectInnerItem, TExcept_SelectInnerEnumerable, TExcept_SelectInnerEnumerator, TExcept_SelectProjection, TExcept_SelectPredicate> second, IEqualityComparer<int> comparer)
//        where TExcept_SelectInnerEnumerable : struct, IStructEnumerable<TExcept_SelectInnerItem, TExcept_SelectInnerEnumerator>
//        where TExcept_SelectInnerEnumerator : struct, IStructEnumerator<TExcept_SelectInnerItem>
//        where TExcept_SelectProjection : struct, IStructProjection<int, TExcept_SelectInnerItem>
//        where TExcept_SelectPredicate : struct, IStructPredicate<int>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, SelectWhereEnumerable<int, TExcept_SelectInnerItem, TExcept_SelectInnerEnumerable, TExcept_SelectInnerEnumerator, TExcept_SelectProjection, TExcept_SelectPredicate>, SelectWhereEnumerator<int, TExcept_SelectInnerItem, TExcept_SelectInnerEnumerator, TExcept_SelectProjection, TExcept_SelectPredicate>>(ref source, ref second, comparer);

//        public static IntersectSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, WhereWhereEnumerable<int, TExcept_WhereInnerEnumerable, TExcept_WhereInnerEnumerator, TExcept_WherePredicate>, WhereWhereEnumerator<int, TExcept_WhereInnerEnumerator, TExcept_WherePredicate>> Intersect<TExcept_WhereInnerEnumerable, TExcept_WhereInnerEnumerator, TExcept_WherePredicate>(this RangeEnumerable source, WhereWhereEnumerable<int, TExcept_WhereInnerEnumerable, TExcept_WhereInnerEnumerator, TExcept_WherePredicate> second, IEqualityComparer<int> comparer)
//        where TExcept_WhereInnerEnumerable : struct, IStructEnumerable<int, TExcept_WhereInnerEnumerator>
//        where TExcept_WhereInnerEnumerator : struct, IStructEnumerator<int>
//        where TExcept_WherePredicate : struct, IStructPredicate<int>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, WhereWhereEnumerable<int, TExcept_WhereInnerEnumerable, TExcept_WhereInnerEnumerator, TExcept_WherePredicate>, WhereWhereEnumerator<int, TExcept_WhereInnerEnumerator, TExcept_WherePredicate>>(ref source, ref second, comparer);

//        public static IntersectSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, WhereSelectEnumerable<int, TExcept_WhereInnerItem, TExcept_WhereInnerEnumerable, TExcept_WhereInnerEnumerator, TExcept_WherePredicate, TExcept_WhereProjection>, WhereSelectEnumerator<int, TExcept_WhereInnerItem, TExcept_WhereInnerEnumerator, TExcept_WherePredicate, TExcept_WhereProjection>> Intersect<TExcept_WhereInnerItem, TExcept_WhereInnerEnumerable, TExcept_WhereInnerEnumerator, TExcept_WherePredicate, TExcept_WhereProjection>(this RangeEnumerable source, WhereSelectEnumerable<int, TExcept_WhereInnerItem, TExcept_WhereInnerEnumerable, TExcept_WhereInnerEnumerator, TExcept_WherePredicate, TExcept_WhereProjection> second, IEqualityComparer<int> comparer)
//        where TExcept_WhereInnerEnumerable : struct, IStructEnumerable<TExcept_WhereInnerItem, TExcept_WhereInnerEnumerator>
//        where TExcept_WhereInnerEnumerator : struct, IStructEnumerator<TExcept_WhereInnerItem>
//        where TExcept_WherePredicate : struct, IStructPredicate<TExcept_WhereInnerItem>
//        where TExcept_WhereProjection : struct, IStructProjection<int, TExcept_WhereInnerItem>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, WhereSelectEnumerable<int, TExcept_WhereInnerItem, TExcept_WhereInnerEnumerable, TExcept_WhereInnerEnumerator, TExcept_WherePredicate, TExcept_WhereProjection>, WhereSelectEnumerator<int, TExcept_WhereInnerItem, TExcept_WhereInnerEnumerator, TExcept_WherePredicate, TExcept_WhereProjection>>(ref source, ref second, comparer);

//        public static IntersectSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, DistinctDefaultEnumerable<int, TExcept_DistinctInnerEnumerable, TExcept_DistinctInnerEnumerator>, DistinctDefaultEnumerator<int, TExcept_DistinctInnerEnumerator>> Intersect<TExcept_DistinctInnerEnumerable, TExcept_DistinctInnerEnumerator>(this RangeEnumerable source, DistinctDefaultEnumerable<int, TExcept_DistinctInnerEnumerable, TExcept_DistinctInnerEnumerator> second, IEqualityComparer<int> comparer)
//        where TExcept_DistinctInnerEnumerable : struct, IStructEnumerable<int, TExcept_DistinctInnerEnumerator>
//        where TExcept_DistinctInnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, DistinctDefaultEnumerable<int, TExcept_DistinctInnerEnumerable, TExcept_DistinctInnerEnumerator>, DistinctDefaultEnumerator<int, TExcept_DistinctInnerEnumerator>>(ref source, ref second, comparer);

//        public static IntersectSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, DistinctSpecificEnumerable<int, TExcept_DistinctInnerEnumerable, TExcept_DistinctInnerEnumerator>, DistinctSpecificEnumerator<int, TExcept_DistinctInnerEnumerator>> Intersect<TExcept_DistinctInnerEnumerable, TExcept_DistinctInnerEnumerator>(this RangeEnumerable source, DistinctSpecificEnumerable<int, TExcept_DistinctInnerEnumerable, TExcept_DistinctInnerEnumerator> second, IEqualityComparer<int> comparer)
//        where TExcept_DistinctInnerEnumerable : struct, IStructEnumerable<int, TExcept_DistinctInnerEnumerator>
//        where TExcept_DistinctInnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, DistinctSpecificEnumerable<int, TExcept_DistinctInnerEnumerable, TExcept_DistinctInnerEnumerator>, DistinctSpecificEnumerator<int, TExcept_DistinctInnerEnumerator>>(ref source, ref second, comparer);

//        public static IntersectSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, EmptyEnumerable<int>, EmptyEnumerator<int>> Intersect(this RangeEnumerable source, EmptyOrderedEnumerable<int> second, IEqualityComparer<int> comparer)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            if (second.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(second));

//            var empty = EmptyCache<int>.Empty;
//            return CommonImplementation.IntersectImpl<int, RangeEnumerable, RangeEnumerator, EmptyEnumerable<int>, EmptyEnumerator<int>>(ref source, ref empty, comparer);
//        }

//        public static IntersectSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, ExceptDefaultEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>, ExceptDefaultEnumerator<int, TExceptFirstEnumerator, TExceptSecondEnumerator>> Intersect<TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>(this RangeEnumerable source, ExceptDefaultEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator> second, IEqualityComparer<int> comparer)
//        where TExceptFirstEnumerable : struct, IStructEnumerable<int, TExceptFirstEnumerator>
//        where TExceptFirstEnumerator : struct, IStructEnumerator<int>
//        where TExceptSecondEnumerable : struct, IStructEnumerable<int, TExceptSecondEnumerator>
//        where TExceptSecondEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, ExceptDefaultEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>, ExceptDefaultEnumerator<int, TExceptFirstEnumerator, TExceptSecondEnumerator>>(ref source, ref second, comparer);

//        public static IntersectSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, ExceptSpecificEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>, ExceptSpecificEnumerator<int, TExceptFirstEnumerator, TExceptSecondEnumerator>> Intersect<TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>(this RangeEnumerable source, ExceptSpecificEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator> second, IEqualityComparer<int> comparer)
//        where TExceptFirstEnumerable : struct, IStructEnumerable<int, TExceptFirstEnumerator>
//        where TExceptFirstEnumerator : struct, IStructEnumerator<int>
//        where TExceptSecondEnumerable : struct, IStructEnumerable<int, TExceptSecondEnumerator>
//        where TExceptSecondEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, ExceptSpecificEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>, ExceptSpecificEnumerator<int, TExceptFirstEnumerator, TExceptSecondEnumerator>>(ref source, ref second, comparer);

//        public static IntersectSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, IntersectDefaultEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>, IntersectDefaultEnumerator<int, TExceptFirstEnumerator, TExceptSecondEnumerator>> Intersect<TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>(this RangeEnumerable source, IntersectDefaultEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator> second, IEqualityComparer<int> comparer)
//        where TExceptFirstEnumerable : struct, IStructEnumerable<int, TExceptFirstEnumerator>
//        where TExceptFirstEnumerator : struct, IStructEnumerator<int>
//        where TExceptSecondEnumerable : struct, IStructEnumerable<int, TExceptSecondEnumerator>
//        where TExceptSecondEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, IntersectDefaultEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>, IntersectDefaultEnumerator<int, TExceptFirstEnumerator, TExceptSecondEnumerator>>(ref source, ref second, comparer);

//        public static IntersectSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, IntersectSpecificEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>, IntersectSpecificEnumerator<int, TExceptFirstEnumerator, TExceptSecondEnumerator>> Intersect<TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>(this RangeEnumerable source, IntersectSpecificEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator> second, IEqualityComparer<int> comparer)
//        where TExceptFirstEnumerable : struct, IStructEnumerable<int, TExceptFirstEnumerator>
//        where TExceptFirstEnumerator : struct, IStructEnumerator<int>
//        where TExceptSecondEnumerable : struct, IStructEnumerable<int, TExceptSecondEnumerator>
//        where TExceptSecondEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, IntersectSpecificEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>, IntersectSpecificEnumerator<int, TExceptFirstEnumerator, TExceptSecondEnumerator>>(ref source, ref second, comparer);

//        public static IntersectSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, UnionDefaultEnumerable<int, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator>, UnionDefaultEnumerator<int, TUnionFirstEnumerator, TUnionSecondEnumerator>> Intersect<TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator>(this RangeEnumerable source, UnionDefaultEnumerable<int, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator> second, IEqualityComparer<int> comparer)
//        where TUnionFirstEnumerable : struct, IStructEnumerable<int, TUnionFirstEnumerator>
//        where TUnionFirstEnumerator : struct, IStructEnumerator<int>
//        where TUnionSecondEnumerable : struct, IStructEnumerable<int, TUnionSecondEnumerator>
//        where TUnionSecondEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, UnionDefaultEnumerable<int, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator>, UnionDefaultEnumerator<int, TUnionFirstEnumerator, TUnionSecondEnumerator>>(ref source, ref second, comparer);

//        public static IntersectSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, UnionSpecificEnumerable<int, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator>, UnionSpecificEnumerator<int, TUnionFirstEnumerator, TUnionSecondEnumerator>> Intersect<TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator>(this RangeEnumerable source, UnionSpecificEnumerable<int, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator> second, IEqualityComparer<int> comparer)
//        where TUnionFirstEnumerable : struct, IStructEnumerable<int, TUnionFirstEnumerator>
//        where TUnionFirstEnumerator : struct, IStructEnumerator<int>
//        where TUnionSecondEnumerable : struct, IStructEnumerable<int, TUnionSecondEnumerator>
//        where TUnionSecondEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, UnionSpecificEnumerable<int, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator>, UnionSpecificEnumerator<int, TUnionFirstEnumerator, TUnionSecondEnumerator>>(ref source, ref second, comparer);

//        public static IntersectSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, GroupedEnumerable<TGroupedKey, int>, GroupedEnumerator<int>> Intersect<TGroupedKey>(this RangeEnumerable source, GroupedEnumerable<TGroupedKey, int> second, IEqualityComparer<int> comparer)
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, GroupedEnumerable<TGroupedKey, int>, GroupedEnumerator<int>>(ref source, ref second, comparer);

//        public static IntersectSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, GroupingEnumerable<TGroupedKey, int>, GroupingEnumerator<int>> Intersect<TGroupedKey>(this RangeEnumerable source, GroupingEnumerable<TGroupedKey, int> second, IEqualityComparer<int> comparer)
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, GroupingEnumerable<TGroupedKey, int>, GroupingEnumerator<int>>(ref source, ref second, comparer);

//        public static IntersectSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, ReverseEnumerable<int, TReverseEnumerable, TReverseEnumerator>, ReverseEnumerator<int>> Intersect<TReverseEnumerable, TReverseEnumerator>(this RangeEnumerable source, ReverseEnumerable<int, TReverseEnumerable, TReverseEnumerator> second, IEqualityComparer<int> comparer)
//        where TReverseEnumerable : struct, IStructEnumerable<int, TReverseEnumerator>
//        where TReverseEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, ReverseEnumerable<int, TReverseEnumerable, TReverseEnumerator>, ReverseEnumerator<int>>(ref source, ref second, comparer);

//        public static IntersectSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, OrderByEnumerable<int, TOrderByKey, TOrderByEnumerable, TOrderByEnumerator, TOrderByComparer>, OrderByEnumerator<int, TOrderByKey, TOrderByEnumerator, TOrderByComparer>> Intersect<TOrderByKey, TOrderByEnumerable, TOrderByEnumerator, TOrderByComparer>(this RangeEnumerable source, OrderByEnumerable<int, TOrderByKey, TOrderByEnumerable, TOrderByEnumerator, TOrderByComparer> second, IEqualityComparer<int> comparer)
//        where TOrderByEnumerable : struct, IStructEnumerable<int, TOrderByEnumerator>
//        where TOrderByEnumerator : struct, IStructEnumerator<int>
//        where TOrderByComparer : struct, IStructComparer<int, TOrderByKey>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, OrderByEnumerable<int, TOrderByKey, TOrderByEnumerable, TOrderByEnumerator, TOrderByComparer>, OrderByEnumerator<int, TOrderByKey, TOrderByEnumerator, TOrderByComparer>>(ref source, ref second, comparer);

//        public static IntersectSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, GroupJoinDefaultEnumerable<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator>, GroupJoinDefaultEnumerator<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerator>> Intersect<TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator>(this RangeEnumerable source, GroupJoinDefaultEnumerable<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator> second, IEqualityComparer<int> comparer)
//        where TGroupJoinLeftEnumerable : struct, IStructEnumerable<TGroupJoinLefint, TGroupJoinLeftEnumerator>
//        where TGroupJoinLeftEnumerator : struct, IStructEnumerator<TGroupJoinLefint>
//        where TGroupJoinRightEnumerable : struct, IStructEnumerable<TGroupJoinRighint, TGroupJoinRightEnumerator>
//        where TGroupJoinRightEnumerator : struct, IStructEnumerator<TGroupJoinRighint>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, GroupJoinDefaultEnumerable<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator>, GroupJoinDefaultEnumerator<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerator>>(ref source, ref second, comparer);

//        public static IntersectSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, GroupJoinSpecificEnumerable<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator>, GroupJoinSpecificEnumerator<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerator>> Intersect<TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator>(this RangeEnumerable source, GroupJoinSpecificEnumerable<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator> second, IEqualityComparer<int> comparer)
//        where TGroupJoinLeftEnumerable : struct, IStructEnumerable<TGroupJoinLefint, TGroupJoinLeftEnumerator>
//        where TGroupJoinLeftEnumerator : struct, IStructEnumerator<TGroupJoinLefint>
//        where TGroupJoinRightEnumerable : struct, IStructEnumerable<TGroupJoinRighint, TGroupJoinRightEnumerator>
//        where TGroupJoinRightEnumerator : struct, IStructEnumerator<TGroupJoinRighint>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, GroupJoinSpecificEnumerable<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator>, GroupJoinSpecificEnumerator<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerator>>(ref source, ref second, comparer);

//        public static IntersectSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, GroupByCollectionDefaultEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, int, TGroupByEnumerable, TGroupByEnumerator>, GroupByCollectionDefaultEnumerator<TGroupByInItem, TGroupByKey, TGroupByElement, int, TGroupByEnumerator>> Intersect<TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByEnumerable, TGroupByEnumerator>(this RangeEnumerable source, GroupByCollectionDefaultEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, int, TGroupByEnumerable, TGroupByEnumerator> second, IEqualityComparer<int> comparer)
//        where TGroupByEnumerable : struct, IStructEnumerable<TGroupByInItem, TGroupByEnumerator>
//        where TGroupByEnumerator : struct, IStructEnumerator<TGroupByInItem>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, GroupByCollectionDefaultEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, int, TGroupByEnumerable, TGroupByEnumerator>, GroupByCollectionDefaultEnumerator<TGroupByInItem, TGroupByKey, TGroupByElement, int, TGroupByEnumerator>>(ref source, ref second, comparer);

//        public static IntersectSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, GroupByCollectionSpecificEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, int, TGroupByEnumerable, TGroupByEnumerator>, GroupByCollectionSpecificEnumerator<TGroupByInItem, TGroupByKey, TGroupByElement, int, TGroupByEnumerator>> Intersect<TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByEnumerable, TGroupByEnumerator>(this RangeEnumerable source, GroupByCollectionSpecificEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, int, TGroupByEnumerable, TGroupByEnumerator> second, IEqualityComparer<int> comparer)
//        where TGroupByEnumerable : struct, IStructEnumerable<TGroupByInItem, TGroupByEnumerator>
//        where TGroupByEnumerator : struct, IStructEnumerator<TGroupByInItem>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, GroupByCollectionSpecificEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, int, TGroupByEnumerable, TGroupByEnumerator>, GroupByCollectionSpecificEnumerator<TGroupByInItem, TGroupByKey, TGroupByElement, int, TGroupByEnumerator>>(ref source, ref second, comparer);

//        public static IntersectSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, JoinDefaultEnumerable<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerable, TJoinRightEnumerator>, JoinDefaultEnumerator<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerator>> Intersect<TJoinKeyItem, TJoinLefint, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerable, TJoinRightEnumerator>(this RangeEnumerable source, JoinDefaultEnumerable<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerable, TJoinRightEnumerator> second, IEqualityComparer<int> comparer)
//        where TJoinLeftEnumerable : struct, IStructEnumerable<TJoinLefint, TJoinLeftEnumerator>
//        where TJoinLeftEnumerator : struct, IStructEnumerator<TJoinLefint>
//        where TJoinRightEnumerable : struct, IStructEnumerable<TJoinRighint, TJoinRightEnumerator>
//        where TJoinRightEnumerator : struct, IStructEnumerator<TJoinRighint>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, JoinDefaultEnumerable<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerable, TJoinRightEnumerator>, JoinDefaultEnumerator<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerator>>(ref source, ref second, comparer);

//        public static IntersectSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, JoinSpecificEnumerable<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerable, TJoinRightEnumerator>, JoinSpecificEnumerator<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerator>> Intersect<TJoinKeyItem, TJoinLefint, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerable, TJoinRightEnumerator>(this RangeEnumerable source, JoinSpecificEnumerable<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerable, TJoinRightEnumerator> second, IEqualityComparer<int> comparer)
//        where TJoinLeftEnumerable : struct, IStructEnumerable<TJoinLefint, TJoinLeftEnumerator>
//        where TJoinLeftEnumerator : struct, IStructEnumerator<TJoinLefint>
//        where TJoinRightEnumerable : struct, IStructEnumerable<TJoinRighint, TJoinRightEnumerator>
//        where TJoinRightEnumerator : struct, IStructEnumerator<TJoinRighint>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, JoinSpecificEnumerable<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerable, TJoinRightEnumerator>, JoinSpecificEnumerator<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerator>>(ref source, ref second, comparer);

//        public static IntersectDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, OneItemDefaultEnumerable<int>, OneItemDefaultEnumerator<int>> Intersect(this RangeEnumerable source, OneItemDefaultEnumerable<int> second)
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, OneItemDefaultEnumerable<int>, OneItemDefaultEnumerator<int>>(ref source, ref second);

//        public static IntersectSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, OneItemDefaultEnumerable<int>, OneItemDefaultEnumerator<int>> Intersect(this RangeEnumerable source, OneItemDefaultEnumerable<int> second, IEqualityComparer<int> comparer)
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, OneItemDefaultEnumerable<int>, OneItemDefaultEnumerator<int>>(ref source, ref second, comparer);

//        public static IntersectDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, OneItemSpecificEnumerable<int>, OneItemSpecificEnumerator<int>> Intersect(this RangeEnumerable source, OneItemSpecificEnumerable<int> second)
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, OneItemSpecificEnumerable<int>, OneItemSpecificEnumerator<int>>(ref source, ref second);

//        public static IntersectSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, OneItemSpecificEnumerable<int>, OneItemSpecificEnumerator<int>> Intersect(this RangeEnumerable source, OneItemSpecificEnumerable<int> second, IEqualityComparer<int> comparer)
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, OneItemSpecificEnumerable<int>, OneItemSpecificEnumerator<int>>(ref source, ref second, comparer);

//        public static IntersectDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, OneItemDefaultOrderedEnumerable<int>, OneItemDefaultOrderedEnumerator<int>> Intersect(this RangeEnumerable source, OneItemDefaultOrderedEnumerable<int> second)
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, OneItemDefaultOrderedEnumerable<int>, OneItemDefaultOrderedEnumerator<int>>(ref source, ref second);

//        public static IntersectSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, OneItemDefaultOrderedEnumerable<int>, OneItemDefaultOrderedEnumerator<int>> Intersect(this RangeEnumerable source, OneItemDefaultOrderedEnumerable<int> second, IEqualityComparer<int> comparer)
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, OneItemDefaultOrderedEnumerable<int>, OneItemDefaultOrderedEnumerator<int>>(ref source, ref second, comparer);

//        public static IntersectDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, OneItemSpecificOrderedEnumerable<int>, OneItemSpecificOrderedEnumerator<int>> Intersect(this RangeEnumerable source, OneItemSpecificOrderedEnumerable<int> second)
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, OneItemSpecificOrderedEnumerable<int>, OneItemSpecificOrderedEnumerator<int>>(ref source, ref second);

//        public static IntersectSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, OneItemSpecificOrderedEnumerable<int>, OneItemSpecificOrderedEnumerator<int>> Intersect(this RangeEnumerable source, OneItemSpecificOrderedEnumerable<int> second, IEqualityComparer<int> comparer)
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, OneItemSpecificOrderedEnumerable<int>, OneItemSpecificOrderedEnumerator<int>>(ref source, ref second, comparer);

//        public static IntersectDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, SkipLastEnumerable<int, TSkipLastInnerEnumerable, TSkipLastInnerEnumerator>, SkipLastEnumerator<int, TSkipLastInnerEnumerator>> Intersect<TSkipLastInnerEnumerable, TSkipLastInnerEnumerator>(this RangeEnumerable source, SkipLastEnumerable<int, TSkipLastInnerEnumerable, TSkipLastInnerEnumerator> second)
//        where TSkipLastInnerEnumerable : struct, IStructEnumerable<int, TSkipLastInnerEnumerator>
//        where TSkipLastInnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, SkipLastEnumerable<int, TSkipLastInnerEnumerable, TSkipLastInnerEnumerator>, SkipLastEnumerator<int, TSkipLastInnerEnumerator>>(ref source, ref second);

//        public static IntersectDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, TakeLastEnumerable<int, TTakeLastInnerEnumerable, TTakeLastInnerEnumerator>, TakeLastEnumerator<int, TTakeLastInnerEnumerator>> Intersect<TTakeLastInnerEnumerable, TTakeLastInnerEnumerator>(this RangeEnumerable source, TakeLastEnumerable<int, TTakeLastInnerEnumerable, TTakeLastInnerEnumerator> second)
//        where TTakeLastInnerEnumerable : struct, IStructEnumerable<int, TTakeLastInnerEnumerator>
//        where TTakeLastInnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, TakeLastEnumerable<int, TTakeLastInnerEnumerable, TTakeLastInnerEnumerator>, TakeLastEnumerator<int, TTakeLastInnerEnumerator>>(ref source, ref second);

//        public static IntersectSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, SkipLastEnumerable<int, TSkipLastInnerEnumerable, TSkipLastInnerEnumerator>, SkipLastEnumerator<int, TSkipLastInnerEnumerator>> Intersect<TSkipLastInnerEnumerable, TSkipLastInnerEnumerator>(this RangeEnumerable source, SkipLastEnumerable<int, TSkipLastInnerEnumerable, TSkipLastInnerEnumerator> second, IEqualityComparer<int> comparer)
//        where TSkipLastInnerEnumerable : struct, IStructEnumerable<int, TSkipLastInnerEnumerator>
//        where TSkipLastInnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, SkipLastEnumerable<int, TSkipLastInnerEnumerable, TSkipLastInnerEnumerator>, SkipLastEnumerator<int, TSkipLastInnerEnumerator>>(ref source, ref second, comparer);

//        public static IntersectSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, TakeLastEnumerable<int, TTakeLastInnerEnumerable, TTakeLastInnerEnumerator>, TakeLastEnumerator<int, TTakeLastInnerEnumerator>> Intersect<TTakeLastInnerEnumerable, TTakeLastInnerEnumerator>(this RangeEnumerable source, TakeLastEnumerable<int, TTakeLastInnerEnumerable, TTakeLastInnerEnumerator> second, IEqualityComparer<int> comparer)
//        where TTakeLastInnerEnumerable : struct, IStructEnumerable<int, TTakeLastInnerEnumerator>
//        where TTakeLastInnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, TakeLastEnumerable<int, TTakeLastInnerEnumerable, TTakeLastInnerEnumerator>, TakeLastEnumerator<int, TTakeLastInnerEnumerator>>(ref source, ref second, comparer);

//        public static IntersectDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, AppendEnumerable<int, TAppendInnerEnumerable, TAppendInnerEnumerator>, AppendEnumerator<int, TAppendInnerEnumerator>> Intersect<TAppendInnerEnumerable, TAppendInnerEnumerator>(this RangeEnumerable source, AppendEnumerable<int, TAppendInnerEnumerable, TAppendInnerEnumerator> second)
//        where TAppendInnerEnumerable : struct, IStructEnumerable<int, TAppendInnerEnumerator>
//        where TAppendInnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, AppendEnumerable<int, TAppendInnerEnumerable, TAppendInnerEnumerator>, AppendEnumerator<int, TAppendInnerEnumerator>>(ref source, ref second);

//        public static IntersectSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, AppendEnumerable<int, TAppendInnerEnumerable, TAppendInnerEnumerator>, AppendEnumerator<int, TAppendInnerEnumerator>> Intersect<TAppendInnerEnumerable, TAppendInnerEnumerator>(this RangeEnumerable source, AppendEnumerable<int, TAppendInnerEnumerable, TAppendInnerEnumerator> second, IEqualityComparer<int> comparer)
//        where TAppendInnerEnumerable : struct, IStructEnumerable<int, TAppendInnerEnumerator>
//        where TAppendInnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, AppendEnumerable<int, TAppendInnerEnumerable, TAppendInnerEnumerator>, AppendEnumerator<int, TAppendInnerEnumerator>>(ref source, ref second, comparer);

//        public static IntersectDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, PrependEnumerable<int, TPrependInnerEnumerable, TPrependInnerEnumerator>, PrependEnumerator<int, TPrependInnerEnumerator>> Intersect<TPrependInnerEnumerable, TPrependInnerEnumerator>(this RangeEnumerable source, PrependEnumerable<int, TPrependInnerEnumerable, TPrependInnerEnumerator> second)
//        where TPrependInnerEnumerable : struct, IStructEnumerable<int, TPrependInnerEnumerator>
//        where TPrependInnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, PrependEnumerable<int, TPrependInnerEnumerable, TPrependInnerEnumerator>, PrependEnumerator<int, TPrependInnerEnumerator>>(ref source, ref second);

//        public static IntersectSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, PrependEnumerable<int, TPrependInnerEnumerable, TPrependInnerEnumerator>, PrependEnumerator<int, TPrependInnerEnumerator>> Intersect<TPrependInnerEnumerable, TPrependInnerEnumerator>(this RangeEnumerable source, PrependEnumerable<int, TPrependInnerEnumerable, TPrependInnerEnumerator> second, IEqualityComparer<int> comparer)
//        where TPrependInnerEnumerable : struct, IStructEnumerable<int, TPrependInnerEnumerator>
//        where TPrependInnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Intersect<int, RangeEnumerable, RangeEnumerator, PrependEnumerable<int, TPrependInnerEnumerable, TPrependInnerEnumerator>, PrependEnumerator<int, TPrependInnerEnumerator>>(ref source, ref second, comparer);

//        // Join

//        public static JoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, object, IdentityEnumerable<object, IEnumerable, IEnumerableBridger, IdentityEnumerator>, IdentityEnumerator> Join<TOutItem, TKeyItem>(this RangeEnumerable source, IEnumerable inner, Func<int, TKeyItem> outerKeySelector, Func<object, TKeyItem> innerKeySelector, Func<int, object, TOutItem> resultSelector)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(inner, nameof(inner));
//            if (outerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(outerKeySelector));
//            if (innerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(innerKeySelector));
//            if (resultSelector == null) throw CommonImplementation.ArgumentNull(nameof(resultSelector));

//            return CommonImplementation.JoinImpl<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, object, IdentityEnumerable<object, IEnumerable, IEnumerableBridger, IdentityEnumerator>, IdentityEnumerator>(ref source, ref bridge, outerKeySelector, innerKeySelector, resultSelector);
//        }

//        public static JoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, object, IdentityEnumerable<object, IEnumerable, IEnumerableBridger, IdentityEnumerator>, IdentityEnumerator> Join<TOutItem, TKeyItem>(this RangeEnumerable source, IEnumerable inner, Func<int, TKeyItem> outerKeySelector, Func<object, TKeyItem> innerKeySelector, Func<int, object, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(inner, nameof(inner));
//            if (outerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(outerKeySelector));
//            if (innerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(innerKeySelector));
//            if (resultSelector == null) throw CommonImplementation.ArgumentNull(nameof(resultSelector));

//            return CommonImplementation.JoinImpl<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, object, IdentityEnumerable<object, IEnumerable, IEnumerableBridger, IdentityEnumerator>, IdentityEnumerator>(ref source, ref bridge, outerKeySelector, innerKeySelector, resultSelector, comparer);
//        }

//        public static EmptyEnumerable<TOutItem> Join<TOutItem, TRightItem, TKeyItem>(this RangeEnumerable source, EmptyOrderedEnumerable<TRightItem> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            if (inner.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(inner));
//            if (outerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(outerKeySelector));
//            if (innerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(innerKeySelector));
//            if (resultSelector == null) throw CommonImplementation.ArgumentNull(nameof(resultSelector));

//            return EmptyCache<TOutItem>.Empty;
//        }

//        public static EmptyEnumerable<TOutItem> Join<TOutItem, TRightItem, TKeyItem>(this RangeEnumerable source, EmptyEnumerable<TRightItem> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            if (inner.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(inner));
//            if (outerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(outerKeySelector));
//            if (innerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(innerKeySelector));
//            if (resultSelector == null) throw CommonImplementation.ArgumentNull(nameof(resultSelector));

//            return EmptyCache<TOutItem>.Empty;
//        }

//        public static JoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, IEnumerable<TRightItem>, IEnumerableBridger<TRightItem>, IdentityEnumerator<TRightItem>>, IdentityEnumerator<TRightItem>> Join<TOutItem, TKeyItem, TRightItem>(this RangeEnumerable source, IEnumerable<TRightItem> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(inner, nameof(inner));
//            if (outerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(outerKeySelector));
//            if (innerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(innerKeySelector));
//            if (resultSelector == null) throw CommonImplementation.ArgumentNull(nameof(resultSelector));

//            return CommonImplementation.JoinImpl<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, IEnumerable<TRightItem>, IEnumerableBridger<TRightItem>, IdentityEnumerator<TRightItem>>, IdentityEnumerator<TRightItem>>(ref source, ref bridge, outerKeySelector, innerKeySelector, resultSelector);
//        }

//        public static JoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, LinkedList<TRightItem>, LinkedListBridger<TRightItem>, LinkedListEnumerator<TRightItem>>, LinkedListEnumerator<TRightItem>> Join<TOutItem, TKeyItem, TRightItem>(this RangeEnumerable source, LinkedList<TRightItem> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(inner, nameof(inner));
//            if (outerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(outerKeySelector));
//            if (innerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(innerKeySelector));
//            if (resultSelector == null) throw CommonImplementation.ArgumentNull(nameof(resultSelector));

//            return CommonImplementation.JoinImpl<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, LinkedList<TRightItem>, LinkedListBridger<TRightItem>, LinkedListEnumerator<TRightItem>>, LinkedListEnumerator<TRightItem>>(ref source, ref bridge, outerKeySelector, innerKeySelector, resultSelector);
//        }

//        public static JoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, Queue<TRightItem>, QueueBridger<TRightItem>, QueueEnumerator<TRightItem>>, QueueEnumerator<TRightItem>> Join<TOutItem, TKeyItem, TRightItem>(this RangeEnumerable source, Queue<TRightItem> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(inner, nameof(inner));
//            if (outerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(outerKeySelector));
//            if (innerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(innerKeySelector));
//            if (resultSelector == null) throw CommonImplementation.ArgumentNull(nameof(resultSelector));

//            return CommonImplementation.JoinImpl<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, Queue<TRightItem>, QueueBridger<TRightItem>, QueueEnumerator<TRightItem>>, QueueEnumerator<TRightItem>>(ref source, ref bridge, outerKeySelector, innerKeySelector, resultSelector);
//        }

//        public static JoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, int, ReverseRangeEnumerable, ReverseRangeEnumerator> Join<TOutItem, TKeyItem>(this RangeEnumerable source, ReverseRangeEnumerable inner, Func<int, TKeyItem> outerKeySelector, Func<int, TKeyItem> innerKeySelector, Func<int, int, TOutItem> resultSelector)
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, int, ReverseRangeEnumerable, ReverseRangeEnumerator>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static JoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, Stack<TRightItem>, StackBridger<TRightItem>, StackEnumerator<TRightItem>>, StackEnumerator<TRightItem>> Join<TOutItem, TKeyItem, TRightItem>(this RangeEnumerable source, Stack<TRightItem> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(inner, nameof(inner));
//            if (outerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(outerKeySelector));
//            if (innerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(innerKeySelector));
//            if (resultSelector == null) throw CommonImplementation.ArgumentNull(nameof(resultSelector));

//            return CommonImplementation.JoinImpl<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, Stack<TRightItem>, StackBridger<TRightItem>, StackEnumerator<TRightItem>>, StackEnumerator<TRightItem>>(ref source, ref bridge, outerKeySelector, innerKeySelector, resultSelector);
//        }

//        public static JoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, SortedSet<TRightItem>, SortedSetBridger<TRightItem>, SortedSetEnumerator<TRightItem>>, SortedSetEnumerator<TRightItem>> Join<TOutItem, TKeyItem, TRightItem>(this RangeEnumerable source, SortedSet<TRightItem> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(inner, nameof(inner));
//            if (outerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(outerKeySelector));
//            if (innerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(innerKeySelector));
//            if (resultSelector == null) throw CommonImplementation.ArgumentNull(nameof(resultSelector));

//            return CommonImplementation.JoinImpl<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, SortedSet<TRightItem>, SortedSetBridger<TRightItem>, SortedSetEnumerator<TRightItem>>, SortedSetEnumerator<TRightItem>>(ref source, ref bridge, outerKeySelector, innerKeySelector, resultSelector);
//        }

//        public static JoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, RepeatEnumerable<TRightItem>, RepeatEnumerator<TRightItem>> Join<TOutItem, TKeyItem, TRightItem>(this RangeEnumerable source, RepeatEnumerable<TRightItem> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector)
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, RepeatEnumerable<TRightItem>, RepeatEnumerator<TRightItem>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static JoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, int, RangeEnumerable, RangeEnumerator> Join<TOutItem, TKeyItem>(this RangeEnumerable source, RangeEnumerable inner, Func<int, TKeyItem> outerKeySelector, Func<int, TKeyItem> innerKeySelector, Func<int, int, TOutItem> resultSelector)
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, int, RangeEnumerable, RangeEnumerator>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static JoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, List<TRightItem>, ListBridger<TRightItem>, ListEnumerator<TRightItem>>, ListEnumerator<TRightItem>> Join<TOutItem, TKeyItem, TRightItem>(this RangeEnumerable source, List<TRightItem> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(inner, nameof(inner));
//            if (outerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(outerKeySelector));
//            if (innerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(innerKeySelector));
//            if (resultSelector == null) throw CommonImplementation.ArgumentNull(nameof(resultSelector));

//            return CommonImplementation.JoinImpl<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, List<TRightItem>, ListBridger<TRightItem>, ListEnumerator<TRightItem>>, ListEnumerator<TRightItem>>(ref source, ref bridge, outerKeySelector, innerKeySelector, resultSelector);
//        }

//        public static JoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, TRightItem[], ArrayBridger<TRightItem>, ArrayEnumerator<TRightItem>>, ArrayEnumerator<TRightItem>> Join<TOutItem, TKeyItem, TRightItem>(this RangeEnumerable source, TRightItem[] inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(inner, nameof(inner));
//            if (outerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(outerKeySelector));
//            if (innerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(innerKeySelector));
//            if (resultSelector == null) throw CommonImplementation.ArgumentNull(nameof(resultSelector));

//            return CommonImplementation.JoinImpl<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, TRightItem[], ArrayBridger<TRightItem>, ArrayEnumerator<TRightItem>>, ArrayEnumerator<TRightItem>>(ref source, ref bridge, outerKeySelector, innerKeySelector, resultSelector);
//        }

//        public static JoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, BoxedEnumerable<TRightItem>, BoxedEnumerator<TRightItem>> Join<TOutItem, TKeyItem, TRightItem>(this RangeEnumerable source, BoxedEnumerable<TRightItem> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector)
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, BoxedEnumerable<TRightItem>, BoxedEnumerator<TRightItem>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static JoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, IEnumerable<TRightItem>, IEnumerableBridger<TRightItem>, IdentityEnumerator<TRightItem>>, IdentityEnumerator<TRightItem>> Join<TOutItem, TKeyItem, TRightItem>(this RangeEnumerable source, IEnumerable<TRightItem> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(inner, nameof(inner));
//            if (outerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(outerKeySelector));
//            if (innerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(innerKeySelector));
//            if (resultSelector == null) throw CommonImplementation.ArgumentNull(nameof(resultSelector));

//            return CommonImplementation.JoinImpl<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, IEnumerable<TRightItem>, IEnumerableBridger<TRightItem>, IdentityEnumerator<TRightItem>>, IdentityEnumerator<TRightItem>>(ref source, ref bridge, outerKeySelector, innerKeySelector, resultSelector, comparer);
//        }

//        public static JoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, int, ReverseRangeEnumerable, ReverseRangeEnumerator> Join<TOutItem, TKeyItem>(this RangeEnumerable source, ReverseRangeEnumerable inner, Func<int, TKeyItem> outerKeySelector, Func<int, TKeyItem> innerKeySelector, Func<int, int, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, int, ReverseRangeEnumerable, ReverseRangeEnumerator>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static JoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, LinkedList<TRightItem>, LinkedListBridger<TRightItem>, LinkedListEnumerator<TRightItem>>, LinkedListEnumerator<TRightItem>> Join<TOutItem, TKeyItem, TRightItem>(this RangeEnumerable source, LinkedList<TRightItem> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(inner, nameof(inner));
//            if (outerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(outerKeySelector));
//            if (innerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(innerKeySelector));
//            if (resultSelector == null) throw CommonImplementation.ArgumentNull(nameof(resultSelector));

//            return CommonImplementation.JoinImpl<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, LinkedList<TRightItem>, LinkedListBridger<TRightItem>, LinkedListEnumerator<TRightItem>>, LinkedListEnumerator<TRightItem>>(ref source, ref bridge, outerKeySelector, innerKeySelector, resultSelector, comparer);
//        }

//        public static JoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, TRightItem[], ArrayBridger<TRightItem>, ArrayEnumerator<TRightItem>>, ArrayEnumerator<TRightItem>> Join<TOutItem, TKeyItem, TRightItem>(this RangeEnumerable source, TRightItem[] inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(inner, nameof(inner));
//            if (outerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(outerKeySelector));
//            if (innerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(innerKeySelector));
//            if (resultSelector == null) throw CommonImplementation.ArgumentNull(nameof(resultSelector));

//            return CommonImplementation.JoinImpl<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, TRightItem[], ArrayBridger<TRightItem>, ArrayEnumerator<TRightItem>>, ArrayEnumerator<TRightItem>>(ref source, ref bridge, outerKeySelector, innerKeySelector, resultSelector, comparer);
//        }

//        public static EmptyEnumerable<TOutItem> Join<TOutItem, TRightItem, TKeyItem>(this RangeEnumerable source, EmptyOrderedEnumerable<TRightItem> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            if (inner.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(inner));
//            if (outerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(outerKeySelector));
//            if (innerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(innerKeySelector));
//            if (resultSelector == null) throw CommonImplementation.ArgumentNull(nameof(resultSelector));

//            return EmptyCache<TOutItem>.Empty;
//        }

//        public static JoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, Stack<TRightItem>, StackBridger<TRightItem>, StackEnumerator<TRightItem>>, StackEnumerator<TRightItem>> Join<TOutItem, TKeyItem, TRightItem>(this RangeEnumerable source, Stack<TRightItem> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(inner, nameof(inner));
//            if (outerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(outerKeySelector));
//            if (innerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(innerKeySelector));
//            if (resultSelector == null) throw CommonImplementation.ArgumentNull(nameof(resultSelector));

//            return CommonImplementation.JoinImpl<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, Stack<TRightItem>, StackBridger<TRightItem>, StackEnumerator<TRightItem>>, StackEnumerator<TRightItem>>(ref source, ref bridge, outerKeySelector, innerKeySelector, resultSelector, comparer);
//        }

//        public static JoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, Queue<TRightItem>, QueueBridger<TRightItem>, QueueEnumerator<TRightItem>>, QueueEnumerator<TRightItem>> Join<TOutItem, TKeyItem, TRightItem>(this RangeEnumerable source, Queue<TRightItem> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(inner, nameof(inner));
//            if (outerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(outerKeySelector));
//            if (innerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(innerKeySelector));
//            if (resultSelector == null) throw CommonImplementation.ArgumentNull(nameof(resultSelector));

//            return CommonImplementation.JoinImpl<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, Queue<TRightItem>, QueueBridger<TRightItem>, QueueEnumerator<TRightItem>>, QueueEnumerator<TRightItem>>(ref source, ref bridge, outerKeySelector, innerKeySelector, resultSelector, comparer);
//        }

//        public static JoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, RepeatEnumerable<TRightItem>, RepeatEnumerator<TRightItem>> Join<TOutItem, TKeyItem, TRightItem>(this RangeEnumerable source, RepeatEnumerable<TRightItem> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, RepeatEnumerable<TRightItem>, RepeatEnumerator<TRightItem>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static JoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, int, RangeEnumerable, RangeEnumerator> Join<TOutItem, TKeyItem>(this RangeEnumerable source, RangeEnumerable inner, Func<int, TKeyItem> outerKeySelector, Func<int, TKeyItem> innerKeySelector, Func<int, int, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, int, RangeEnumerable, RangeEnumerator>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static JoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, SortedSet<TRightItem>, SortedSetBridger<TRightItem>, SortedSetEnumerator<TRightItem>>, SortedSetEnumerator<TRightItem>> Join<TOutItem, TKeyItem, TRightItem>(this RangeEnumerable source, SortedSet<TRightItem> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(inner, nameof(inner));
//            if (outerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(outerKeySelector));
//            if (innerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(innerKeySelector));
//            if (resultSelector == null) throw CommonImplementation.ArgumentNull(nameof(resultSelector));

//            return CommonImplementation.JoinImpl<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, SortedSet<TRightItem>, SortedSetBridger<TRightItem>, SortedSetEnumerator<TRightItem>>, SortedSetEnumerator<TRightItem>>(ref source, ref bridge, outerKeySelector, innerKeySelector, resultSelector, comparer);
//        }

//        public static JoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, List<TRightItem>, ListBridger<TRightItem>, ListEnumerator<TRightItem>>, ListEnumerator<TRightItem>> Join<TOutItem, TKeyItem, TRightItem>(this RangeEnumerable source, List<TRightItem> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(inner, nameof(inner));
//            if (outerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(outerKeySelector));
//            if (innerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(innerKeySelector));
//            if (resultSelector == null) throw CommonImplementation.ArgumentNull(nameof(resultSelector));

//            return CommonImplementation.JoinImpl<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, List<TRightItem>, ListBridger<TRightItem>, ListEnumerator<TRightItem>>, ListEnumerator<TRightItem>>(ref source, ref bridge, outerKeySelector, innerKeySelector, resultSelector, comparer);
//        }

//        public static EmptyEnumerable<TOutItem> Join<TOutItem, TRightItem, TKeyItem>(this RangeEnumerable source, EmptyEnumerable<TRightItem> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            if (inner.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(inner));
//            if (outerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(outerKeySelector));
//            if (innerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(innerKeySelector));
//            if (resultSelector == null) throw CommonImplementation.ArgumentNull(nameof(resultSelector));

//            return EmptyCache<TOutItem>.Empty;
//        }

//        public static JoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, BoxedEnumerable<TRightItem>, BoxedEnumerator<TRightItem>> Join<TOutItem, TKeyItem, TRightItem>(this RangeEnumerable source, BoxedEnumerable<TRightItem> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, BoxedEnumerable<TRightItem>, BoxedEnumerator<TRightItem>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static JoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, Dictionary<TRightItem, TDictionaryValue>.KeyCollection, DictionaryKeysBridger<TRightItem, TDictionaryValue>, DictionaryKeysEnumerator<TRightItem, TDictionaryValue>>, DictionaryKeysEnumerator<TRightItem, TDictionaryValue>> Join<TOutItem, TKeyItem, TRightItem, TDictionaryValue>(this RangeEnumerable source, Dictionary<TRightItem, TDictionaryValue>.KeyCollection inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(inner, nameof(inner));
//            if (outerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(outerKeySelector));
//            if (innerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(innerKeySelector));
//            if (resultSelector == null) throw CommonImplementation.ArgumentNull(nameof(resultSelector));

//            return CommonImplementation.JoinImpl<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, Dictionary<TRightItem, TDictionaryValue>.KeyCollection, DictionaryKeysBridger<TRightItem, TDictionaryValue>, DictionaryKeysEnumerator<TRightItem, TDictionaryValue>>, DictionaryKeysEnumerator<TRightItem, TDictionaryValue>>(ref source, ref bridge, outerKeySelector, innerKeySelector, resultSelector);
//        }

//        public static JoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, GroupingEnumerable<TGroupedKey, TRightItem>, GroupingEnumerator<TRightItem>> Join<TOutItem, TKeyItem, TRightItem, TGroupedKey>(this RangeEnumerable source, GroupingEnumerable<TGroupedKey, TRightItem> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector)
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, GroupingEnumerable<TGroupedKey, TRightItem>, GroupingEnumerator<TRightItem>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static JoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, Dictionary<TDictionaryKey, TRightItem>.ValueCollection, DictionaryValuesBridger<TDictionaryKey, TRightItem>, DictionaryValuesEnumerator<TDictionaryKey, TRightItem>>, DictionaryValuesEnumerator<TDictionaryKey, TRightItem>> Join<TOutItem, TKeyItem, TRightItem, TDictionaryKey>(this RangeEnumerable source, Dictionary<TDictionaryKey, TRightItem>.ValueCollection inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(inner, nameof(inner));
//            if (outerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(outerKeySelector));
//            if (innerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(innerKeySelector));
//            if (resultSelector == null) throw CommonImplementation.ArgumentNull(nameof(resultSelector));

//            return CommonImplementation.JoinImpl<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, Dictionary<TDictionaryKey, TRightItem>.ValueCollection, DictionaryValuesBridger<TDictionaryKey, TRightItem>, DictionaryValuesEnumerator<TDictionaryKey, TRightItem>>, DictionaryValuesEnumerator<TDictionaryKey, TRightItem>>(ref source, ref bridge, outerKeySelector, innerKeySelector, resultSelector);
//        }

//        public static JoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, SortedDictionary<TRightItem, TDictionaryValue>.KeyCollection, SortedDictionaryKeysBridger<TRightItem, TDictionaryValue>, SortedDictionaryKeysEnumerator<TRightItem, TDictionaryValue>>, SortedDictionaryKeysEnumerator<TRightItem, TDictionaryValue>> Join<TOutItem, TKeyItem, TRightItem, TDictionaryValue>(this RangeEnumerable source, SortedDictionary<TRightItem, TDictionaryValue>.KeyCollection inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(inner, nameof(inner));
//            if (outerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(outerKeySelector));
//            if (innerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(innerKeySelector));
//            if (resultSelector == null) throw CommonImplementation.ArgumentNull(nameof(resultSelector));

//            return CommonImplementation.JoinImpl<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, SortedDictionary<TRightItem, TDictionaryValue>.KeyCollection, SortedDictionaryKeysBridger<TRightItem, TDictionaryValue>, SortedDictionaryKeysEnumerator<TRightItem, TDictionaryValue>>, SortedDictionaryKeysEnumerator<TRightItem, TDictionaryValue>>(ref source, ref bridge, outerKeySelector, innerKeySelector, resultSelector);
//        }

//        public static JoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, GroupingEnumerable<TLookupKey, TLookupElement>, LookupDefaultEnumerable<TLookupKey, TLookupElement>, LookupDefaultEnumerator<TLookupKey, TLookupElement>> Join<TOutItem, TKeyItem, TLookupKey, TLookupElement>(this RangeEnumerable source, LookupDefaultEnumerable<TLookupKey, TLookupElement> inner, Func<int, TKeyItem> outerKeySelector, Func<GroupingEnumerable<TLookupKey, TLookupElement>, TKeyItem> innerKeySelector, Func<int, GroupingEnumerable<TLookupKey, TLookupElement>, TOutItem> resultSelector)
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, GroupingEnumerable<TLookupKey, TLookupElement>, LookupDefaultEnumerable<TLookupKey, TLookupElement>, LookupDefaultEnumerator<TLookupKey, TLookupElement>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static JoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, GroupingEnumerable<TLookupKey, TLookupElement>, LookupSpecificEnumerable<TLookupKey, TLookupElement>, LookupSpecificEnumerator<TLookupKey, TLookupElement>> Join<TOutItem, TKeyItem, TLookupKey, TLookupElement>(this RangeEnumerable source, LookupSpecificEnumerable<TLookupKey, TLookupElement> inner, Func<int, TKeyItem> outerKeySelector, Func<GroupingEnumerable<TLookupKey, TLookupElement>, TKeyItem> innerKeySelector, Func<int, GroupingEnumerable<TLookupKey, TLookupElement>, TOutItem> resultSelector)
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, GroupingEnumerable<TLookupKey, TLookupElement>, LookupSpecificEnumerable<TLookupKey, TLookupElement>, LookupSpecificEnumerator<TLookupKey, TLookupElement>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static JoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, SortedDictionary<TDictionaryKey, TRightItem>.ValueCollection, SortedDictionaryValuesBridger<TDictionaryKey, TRightItem>, SortedDictionaryValuesEnumerator<TDictionaryKey, TRightItem>>, SortedDictionaryValuesEnumerator<TDictionaryKey, TRightItem>> Join<TOutItem, TKeyItem, TRightItem, TDictionaryKey>(this RangeEnumerable source, SortedDictionary<TDictionaryKey, TRightItem>.ValueCollection inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(inner, nameof(inner));
//            if (outerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(outerKeySelector));
//            if (innerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(innerKeySelector));
//            if (resultSelector == null) throw CommonImplementation.ArgumentNull(nameof(resultSelector));

//            return CommonImplementation.JoinImpl<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, SortedDictionary<TDictionaryKey, TRightItem>.ValueCollection, SortedDictionaryValuesBridger<TDictionaryKey, TRightItem>, SortedDictionaryValuesEnumerator<TDictionaryKey, TRightItem>>, SortedDictionaryValuesEnumerator<TDictionaryKey, TRightItem>>(ref source, ref bridge, outerKeySelector, innerKeySelector, resultSelector);
//        }

//        public static JoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, KeyValuePair<TDictionaryKey, TDictionaryValue>, IdentityEnumerable<KeyValuePair<TDictionaryKey, TDictionaryValue>, SortedDictionary<TDictionaryKey, TDictionaryValue>, SortedDictionaryBridger<TDictionaryKey, TDictionaryValue>, SortedDictionaryEnumerator<TDictionaryKey, TDictionaryValue>>, SortedDictionaryEnumerator<TDictionaryKey, TDictionaryValue>> Join<TOutItem, TKeyItem, TDictionaryKey, TDictionaryValue>(this RangeEnumerable source, SortedDictionary<TDictionaryKey, TDictionaryValue> inner, Func<int, TKeyItem> outerKeySelector, Func<KeyValuePair<TDictionaryKey, TDictionaryValue>, TKeyItem> innerKeySelector, Func<int, KeyValuePair<TDictionaryKey, TDictionaryValue>, TOutItem> resultSelector)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(inner, nameof(inner));
//            if (outerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(outerKeySelector));
//            if (innerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(innerKeySelector));
//            if (resultSelector == null) throw CommonImplementation.ArgumentNull(nameof(resultSelector));

//            return CommonImplementation.JoinImpl<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, KeyValuePair<TDictionaryKey, TDictionaryValue>, IdentityEnumerable<KeyValuePair<TDictionaryKey, TDictionaryValue>, SortedDictionary<TDictionaryKey, TDictionaryValue>, SortedDictionaryBridger<TDictionaryKey, TDictionaryValue>, SortedDictionaryEnumerator<TDictionaryKey, TDictionaryValue>>, SortedDictionaryEnumerator<TDictionaryKey, TDictionaryValue>>(ref source, ref bridge, outerKeySelector, innerKeySelector, resultSelector);
//        }

//        public static JoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, KeyValuePair<TDictionaryKey, TDictionaryValue>, IdentityEnumerable<KeyValuePair<TDictionaryKey, TDictionaryValue>, Dictionary<TDictionaryKey, TDictionaryValue>, DictionaryBridger<TDictionaryKey, TDictionaryValue>, DictionaryEnumerator<TDictionaryKey, TDictionaryValue>>, DictionaryEnumerator<TDictionaryKey, TDictionaryValue>> Join<TOutItem, TKeyItem, TDictionaryKey, TDictionaryValue>(this RangeEnumerable source, Dictionary<TDictionaryKey, TDictionaryValue> inner, Func<int, TKeyItem> outerKeySelector, Func<KeyValuePair<TDictionaryKey, TDictionaryValue>, TKeyItem> innerKeySelector, Func<int, KeyValuePair<TDictionaryKey, TDictionaryValue>, TOutItem> resultSelector)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(inner, nameof(inner));
//            if (outerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(outerKeySelector));
//            if (innerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(innerKeySelector));
//            if (resultSelector == null) throw CommonImplementation.ArgumentNull(nameof(resultSelector));

//            return CommonImplementation.JoinImpl<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, KeyValuePair<TDictionaryKey, TDictionaryValue>, IdentityEnumerable<KeyValuePair<TDictionaryKey, TDictionaryValue>, Dictionary<TDictionaryKey, TDictionaryValue>, DictionaryBridger<TDictionaryKey, TDictionaryValue>, DictionaryEnumerator<TDictionaryKey, TDictionaryValue>>, DictionaryEnumerator<TDictionaryKey, TDictionaryValue>>(ref source, ref bridge, outerKeySelector, innerKeySelector, resultSelector);
//        }

//        public static JoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, GroupedEnumerable<TGroupedKey, TRightItem>, GroupedEnumerator<TRightItem>> Join<TOutItem, TKeyItem, TRightItem, TGroupedKey>(this RangeEnumerable source, GroupedEnumerable<TGroupedKey, TRightItem> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector)
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, GroupedEnumerable<TGroupedKey, TRightItem>, GroupedEnumerator<TRightItem>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static JoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, Dictionary<TRightItem, TDictionaryValue>.KeyCollection, DictionaryKeysBridger<TRightItem, TDictionaryValue>, DictionaryKeysEnumerator<TRightItem, TDictionaryValue>>, DictionaryKeysEnumerator<TRightItem, TDictionaryValue>> Join<TOutItem, TKeyItem, TRightItem, TDictionaryValue>(this RangeEnumerable source, Dictionary<TRightItem, TDictionaryValue>.KeyCollection inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(inner, nameof(inner));
//            if (outerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(outerKeySelector));
//            if (innerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(innerKeySelector));
//            if (resultSelector == null) throw CommonImplementation.ArgumentNull(nameof(resultSelector));

//            return CommonImplementation.JoinImpl<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, Dictionary<TRightItem, TDictionaryValue>.KeyCollection, DictionaryKeysBridger<TRightItem, TDictionaryValue>, DictionaryKeysEnumerator<TRightItem, TDictionaryValue>>, DictionaryKeysEnumerator<TRightItem, TDictionaryValue>>(ref source, ref bridge, outerKeySelector, innerKeySelector, resultSelector, comparer);
//        }

//        public static JoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, KeyValuePair<TDictionaryKey, TDictionaryValue>, IdentityEnumerable<KeyValuePair<TDictionaryKey, TDictionaryValue>, Dictionary<TDictionaryKey, TDictionaryValue>, DictionaryBridger<TDictionaryKey, TDictionaryValue>, DictionaryEnumerator<TDictionaryKey, TDictionaryValue>>, DictionaryEnumerator<TDictionaryKey, TDictionaryValue>> Join<TOutItem, TKeyItem, TDictionaryKey, TDictionaryValue>(this RangeEnumerable source, Dictionary<TDictionaryKey, TDictionaryValue> inner, Func<int, TKeyItem> outerKeySelector, Func<KeyValuePair<TDictionaryKey, TDictionaryValue>, TKeyItem> innerKeySelector, Func<int, KeyValuePair<TDictionaryKey, TDictionaryValue>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(inner, nameof(inner));
//            if (outerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(outerKeySelector));
//            if (innerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(innerKeySelector));
//            if (resultSelector == null) throw CommonImplementation.ArgumentNull(nameof(resultSelector));

//            return CommonImplementation.JoinImpl<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, KeyValuePair<TDictionaryKey, TDictionaryValue>, IdentityEnumerable<KeyValuePair<TDictionaryKey, TDictionaryValue>, Dictionary<TDictionaryKey, TDictionaryValue>, DictionaryBridger<TDictionaryKey, TDictionaryValue>, DictionaryEnumerator<TDictionaryKey, TDictionaryValue>>, DictionaryEnumerator<TDictionaryKey, TDictionaryValue>>(ref source, ref bridge, outerKeySelector, innerKeySelector, resultSelector, comparer);
//        }

//        public static JoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, SortedDictionary<TDictionaryKey, TRightItem>.ValueCollection, SortedDictionaryValuesBridger<TDictionaryKey, TRightItem>, SortedDictionaryValuesEnumerator<TDictionaryKey, TRightItem>>, SortedDictionaryValuesEnumerator<TDictionaryKey, TRightItem>> Join<TOutItem, TKeyItem, TRightItem, TDictionaryKey>(this RangeEnumerable source, SortedDictionary<TDictionaryKey, TRightItem>.ValueCollection inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(inner, nameof(inner));
//            if (outerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(outerKeySelector));
//            if (innerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(innerKeySelector));
//            if (resultSelector == null) throw CommonImplementation.ArgumentNull(nameof(resultSelector));

//            return CommonImplementation.JoinImpl<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, SortedDictionary<TDictionaryKey, TRightItem>.ValueCollection, SortedDictionaryValuesBridger<TDictionaryKey, TRightItem>, SortedDictionaryValuesEnumerator<TDictionaryKey, TRightItem>>, SortedDictionaryValuesEnumerator<TDictionaryKey, TRightItem>>(ref source, ref bridge, outerKeySelector, innerKeySelector, resultSelector, comparer);
//        }

//        public static JoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, SortedDictionary<TRightItem, TDictionaryValue>.KeyCollection, SortedDictionaryKeysBridger<TRightItem, TDictionaryValue>, SortedDictionaryKeysEnumerator<TRightItem, TDictionaryValue>>, SortedDictionaryKeysEnumerator<TRightItem, TDictionaryValue>> Join<TOutItem, TKeyItem, TRightItem, TDictionaryValue>(this RangeEnumerable source, SortedDictionary<TRightItem, TDictionaryValue>.KeyCollection inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(inner, nameof(inner));
//            if (outerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(outerKeySelector));
//            if (innerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(innerKeySelector));
//            if (resultSelector == null) throw CommonImplementation.ArgumentNull(nameof(resultSelector));

//            return CommonImplementation.JoinImpl<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, SortedDictionary<TRightItem, TDictionaryValue>.KeyCollection, SortedDictionaryKeysBridger<TRightItem, TDictionaryValue>, SortedDictionaryKeysEnumerator<TRightItem, TDictionaryValue>>, SortedDictionaryKeysEnumerator<TRightItem, TDictionaryValue>>(ref source, ref bridge, outerKeySelector, innerKeySelector, resultSelector, comparer);
//        }

//        public static JoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, GroupingEnumerable<TGroupedKey, TRightItem>, GroupingEnumerator<TRightItem>> Join<TOutItem, TKeyItem, TRightItem, TGroupedKey>(this RangeEnumerable source, GroupingEnumerable<TGroupedKey, TRightItem> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, GroupingEnumerable<TGroupedKey, TRightItem>, GroupingEnumerator<TRightItem>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static JoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, Dictionary<TDictionaryKey, TRightItem>.ValueCollection, DictionaryValuesBridger<TDictionaryKey, TRightItem>, DictionaryValuesEnumerator<TDictionaryKey, TRightItem>>, DictionaryValuesEnumerator<TDictionaryKey, TRightItem>> Join<TOutItem, TKeyItem, TRightItem, TDictionaryKey>(this RangeEnumerable source, Dictionary<TDictionaryKey, TRightItem>.ValueCollection inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(inner, nameof(inner));
//            if (outerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(outerKeySelector));
//            if (innerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(innerKeySelector));
//            if (resultSelector == null) throw CommonImplementation.ArgumentNull(nameof(resultSelector));

//            return CommonImplementation.JoinImpl<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, Dictionary<TDictionaryKey, TRightItem>.ValueCollection, DictionaryValuesBridger<TDictionaryKey, TRightItem>, DictionaryValuesEnumerator<TDictionaryKey, TRightItem>>, DictionaryValuesEnumerator<TDictionaryKey, TRightItem>>(ref source, ref bridge, outerKeySelector, innerKeySelector, resultSelector, comparer);
//        }

//        public static JoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, GroupingEnumerable<TLookupKey, TLookupElement>, LookupDefaultEnumerable<TLookupKey, TLookupElement>, LookupDefaultEnumerator<TLookupKey, TLookupElement>> Join<TOutItem, TKeyItem, TLookupKey, TLookupElement>(this RangeEnumerable source, LookupDefaultEnumerable<TLookupKey, TLookupElement> inner, Func<int, TKeyItem> outerKeySelector, Func<GroupingEnumerable<TLookupKey, TLookupElement>, TKeyItem> innerKeySelector, Func<int, GroupingEnumerable<TLookupKey, TLookupElement>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, GroupingEnumerable<TLookupKey, TLookupElement>, LookupDefaultEnumerable<TLookupKey, TLookupElement>, LookupDefaultEnumerator<TLookupKey, TLookupElement>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static JoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, GroupingEnumerable<TLookupKey, TLookupElement>, LookupSpecificEnumerable<TLookupKey, TLookupElement>, LookupSpecificEnumerator<TLookupKey, TLookupElement>> Join<TOutItem, TKeyItem, TLookupKey, TLookupElement>(this RangeEnumerable source, LookupSpecificEnumerable<TLookupKey, TLookupElement> inner, Func<int, TKeyItem> outerKeySelector, Func<GroupingEnumerable<TLookupKey, TLookupElement>, TKeyItem> innerKeySelector, Func<int, GroupingEnumerable<TLookupKey, TLookupElement>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, GroupingEnumerable<TLookupKey, TLookupElement>, LookupSpecificEnumerable<TLookupKey, TLookupElement>, LookupSpecificEnumerator<TLookupKey, TLookupElement>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static JoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, KeyValuePair<TDictionaryKey, TDictionaryValue>, IdentityEnumerable<KeyValuePair<TDictionaryKey, TDictionaryValue>, SortedDictionary<TDictionaryKey, TDictionaryValue>, SortedDictionaryBridger<TDictionaryKey, TDictionaryValue>, SortedDictionaryEnumerator<TDictionaryKey, TDictionaryValue>>, SortedDictionaryEnumerator<TDictionaryKey, TDictionaryValue>> Join<TOutItem, TKeyItem, TDictionaryKey, TDictionaryValue>(this RangeEnumerable source, SortedDictionary<TDictionaryKey, TDictionaryValue> inner, Func<int, TKeyItem> outerKeySelector, Func<KeyValuePair<TDictionaryKey, TDictionaryValue>, TKeyItem> innerKeySelector, Func<int, KeyValuePair<TDictionaryKey, TDictionaryValue>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(inner, nameof(inner));
//            if (outerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(outerKeySelector));
//            if (innerKeySelector == null) throw CommonImplementation.ArgumentNull(nameof(innerKeySelector));
//            if (resultSelector == null) throw CommonImplementation.ArgumentNull(nameof(resultSelector));

//            return CommonImplementation.JoinImpl<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, KeyValuePair<TDictionaryKey, TDictionaryValue>, IdentityEnumerable<KeyValuePair<TDictionaryKey, TDictionaryValue>, SortedDictionary<TDictionaryKey, TDictionaryValue>, SortedDictionaryBridger<TDictionaryKey, TDictionaryValue>, SortedDictionaryEnumerator<TDictionaryKey, TDictionaryValue>>, SortedDictionaryEnumerator<TDictionaryKey, TDictionaryValue>>(ref source, ref bridge, outerKeySelector, innerKeySelector, resultSelector, comparer);
//        }

//        public static JoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, GroupedEnumerable<TGroupedKey, TRightItem>, GroupedEnumerator<TRightItem>> Join<TOutItem, TKeyItem, TRightItem, TGroupedKey>(this RangeEnumerable source, GroupedEnumerable<TGroupedKey, TRightItem> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, GroupedEnumerable<TGroupedKey, TRightItem>, GroupedEnumerator<TRightItem>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static JoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, TakeWhileIndexedEnumerable<TRightItem, TTakeInnerEnumerable, TTakeInnerEnumerator>, TakeWhileIndexedEnumerator<TRightItem, TTakeInnerEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TTakeInnerEnumerable, TTakeInnerEnumerator>(this RangeEnumerable source, TakeWhileIndexedEnumerable<TRightItem, TTakeInnerEnumerable, TTakeInnerEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector)
//        where TTakeInnerEnumerable : struct, IStructEnumerable<TRightItem, TTakeInnerEnumerator>
//        where TTakeInnerEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, TakeWhileIndexedEnumerable<TRightItem, TTakeInnerEnumerable, TTakeInnerEnumerator>, TakeWhileIndexedEnumerator<TRightItem, TTakeInnerEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static JoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, DistinctSpecificEnumerable<TRightItem, TDistinctInnerEnumerable, TDistinctInnerEnumerator>, DistinctSpecificEnumerator<TRightItem, TDistinctInnerEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TDistinctInnerEnumerable, TDistinctInnerEnumerator>(this RangeEnumerable source, DistinctSpecificEnumerable<TRightItem, TDistinctInnerEnumerable, TDistinctInnerEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector)
//        where TDistinctInnerEnumerable : struct, IStructEnumerable<TRightItem, TDistinctInnerEnumerator>
//        where TDistinctInnerEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, DistinctSpecificEnumerable<TRightItem, TDistinctInnerEnumerable, TDistinctInnerEnumerator>, DistinctSpecificEnumerator<TRightItem, TDistinctInnerEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static JoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, WhereEnumerable<TRightItem, TWhereInnerEnumerable, TWhereInnerEnumerator>, WhereEnumerator<TRightItem, TWhereInnerEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TWhereInnerEnumerable, TWhereInnerEnumerator>(this RangeEnumerable source, WhereEnumerable<TRightItem, TWhereInnerEnumerable, TWhereInnerEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector)
//        where TWhereInnerEnumerable : struct, IStructEnumerable<TRightItem, TWhereInnerEnumerator>
//        where TWhereInnerEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, WhereEnumerable<TRightItem, TWhereInnerEnumerable, TWhereInnerEnumerator>, WhereEnumerator<TRightItem, TWhereInnerEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static JoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, WhereIndexedEnumerable<TRightItem, TWhereInnerEnumerable, TWhereInnerEnumerator>, WhereIndexedEnumerator<TRightItem, TWhereInnerEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TWhereInnerEnumerable, TWhereInnerEnumerator>(this RangeEnumerable source, WhereIndexedEnumerable<TRightItem, TWhereInnerEnumerable, TWhereInnerEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector)
//        where TWhereInnerEnumerable : struct, IStructEnumerable<TRightItem, TWhereInnerEnumerator>
//        where TWhereInnerEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, WhereIndexedEnumerable<TRightItem, TWhereInnerEnumerable, TWhereInnerEnumerator>, WhereIndexedEnumerator<TRightItem, TWhereInnerEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static JoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, DistinctDefaultEnumerable<TRightItem, TDistinctInnerEnumerable, TDistinctInnerEnumerator>, DistinctDefaultEnumerator<TRightItem, TDistinctInnerEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TDistinctInnerEnumerable, TDistinctInnerEnumerator>(this RangeEnumerable source, DistinctDefaultEnumerable<TRightItem, TDistinctInnerEnumerable, TDistinctInnerEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector)
//        where TDistinctInnerEnumerable : struct, IStructEnumerable<TRightItem, TDistinctInnerEnumerator>
//        where TDistinctInnerEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, DistinctDefaultEnumerable<TRightItem, TDistinctInnerEnumerable, TDistinctInnerEnumerator>, DistinctDefaultEnumerator<TRightItem, TDistinctInnerEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static JoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, ReverseEnumerable<TRightItem, TReverseInnerEnumerable, TReverseInnerEnumerator>, ReverseEnumerator<TRightItem>> Join<TOutItem, TKeyItem, TRightItem, TReverseInnerEnumerable, TReverseInnerEnumerator>(this RangeEnumerable source, ReverseEnumerable<TRightItem, TReverseInnerEnumerable, TReverseInnerEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector)
//        where TReverseInnerEnumerable : struct, IStructEnumerable<TRightItem, TReverseInnerEnumerator>
//        where TReverseInnerEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, ReverseEnumerable<TRightItem, TReverseInnerEnumerable, TReverseInnerEnumerator>, ReverseEnumerator<TRightItem>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static JoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, TBridgeType, TIdentityBridger, TIdentityEnumerator>, TIdentityEnumerator> Join<TOutItem, TKeyItem, TRightItem, TBridgeType, TIdentityBridger, TIdentityEnumerator>(this RangeEnumerable source, IdentityEnumerable<TRightItem, TBridgeType, TIdentityBridger, TIdentityEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector)
//        where TBridgeType : class
//        where TIdentityEnumerator : struct, IStructEnumerator<TRightItem>
//        where TIdentityBridger : struct, IStructBridger<TRightItem, TBridgeType, TIdentityEnumerator>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, TBridgeType, TIdentityBridger, TIdentityEnumerator>, TIdentityEnumerator>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static JoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SkipEnumerable<TRightItem, TSkipInnerEnumerable, TSkipInnerEnumerator>, SkipEnumerator<TRightItem, TSkipInnerEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TSkipInnerEnumerable, TSkipInnerEnumerator>(this RangeEnumerable source, SkipEnumerable<TRightItem, TSkipInnerEnumerable, TSkipInnerEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector)
//        where TSkipInnerEnumerable : struct, IStructEnumerable<TRightItem, TSkipInnerEnumerator>
//        where TSkipInnerEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SkipEnumerable<TRightItem, TSkipInnerEnumerable, TSkipInnerEnumerator>, SkipEnumerator<TRightItem, TSkipInnerEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static JoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SkipWhileIndexedEnumerable<TRightItem, TSkipInnerEnumerable, TSkipInnerEnumerator>, SkipWhileIndexedEnumerator<TRightItem, TSkipInnerEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TSkipInnerEnumerable, TSkipInnerEnumerator>(this RangeEnumerable source, SkipWhileIndexedEnumerable<TRightItem, TSkipInnerEnumerable, TSkipInnerEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector)
//        where TSkipInnerEnumerable : struct, IStructEnumerable<TRightItem, TSkipInnerEnumerator>
//        where TSkipInnerEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SkipWhileIndexedEnumerable<TRightItem, TSkipInnerEnumerable, TSkipInnerEnumerator>, SkipWhileIndexedEnumerator<TRightItem, TSkipInnerEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static JoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, TakeEnumerable<TRightItem, TTakeInnerEnumerable, TTakeInnerEnumerator>, TakeEnumerator<TRightItem, TTakeInnerEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TTakeInnerEnumerable, TTakeInnerEnumerator>(this RangeEnumerable source, TakeEnumerable<TRightItem, TTakeInnerEnumerable, TTakeInnerEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector)
//        where TTakeInnerEnumerable : struct, IStructEnumerable<TRightItem, TTakeInnerEnumerator>
//        where TTakeInnerEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, TakeEnumerable<TRightItem, TTakeInnerEnumerable, TTakeInnerEnumerator>, TakeEnumerator<TRightItem, TTakeInnerEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static JoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, TakeWhileEnumerable<TRightItem, TTakeInnerEnumerable, TTakeInnerEnumerator>, TakeWhileEnumerator<TRightItem, TTakeInnerEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TTakeInnerEnumerable, TTakeInnerEnumerator>(this RangeEnumerable source, TakeWhileEnumerable<TRightItem, TTakeInnerEnumerable, TTakeInnerEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector)
//        where TTakeInnerEnumerable : struct, IStructEnumerable<TRightItem, TTakeInnerEnumerator>
//        where TTakeInnerEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, TakeWhileEnumerable<TRightItem, TTakeInnerEnumerable, TTakeInnerEnumerator>, TakeWhileEnumerator<TRightItem, TTakeInnerEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static JoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SkipWhileEnumerable<TRightItem, TSkipInnerEnumerable, TSkipInnerEnumerator>, SkipWhileEnumerator<TRightItem, TSkipInnerEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TSkipInnerEnumerable, TSkipInnerEnumerator>(this RangeEnumerable source, SkipWhileEnumerable<TRightItem, TSkipInnerEnumerable, TSkipInnerEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector)
//        where TSkipInnerEnumerable : struct, IStructEnumerable<TRightItem, TSkipInnerEnumerator>
//        where TSkipInnerEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SkipWhileEnumerable<TRightItem, TSkipInnerEnumerable, TSkipInnerEnumerator>, SkipWhileEnumerator<TRightItem, TSkipInnerEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static JoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, DefaultIfEmptySpecificEnumerable<TRightItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>, DefaultIfEmptySpecificEnumerator<TRightItem, TDefaultIfEmptyInnerEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>(this RangeEnumerable source, DefaultIfEmptySpecificEnumerable<TRightItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector)
//        where TDefaultIfEmptyInnerEnumerable : struct, IStructEnumerable<TRightItem, TDefaultIfEmptyInnerEnumerator>
//        where TDefaultIfEmptyInnerEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, DefaultIfEmptySpecificEnumerable<TRightItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>, DefaultIfEmptySpecificEnumerator<TRightItem, TDefaultIfEmptyInnerEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static JoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, DefaultIfEmptyDefaultEnumerable<TRightItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>, DefaultIfEmptyDefaultEnumerator<TRightItem, TDefaultIfEmptyInnerEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>(this RangeEnumerable source, DefaultIfEmptyDefaultEnumerable<TRightItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector)
//        where TDefaultIfEmptyInnerEnumerable : struct, IStructEnumerable<TRightItem, TDefaultIfEmptyInnerEnumerator>
//        where TDefaultIfEmptyInnerEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, DefaultIfEmptyDefaultEnumerable<TRightItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>, DefaultIfEmptyDefaultEnumerator<TRightItem, TDefaultIfEmptyInnerEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static JoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, DistinctSpecificEnumerable<TRightItem, TDistinctInnerEnumerable, TDistinctInnerEnumerator>, DistinctSpecificEnumerator<TRightItem, TDistinctInnerEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TDistinctInnerEnumerable, TDistinctInnerEnumerator>(this RangeEnumerable source, DistinctSpecificEnumerable<TRightItem, TDistinctInnerEnumerable, TDistinctInnerEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TDistinctInnerEnumerable : struct, IStructEnumerable<TRightItem, TDistinctInnerEnumerator>
//        where TDistinctInnerEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, DistinctSpecificEnumerable<TRightItem, TDistinctInnerEnumerable, TDistinctInnerEnumerator>, DistinctSpecificEnumerator<TRightItem, TDistinctInnerEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static JoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SkipEnumerable<TRightItem, TSkipInnerEnumerable, TSkipInnerEnumerator>, SkipEnumerator<TRightItem, TSkipInnerEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TSkipInnerEnumerable, TSkipInnerEnumerator>(this RangeEnumerable source, SkipEnumerable<TRightItem, TSkipInnerEnumerable, TSkipInnerEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TSkipInnerEnumerable : struct, IStructEnumerable<TRightItem, TSkipInnerEnumerator>
//        where TSkipInnerEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SkipEnumerable<TRightItem, TSkipInnerEnumerable, TSkipInnerEnumerator>, SkipEnumerator<TRightItem, TSkipInnerEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static JoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, DistinctDefaultEnumerable<TRightItem, TDistinctInnerEnumerable, TDistinctInnerEnumerator>, DistinctDefaultEnumerator<TRightItem, TDistinctInnerEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TDistinctInnerEnumerable, TDistinctInnerEnumerator>(this RangeEnumerable source, DistinctDefaultEnumerable<TRightItem, TDistinctInnerEnumerable, TDistinctInnerEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TDistinctInnerEnumerable : struct, IStructEnumerable<TRightItem, TDistinctInnerEnumerator>
//        where TDistinctInnerEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, DistinctDefaultEnumerable<TRightItem, TDistinctInnerEnumerable, TDistinctInnerEnumerator>, DistinctDefaultEnumerator<TRightItem, TDistinctInnerEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static JoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, DefaultIfEmptySpecificEnumerable<TRightItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>, DefaultIfEmptySpecificEnumerator<TRightItem, TDefaultIfEmptyInnerEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>(this RangeEnumerable source, DefaultIfEmptySpecificEnumerable<TRightItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TDefaultIfEmptyInnerEnumerable : struct, IStructEnumerable<TRightItem, TDefaultIfEmptyInnerEnumerator>
//        where TDefaultIfEmptyInnerEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, DefaultIfEmptySpecificEnumerable<TRightItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>, DefaultIfEmptySpecificEnumerator<TRightItem, TDefaultIfEmptyInnerEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static JoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, ReverseEnumerable<TRightItem, TReverseInnerEnumerable, TReverseInnerEnumerator>, ReverseEnumerator<TRightItem>> Join<TOutItem, TKeyItem, TRightItem, TReverseInnerEnumerable, TReverseInnerEnumerator>(this RangeEnumerable source, ReverseEnumerable<TRightItem, TReverseInnerEnumerable, TReverseInnerEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TReverseInnerEnumerable : struct, IStructEnumerable<TRightItem, TReverseInnerEnumerator>
//        where TReverseInnerEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, ReverseEnumerable<TRightItem, TReverseInnerEnumerable, TReverseInnerEnumerator>, ReverseEnumerator<TRightItem>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static JoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, TakeWhileIndexedEnumerable<TRightItem, TTakeInnerEnumerable, TTakeInnerEnumerator>, TakeWhileIndexedEnumerator<TRightItem, TTakeInnerEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TTakeInnerEnumerable, TTakeInnerEnumerator>(this RangeEnumerable source, TakeWhileIndexedEnumerable<TRightItem, TTakeInnerEnumerable, TTakeInnerEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TTakeInnerEnumerable : struct, IStructEnumerable<TRightItem, TTakeInnerEnumerator>
//        where TTakeInnerEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, TakeWhileIndexedEnumerable<TRightItem, TTakeInnerEnumerable, TTakeInnerEnumerator>, TakeWhileIndexedEnumerator<TRightItem, TTakeInnerEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static JoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, TakeWhileEnumerable<TRightItem, TTakeInnerEnumerable, TTakeInnerEnumerator>, TakeWhileEnumerator<TRightItem, TTakeInnerEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TTakeInnerEnumerable, TTakeInnerEnumerator>(this RangeEnumerable source, TakeWhileEnumerable<TRightItem, TTakeInnerEnumerable, TTakeInnerEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TTakeInnerEnumerable : struct, IStructEnumerable<TRightItem, TTakeInnerEnumerator>
//        where TTakeInnerEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, TakeWhileEnumerable<TRightItem, TTakeInnerEnumerable, TTakeInnerEnumerator>, TakeWhileEnumerator<TRightItem, TTakeInnerEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static JoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, WhereIndexedEnumerable<TRightItem, TWhereInnerEnumerable, TWhereInnerEnumerator>, WhereIndexedEnumerator<TRightItem, TWhereInnerEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TWhereInnerEnumerable, TWhereInnerEnumerator>(this RangeEnumerable source, WhereIndexedEnumerable<TRightItem, TWhereInnerEnumerable, TWhereInnerEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TWhereInnerEnumerable : struct, IStructEnumerable<TRightItem, TWhereInnerEnumerator>
//        where TWhereInnerEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, WhereIndexedEnumerable<TRightItem, TWhereInnerEnumerable, TWhereInnerEnumerator>, WhereIndexedEnumerator<TRightItem, TWhereInnerEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static JoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, WhereEnumerable<TRightItem, TWhereInnerEnumerable, TWhereInnerEnumerator>, WhereEnumerator<TRightItem, TWhereInnerEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TWhereInnerEnumerable, TWhereInnerEnumerator>(this RangeEnumerable source, WhereEnumerable<TRightItem, TWhereInnerEnumerable, TWhereInnerEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TWhereInnerEnumerable : struct, IStructEnumerable<TRightItem, TWhereInnerEnumerator>
//        where TWhereInnerEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, WhereEnumerable<TRightItem, TWhereInnerEnumerable, TWhereInnerEnumerator>, WhereEnumerator<TRightItem, TWhereInnerEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static JoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, TakeEnumerable<TRightItem, TTakeInnerEnumerable, TTakeInnerEnumerator>, TakeEnumerator<TRightItem, TTakeInnerEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TTakeInnerEnumerable, TTakeInnerEnumerator>(this RangeEnumerable source, TakeEnumerable<TRightItem, TTakeInnerEnumerable, TTakeInnerEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TTakeInnerEnumerable : struct, IStructEnumerable<TRightItem, TTakeInnerEnumerator>
//        where TTakeInnerEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, TakeEnumerable<TRightItem, TTakeInnerEnumerable, TTakeInnerEnumerator>, TakeEnumerator<TRightItem, TTakeInnerEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static JoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, TBridgeType, TIdentityBridger, TIdentityEnumerator>, TIdentityEnumerator> Join<TOutItem, TKeyItem, TRightItem, TBridgeType, TIdentityBridger, TIdentityEnumerator>(this RangeEnumerable source, IdentityEnumerable<TRightItem, TBridgeType, TIdentityBridger, TIdentityEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TBridgeType : class
//        where TIdentityEnumerator : struct, IStructEnumerator<TRightItem>
//        where TIdentityBridger : struct, IStructBridger<TRightItem, TBridgeType, TIdentityEnumerator>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IdentityEnumerable<TRightItem, TBridgeType, TIdentityBridger, TIdentityEnumerator>, TIdentityEnumerator>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static JoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SkipWhileIndexedEnumerable<TRightItem, TSkipInnerEnumerable, TSkipInnerEnumerator>, SkipWhileIndexedEnumerator<TRightItem, TSkipInnerEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TSkipInnerEnumerable, TSkipInnerEnumerator>(this RangeEnumerable source, SkipWhileIndexedEnumerable<TRightItem, TSkipInnerEnumerable, TSkipInnerEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TSkipInnerEnumerable : struct, IStructEnumerable<TRightItem, TSkipInnerEnumerator>
//        where TSkipInnerEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SkipWhileIndexedEnumerable<TRightItem, TSkipInnerEnumerable, TSkipInnerEnumerator>, SkipWhileIndexedEnumerator<TRightItem, TSkipInnerEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static JoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SkipWhileEnumerable<TRightItem, TSkipInnerEnumerable, TSkipInnerEnumerator>, SkipWhileEnumerator<TRightItem, TSkipInnerEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TSkipInnerEnumerable, TSkipInnerEnumerator>(this RangeEnumerable source, SkipWhileEnumerable<TRightItem, TSkipInnerEnumerable, TSkipInnerEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TSkipInnerEnumerable : struct, IStructEnumerable<TRightItem, TSkipInnerEnumerator>
//        where TSkipInnerEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SkipWhileEnumerable<TRightItem, TSkipInnerEnumerable, TSkipInnerEnumerator>, SkipWhileEnumerator<TRightItem, TSkipInnerEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static JoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, DefaultIfEmptyDefaultEnumerable<TRightItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>, DefaultIfEmptyDefaultEnumerator<TRightItem, TDefaultIfEmptyInnerEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>(this RangeEnumerable source, DefaultIfEmptyDefaultEnumerable<TRightItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TDefaultIfEmptyInnerEnumerable : struct, IStructEnumerable<TRightItem, TDefaultIfEmptyInnerEnumerator>
//        where TDefaultIfEmptyInnerEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, DefaultIfEmptyDefaultEnumerable<TRightItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>, DefaultIfEmptyDefaultEnumerator<TRightItem, TDefaultIfEmptyInnerEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static JoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectIndexedEnumerable<TSelectInItem, TRightItem, TSelectInnerEnumerable, TSelectInnerEnumerator>, SelectIndexedEnumerator<TSelectInItem, TRightItem, TSelectInnerEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TSelectInItem, TSelectInnerEnumerable, TSelectInnerEnumerator>(this RangeEnumerable source, SelectIndexedEnumerable<TSelectInItem, TRightItem, TSelectInnerEnumerable, TSelectInnerEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector)
//        where TSelectInnerEnumerable : struct, IStructEnumerable<TSelectInItem, TSelectInnerEnumerator>
//        where TSelectInnerEnumerator : struct, IStructEnumerator<TSelectInItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectIndexedEnumerable<TSelectInItem, TRightItem, TSelectInnerEnumerable, TSelectInnerEnumerator>, SelectIndexedEnumerator<TSelectInItem, TRightItem, TSelectInnerEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static JoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, OrderByEnumerable<TRightItem, TOrderByKey, TOrderByInnerEnumerable, TOrderByInnerEnumerator, TOrderByComparer>, OrderByEnumerator<TRightItem, TOrderByKey, TOrderByInnerEnumerator, TOrderByComparer>> Join<TOutItem, TKeyItem, TRightItem, TOrderByKey, TOrderByInnerEnumerable, TOrderByInnerEnumerator, TOrderByComparer>(this RangeEnumerable source, OrderByEnumerable<TRightItem, TOrderByKey, TOrderByInnerEnumerable, TOrderByInnerEnumerator, TOrderByComparer> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector)
//        where TOrderByInnerEnumerable : struct, IStructEnumerable<TRightItem, TOrderByInnerEnumerator>
//        where TOrderByInnerEnumerator : struct, IStructEnumerator<TRightItem>
//        where TOrderByComparer : struct, IStructComparer<TRightItem, TOrderByKey>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, OrderByEnumerable<TRightItem, TOrderByKey, TOrderByInnerEnumerable, TOrderByInnerEnumerator, TOrderByComparer>, OrderByEnumerator<TRightItem, TOrderByKey, TOrderByInnerEnumerator, TOrderByComparer>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static JoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectEnumerable<TSelectInItem, TRightItem, TSelectInnerEnumerable, TSelectInnerEnumerator>, SelectEnumerator<TSelectInItem, TRightItem, TSelectInnerEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TSelectInItem, TSelectInnerEnumerable, TSelectInnerEnumerator>(this RangeEnumerable source, SelectEnumerable<TSelectInItem, TRightItem, TSelectInnerEnumerable, TSelectInnerEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector)
//        where TSelectInnerEnumerable : struct, IStructEnumerable<TSelectInItem, TSelectInnerEnumerator>
//        where TSelectInnerEnumerator : struct, IStructEnumerator<TSelectInItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectEnumerable<TSelectInItem, TRightItem, TSelectInnerEnumerable, TSelectInnerEnumerator>, SelectEnumerator<TSelectInItem, TRightItem, TSelectInnerEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static JoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, WhereWhereEnumerable<TRightItem, TWhereInnerEnumerable, TWhereInnerEnumerator, TWherePredicate>, WhereWhereEnumerator<TRightItem, TWhereInnerEnumerator, TWherePredicate>> Join<TOutItem, TKeyItem, TRightItem, TWhereInnerEnumerable, TWhereInnerEnumerator, TWherePredicate>(this RangeEnumerable source, WhereWhereEnumerable<TRightItem, TWhereInnerEnumerable, TWhereInnerEnumerator, TWherePredicate> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector)
//        where TWhereInnerEnumerable : struct, IStructEnumerable<TRightItem, TWhereInnerEnumerator>
//        where TWhereInnerEnumerator : struct, IStructEnumerator<TRightItem>
//        where TWherePredicate : struct, IStructPredicate<TRightItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, WhereWhereEnumerable<TRightItem, TWhereInnerEnumerable, TWhereInnerEnumerator, TWherePredicate>, WhereWhereEnumerator<TRightItem, TWhereInnerEnumerator, TWherePredicate>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static JoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, OfTypeEnumerable<TOfTypeInItem, TRightItem, TOfTypeInnerEnumerable, TOfTypeInnerEnumerator>, OfTypeEnumerator<TOfTypeInItem, TRightItem, TOfTypeInnerEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TOfTypeInItem, TOfTypeInnerEnumerable, TOfTypeInnerEnumerator>(this RangeEnumerable source, OfTypeEnumerable<TOfTypeInItem, TRightItem, TOfTypeInnerEnumerable, TOfTypeInnerEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector)
//        where TOfTypeInnerEnumerable : struct, IStructEnumerable<TOfTypeInItem, TOfTypeInnerEnumerator>
//        where TOfTypeInnerEnumerator : struct, IStructEnumerator<TOfTypeInItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, OfTypeEnumerable<TOfTypeInItem, TRightItem, TOfTypeInnerEnumerable, TOfTypeInnerEnumerator>, OfTypeEnumerator<TOfTypeInItem, TRightItem, TOfTypeInnerEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static JoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, CastEnumerable<TCastInItem, TRightItem, TCastInnerEnumerable, TCastInnerEnumerator>, CastEnumerator<TCastInItem, TRightItem, TCastInnerEnumerator>> Join<TOutItem, TCastInItem, TKeyItem, TRightItem, TCastInnerEnumerable, TCastInnerEnumerator>(this RangeEnumerable source, CastEnumerable<TCastInItem, TRightItem, TCastInnerEnumerable, TCastInnerEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector)
//        where TCastInnerEnumerable : struct, IStructEnumerable<TCastInItem, TCastInnerEnumerator>
//        where TCastInnerEnumerator : struct, IStructEnumerator<TCastInItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, CastEnumerable<TCastInItem, TRightItem, TCastInnerEnumerable, TCastInnerEnumerator>, CastEnumerator<TCastInItem, TRightItem, TCastInnerEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static JoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, OrderByEnumerable<TRightItem, TOrderByKey, TOrderByInnerEnumerable, TOrderByInnerEnumerator, TOrderByComparer>, OrderByEnumerator<TRightItem, TOrderByKey, TOrderByInnerEnumerator, TOrderByComparer>> Join<TOutItem, TKeyItem, TRightItem, TOrderByKey, TOrderByInnerEnumerable, TOrderByInnerEnumerator, TOrderByComparer>(this RangeEnumerable source, OrderByEnumerable<TRightItem, TOrderByKey, TOrderByInnerEnumerable, TOrderByInnerEnumerator, TOrderByComparer> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TOrderByInnerEnumerable : struct, IStructEnumerable<TRightItem, TOrderByInnerEnumerator>
//        where TOrderByInnerEnumerator : struct, IStructEnumerator<TRightItem>
//        where TOrderByComparer : struct, IStructComparer<TRightItem, TOrderByKey>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, OrderByEnumerable<TRightItem, TOrderByKey, TOrderByInnerEnumerable, TOrderByInnerEnumerator, TOrderByComparer>, OrderByEnumerator<TRightItem, TOrderByKey, TOrderByInnerEnumerator, TOrderByComparer>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static JoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectIndexedEnumerable<TSelectInItem, TRightItem, TSelectInnerEnumerable, TSelectInnerEnumerator>, SelectIndexedEnumerator<TSelectInItem, TRightItem, TSelectInnerEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TSelectInItem, TSelectInnerEnumerable, TSelectInnerEnumerator>(this RangeEnumerable source, SelectIndexedEnumerable<TSelectInItem, TRightItem, TSelectInnerEnumerable, TSelectInnerEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TSelectInnerEnumerable : struct, IStructEnumerable<TSelectInItem, TSelectInnerEnumerator>
//        where TSelectInnerEnumerator : struct, IStructEnumerator<TSelectInItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectIndexedEnumerable<TSelectInItem, TRightItem, TSelectInnerEnumerable, TSelectInnerEnumerator>, SelectIndexedEnumerator<TSelectInItem, TRightItem, TSelectInnerEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static JoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, WhereWhereEnumerable<TRightItem, TWhereInnerEnumerable, TWhereInnerEnumerator, TWherePredicate>, WhereWhereEnumerator<TRightItem, TWhereInnerEnumerator, TWherePredicate>> Join<TOutItem, TKeyItem, TRightItem, TWhereInnerEnumerable, TWhereInnerEnumerator, TWherePredicate>(this RangeEnumerable source, WhereWhereEnumerable<TRightItem, TWhereInnerEnumerable, TWhereInnerEnumerator, TWherePredicate> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TWhereInnerEnumerable : struct, IStructEnumerable<TRightItem, TWhereInnerEnumerator>
//        where TWhereInnerEnumerator : struct, IStructEnumerator<TRightItem>
//        where TWherePredicate : struct, IStructPredicate<TRightItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, WhereWhereEnumerable<TRightItem, TWhereInnerEnumerable, TWhereInnerEnumerator, TWherePredicate>, WhereWhereEnumerator<TRightItem, TWhereInnerEnumerator, TWherePredicate>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static JoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectEnumerable<TSelectInItem, TRightItem, TSelectInnerEnumerable, TSelectInnerEnumerator>, SelectEnumerator<TSelectInItem, TRightItem, TSelectInnerEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TSelectInItem, TSelectInnerEnumerable, TSelectInnerEnumerator>(this RangeEnumerable source, SelectEnumerable<TSelectInItem, TRightItem, TSelectInnerEnumerable, TSelectInnerEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TSelectInnerEnumerable : struct, IStructEnumerable<TSelectInItem, TSelectInnerEnumerator>
//        where TSelectInnerEnumerator : struct, IStructEnumerator<TSelectInItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectEnumerable<TSelectInItem, TRightItem, TSelectInnerEnumerable, TSelectInnerEnumerator>, SelectEnumerator<TSelectInItem, TRightItem, TSelectInnerEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static JoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, OfTypeEnumerable<TOfTypeInItem, TRightItem, TOfTypeInnerEnumerable, TOfTypeInnerEnumerator>, OfTypeEnumerator<TOfTypeInItem, TRightItem, TOfTypeInnerEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TOfTypeInItem, TOfTypeInnerEnumerable, TOfTypeInnerEnumerator>(this RangeEnumerable source, OfTypeEnumerable<TOfTypeInItem, TRightItem, TOfTypeInnerEnumerable, TOfTypeInnerEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TOfTypeInnerEnumerable : struct, IStructEnumerable<TOfTypeInItem, TOfTypeInnerEnumerator>
//        where TOfTypeInnerEnumerator : struct, IStructEnumerator<TOfTypeInItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, OfTypeEnumerable<TOfTypeInItem, TRightItem, TOfTypeInnerEnumerable, TOfTypeInnerEnumerator>, OfTypeEnumerator<TOfTypeInItem, TRightItem, TOfTypeInnerEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static JoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, CastEnumerable<TCastInItem, TRightItem, TCastInnerEnumerable, TCastInnerEnumerator>, CastEnumerator<TCastInItem, TRightItem, TCastInnerEnumerator>> Join<TOutItem, TCastInItem, TKeyItem, TRightItem, TCastInnerEnumerable, TCastInnerEnumerator>(this RangeEnumerable source, CastEnumerable<TCastInItem, TRightItem, TCastInnerEnumerable, TCastInnerEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TCastInnerEnumerable : struct, IStructEnumerable<TCastInItem, TCastInnerEnumerator>
//        where TCastInnerEnumerator : struct, IStructEnumerator<TCastInItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, CastEnumerable<TCastInItem, TRightItem, TCastInnerEnumerable, TCastInnerEnumerator>, CastEnumerator<TCastInItem, TRightItem, TCastInnerEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static JoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, UnionSpecificEnumerable<TRightItem, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator>, UnionSpecificEnumerator<TRightItem, TUnionFirstEnumerator, TUnionSecondEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator>(this RangeEnumerable source, UnionSpecificEnumerable<TRightItem, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector)
//        where TUnionFirstEnumerable : struct, IStructEnumerable<TRightItem, TUnionFirstEnumerator>
//        where TUnionFirstEnumerator : struct, IStructEnumerator<TRightItem>
//        where TUnionSecondEnumerable : struct, IStructEnumerable<TRightItem, TUnionSecondEnumerator>
//        where TUnionSecondEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, UnionSpecificEnumerable<TRightItem, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator>, UnionSpecificEnumerator<TRightItem, TUnionFirstEnumerator, TUnionSecondEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static JoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, ExceptDefaultEnumerable<TRightItem, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>, ExceptDefaultEnumerator<TRightItem, TExceptFirstEnumerator, TExceptSecondEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>(this RangeEnumerable source, ExceptDefaultEnumerable<TRightItem, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector)
//        where TExceptFirstEnumerable : struct, IStructEnumerable<TRightItem, TExceptFirstEnumerator>
//        where TExceptFirstEnumerator : struct, IStructEnumerator<TRightItem>
//        where TExceptSecondEnumerable : struct, IStructEnumerable<TRightItem, TExceptSecondEnumerator>
//        where TExceptSecondEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, ExceptDefaultEnumerable<TRightItem, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>, ExceptDefaultEnumerator<TRightItem, TExceptFirstEnumerator, TExceptSecondEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static JoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectSelectEnumerable<TRightItem, TSelectInnerItem, TSelectInnerEnumerable, TSelectInnerEnumerator, TSelectProjection>, SelectSelectEnumerator<TRightItem, TSelectInnerItem, TSelectInnerEnumerator, TSelectProjection>> Join<TOutItem, TKeyItem, TRightItem, TSelectInnerItem, TSelectInnerEnumerable, TSelectInnerEnumerator, TSelectProjection>(this RangeEnumerable source, SelectSelectEnumerable<TRightItem, TSelectInnerItem, TSelectInnerEnumerable, TSelectInnerEnumerator, TSelectProjection> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector)
//        where TSelectInnerEnumerable : struct, IStructEnumerable<TSelectInnerItem, TSelectInnerEnumerator>
//        where TSelectInnerEnumerator : struct, IStructEnumerator<TSelectInnerItem>
//        where TSelectProjection : struct, IStructProjection<TRightItem, TSelectInnerItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectSelectEnumerable<TRightItem, TSelectInnerItem, TSelectInnerEnumerable, TSelectInnerEnumerator, TSelectProjection>, SelectSelectEnumerator<TRightItem, TSelectInnerItem, TSelectInnerEnumerator, TSelectProjection>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static JoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, ExceptSpecificEnumerable<TRightItem, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>, ExceptSpecificEnumerator<TRightItem, TExceptFirstEnumerator, TExceptSecondEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>(this RangeEnumerable source, ExceptSpecificEnumerable<TRightItem, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector)
//        where TExceptFirstEnumerable : struct, IStructEnumerable<TRightItem, TExceptFirstEnumerator>
//        where TExceptFirstEnumerator : struct, IStructEnumerator<TRightItem>
//        where TExceptSecondEnumerable : struct, IStructEnumerable<TRightItem, TExceptSecondEnumerator>
//        where TExceptSecondEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, ExceptSpecificEnumerable<TRightItem, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>, ExceptSpecificEnumerator<TRightItem, TExceptFirstEnumerator, TExceptSecondEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static JoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, GroupingEnumerable<TGroupByKey, TGroupByElement>, GroupByDefaultEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByEnumerable, TGroupByEnumerator>, GroupByDefaultEnumerator<TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByEnumerator>> Join<TOutItem, TKeyItem, TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByEnumerable, TGroupByEnumerator>(this RangeEnumerable source, GroupByDefaultEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByEnumerable, TGroupByEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<GroupingEnumerable<TGroupByKey, TGroupByElement>, TKeyItem> innerKeySelector, Func<int, GroupingEnumerable<TGroupByKey, TGroupByElement>, TOutItem> resultSelector)
//        where TGroupByEnumerable : struct, IStructEnumerable<TGroupByInItem, TGroupByEnumerator>
//        where TGroupByEnumerator : struct, IStructEnumerator<TGroupByInItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, GroupingEnumerable<TGroupByKey, TGroupByElement>, GroupByDefaultEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByEnumerable, TGroupByEnumerator>, GroupByDefaultEnumerator<TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static JoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IntersectDefaultEnumerable<TRightItem, TIntersectFirstEnumerable, TIntersectFirstEnumerator, TIntersectSecondEnumerable, TIntersectSecondEnumerator>, IntersectDefaultEnumerator<TRightItem, TIntersectFirstEnumerator, TIntersectSecondEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TIntersectFirstEnumerable, TIntersectFirstEnumerator, TIntersectSecondEnumerable, TIntersectSecondEnumerator>(this RangeEnumerable source, IntersectDefaultEnumerable<TRightItem, TIntersectFirstEnumerable, TIntersectFirstEnumerator, TIntersectSecondEnumerable, TIntersectSecondEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector)
//        where TIntersectFirstEnumerable : struct, IStructEnumerable<TRightItem, TIntersectFirstEnumerator>
//        where TIntersectFirstEnumerator : struct, IStructEnumerator<TRightItem>
//        where TIntersectSecondEnumerable : struct, IStructEnumerable<TRightItem, TIntersectSecondEnumerator>
//        where TIntersectSecondEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IntersectDefaultEnumerable<TRightItem, TIntersectFirstEnumerable, TIntersectFirstEnumerator, TIntersectSecondEnumerable, TIntersectSecondEnumerator>, IntersectDefaultEnumerator<TRightItem, TIntersectFirstEnumerator, TIntersectSecondEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static JoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IntersectSpecificEnumerable<TRightItem, TIntersectFirstEnumerable, TIntersectFirstEnumerator, TIntersectSecondEnumerable, TIntersectSecondEnumerator>, IntersectSpecificEnumerator<TRightItem, TIntersectFirstEnumerator, TIntersectSecondEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TIntersectFirstEnumerable, TIntersectFirstEnumerator, TIntersectSecondEnumerable, TIntersectSecondEnumerator>(this RangeEnumerable source, IntersectSpecificEnumerable<TRightItem, TIntersectFirstEnumerable, TIntersectFirstEnumerator, TIntersectSecondEnumerable, TIntersectSecondEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector)
//        where TIntersectFirstEnumerable : struct, IStructEnumerable<TRightItem, TIntersectFirstEnumerator>
//        where TIntersectFirstEnumerator : struct, IStructEnumerator<TRightItem>
//        where TIntersectSecondEnumerable : struct, IStructEnumerable<TRightItem, TIntersectSecondEnumerator>
//        where TIntersectSecondEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IntersectSpecificEnumerable<TRightItem, TIntersectFirstEnumerable, TIntersectFirstEnumerator, TIntersectSecondEnumerable, TIntersectSecondEnumerator>, IntersectSpecificEnumerator<TRightItem, TIntersectFirstEnumerator, TIntersectSecondEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static JoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, GroupingEnumerable<TGroupByKey, TGroupByElement>, GroupBySpecificEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByEnumerable, TGroupByEnumerator>, GroupBySpecificEnumerator<TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByEnumerator>> Join<TOutItem, TKeyItem, TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByEnumerable, TGroupByEnumerator>(this RangeEnumerable source, GroupBySpecificEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByEnumerable, TGroupByEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<GroupingEnumerable<TGroupByKey, TGroupByElement>, TKeyItem> innerKeySelector, Func<int, GroupingEnumerable<TGroupByKey, TGroupByElement>, TOutItem> resultSelector)
//        where TGroupByEnumerable : struct, IStructEnumerable<TGroupByInItem, TGroupByEnumerator>
//        where TGroupByEnumerator : struct, IStructEnumerator<TGroupByInItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, GroupingEnumerable<TGroupByKey, TGroupByElement>, GroupBySpecificEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByEnumerable, TGroupByEnumerator>, GroupBySpecificEnumerator<TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static JoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, UnionDefaultEnumerable<TRightItem, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator>, UnionDefaultEnumerator<TRightItem, TUnionFirstEnumerator, TUnionSecondEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator>(this RangeEnumerable source, UnionDefaultEnumerable<TRightItem, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector)
//        where TUnionFirstEnumerable : struct, IStructEnumerable<TRightItem, TUnionFirstEnumerator>
//        where TUnionFirstEnumerator : struct, IStructEnumerator<TRightItem>
//        where TUnionSecondEnumerable : struct, IStructEnumerable<TRightItem, TUnionSecondEnumerator>
//        where TUnionSecondEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, UnionDefaultEnumerable<TRightItem, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator>, UnionDefaultEnumerator<TRightItem, TUnionFirstEnumerator, TUnionSecondEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static JoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, ConcatEnumerable<TRightItem, TConcatFirstEnumerable, TConcatFirstEnumerator, TConcatSecondEnumerable, TConcatSecondEnumerator>, ConcatEnumerator<TRightItem, TConcatFirstEnumerator, TConcatSecondEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TConcatFirstEnumerable, TConcatFirstEnumerator, TConcatSecondEnumerable, TConcatSecondEnumerator>(this RangeEnumerable source, ConcatEnumerable<TRightItem, TConcatFirstEnumerable, TConcatFirstEnumerator, TConcatSecondEnumerable, TConcatSecondEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector)
//        where TConcatFirstEnumerable : struct, IStructEnumerable<TRightItem, TConcatFirstEnumerator>
//        where TConcatFirstEnumerator : struct, IStructEnumerator<TRightItem>
//        where TConcatSecondEnumerable : struct, IStructEnumerable<TRightItem, TConcatSecondEnumerator>
//        where TConcatSecondEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, ConcatEnumerable<TRightItem, TConcatFirstEnumerable, TConcatFirstEnumerator, TConcatSecondEnumerable, TConcatSecondEnumerator>, ConcatEnumerator<TRightItem, TConcatFirstEnumerator, TConcatSecondEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static JoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, ExceptSpecificEnumerable<TRightItem, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>, ExceptSpecificEnumerator<TRightItem, TExceptFirstEnumerator, TExceptSecondEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>(this RangeEnumerable source, ExceptSpecificEnumerable<TRightItem, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TExceptFirstEnumerable : struct, IStructEnumerable<TRightItem, TExceptFirstEnumerator>
//        where TExceptFirstEnumerator : struct, IStructEnumerator<TRightItem>
//        where TExceptSecondEnumerable : struct, IStructEnumerable<TRightItem, TExceptSecondEnumerator>
//        where TExceptSecondEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, ExceptSpecificEnumerable<TRightItem, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>, ExceptSpecificEnumerator<TRightItem, TExceptFirstEnumerator, TExceptSecondEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static JoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectSelectEnumerable<TRightItem, TSelectInnerItem, TSelectInnerEnumerable, TSelectInnerEnumerator, TSelectProjection>, SelectSelectEnumerator<TRightItem, TSelectInnerItem, TSelectInnerEnumerator, TSelectProjection>> Join<TOutItem, TKeyItem, TRightItem, TSelectInnerItem, TSelectInnerEnumerable, TSelectInnerEnumerator, TSelectProjection>(this RangeEnumerable source, SelectSelectEnumerable<TRightItem, TSelectInnerItem, TSelectInnerEnumerable, TSelectInnerEnumerator, TSelectProjection> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TSelectInnerEnumerable : struct, IStructEnumerable<TSelectInnerItem, TSelectInnerEnumerator>
//        where TSelectInnerEnumerator : struct, IStructEnumerator<TSelectInnerItem>
//        where TSelectProjection : struct, IStructProjection<TRightItem, TSelectInnerItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectSelectEnumerable<TRightItem, TSelectInnerItem, TSelectInnerEnumerable, TSelectInnerEnumerator, TSelectProjection>, SelectSelectEnumerator<TRightItem, TSelectInnerItem, TSelectInnerEnumerator, TSelectProjection>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static JoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, GroupingEnumerable<TGroupByKey, TGroupByElement>, GroupByDefaultEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByEnumerable, TGroupByEnumerator>, GroupByDefaultEnumerator<TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByEnumerator>> Join<TOutItem, TKeyItem, TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByEnumerable, TGroupByEnumerator>(this RangeEnumerable source, GroupByDefaultEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByEnumerable, TGroupByEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<GroupingEnumerable<TGroupByKey, TGroupByElement>, TKeyItem> innerKeySelector, Func<int, GroupingEnumerable<TGroupByKey, TGroupByElement>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TGroupByEnumerable : struct, IStructEnumerable<TGroupByInItem, TGroupByEnumerator>
//        where TGroupByEnumerator : struct, IStructEnumerator<TGroupByInItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, GroupingEnumerable<TGroupByKey, TGroupByElement>, GroupByDefaultEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByEnumerable, TGroupByEnumerator>, GroupByDefaultEnumerator<TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static JoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, ExceptDefaultEnumerable<TRightItem, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>, ExceptDefaultEnumerator<TRightItem, TExceptFirstEnumerator, TExceptSecondEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>(this RangeEnumerable source, ExceptDefaultEnumerable<TRightItem, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TExceptFirstEnumerable : struct, IStructEnumerable<TRightItem, TExceptFirstEnumerator>
//        where TExceptFirstEnumerator : struct, IStructEnumerator<TRightItem>
//        where TExceptSecondEnumerable : struct, IStructEnumerable<TRightItem, TExceptSecondEnumerator>
//        where TExceptSecondEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, ExceptDefaultEnumerable<TRightItem, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>, ExceptDefaultEnumerator<TRightItem, TExceptFirstEnumerator, TExceptSecondEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static JoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IntersectSpecificEnumerable<TRightItem, TIntersectFirstEnumerable, TIntersectFirstEnumerator, TIntersectSecondEnumerable, TIntersectSecondEnumerator>, IntersectSpecificEnumerator<TRightItem, TIntersectFirstEnumerator, TIntersectSecondEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TIntersectFirstEnumerable, TIntersectFirstEnumerator, TIntersectSecondEnumerable, TIntersectSecondEnumerator>(this RangeEnumerable source, IntersectSpecificEnumerable<TRightItem, TIntersectFirstEnumerable, TIntersectFirstEnumerator, TIntersectSecondEnumerable, TIntersectSecondEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TIntersectFirstEnumerable : struct, IStructEnumerable<TRightItem, TIntersectFirstEnumerator>
//        where TIntersectFirstEnumerator : struct, IStructEnumerator<TRightItem>
//        where TIntersectSecondEnumerable : struct, IStructEnumerable<TRightItem, TIntersectSecondEnumerator>
//        where TIntersectSecondEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IntersectSpecificEnumerable<TRightItem, TIntersectFirstEnumerable, TIntersectFirstEnumerator, TIntersectSecondEnumerable, TIntersectSecondEnumerator>, IntersectSpecificEnumerator<TRightItem, TIntersectFirstEnumerator, TIntersectSecondEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static JoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IntersectDefaultEnumerable<TRightItem, TIntersectFirstEnumerable, TIntersectFirstEnumerator, TIntersectSecondEnumerable, TIntersectSecondEnumerator>, IntersectDefaultEnumerator<TRightItem, TIntersectFirstEnumerator, TIntersectSecondEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TIntersectFirstEnumerable, TIntersectFirstEnumerator, TIntersectSecondEnumerable, TIntersectSecondEnumerator>(this RangeEnumerable source, IntersectDefaultEnumerable<TRightItem, TIntersectFirstEnumerable, TIntersectFirstEnumerator, TIntersectSecondEnumerable, TIntersectSecondEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TIntersectFirstEnumerable : struct, IStructEnumerable<TRightItem, TIntersectFirstEnumerator>
//        where TIntersectFirstEnumerator : struct, IStructEnumerator<TRightItem>
//        where TIntersectSecondEnumerable : struct, IStructEnumerable<TRightItem, TIntersectSecondEnumerator>
//        where TIntersectSecondEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, IntersectDefaultEnumerable<TRightItem, TIntersectFirstEnumerable, TIntersectFirstEnumerator, TIntersectSecondEnumerable, TIntersectSecondEnumerator>, IntersectDefaultEnumerator<TRightItem, TIntersectFirstEnumerator, TIntersectSecondEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static JoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, GroupingEnumerable<TGroupByKey, TGroupByElement>, GroupBySpecificEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByEnumerable, TGroupByEnumerator>, GroupBySpecificEnumerator<TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByEnumerator>> Join<TOutItem, TKeyItem, TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByEnumerable, TGroupByEnumerator>(this RangeEnumerable source, GroupBySpecificEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByEnumerable, TGroupByEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<GroupingEnumerable<TGroupByKey, TGroupByElement>, TKeyItem> innerKeySelector, Func<int, GroupingEnumerable<TGroupByKey, TGroupByElement>, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TGroupByEnumerable : struct, IStructEnumerable<TGroupByInItem, TGroupByEnumerator>
//        where TGroupByEnumerator : struct, IStructEnumerator<TGroupByInItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, GroupingEnumerable<TGroupByKey, TGroupByElement>, GroupBySpecificEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByEnumerable, TGroupByEnumerator>, GroupBySpecificEnumerator<TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static JoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, UnionSpecificEnumerable<TRightItem, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator>, UnionSpecificEnumerator<TRightItem, TUnionFirstEnumerator, TUnionSecondEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator>(this RangeEnumerable source, UnionSpecificEnumerable<TRightItem, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TUnionFirstEnumerable : struct, IStructEnumerable<TRightItem, TUnionFirstEnumerator>
//        where TUnionFirstEnumerator : struct, IStructEnumerator<TRightItem>
//        where TUnionSecondEnumerable : struct, IStructEnumerable<TRightItem, TUnionSecondEnumerator>
//        where TUnionSecondEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, UnionSpecificEnumerable<TRightItem, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator>, UnionSpecificEnumerator<TRightItem, TUnionFirstEnumerator, TUnionSecondEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static JoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, UnionDefaultEnumerable<TRightItem, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator>, UnionDefaultEnumerator<TRightItem, TUnionFirstEnumerator, TUnionSecondEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator>(this RangeEnumerable source, UnionDefaultEnumerable<TRightItem, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TUnionFirstEnumerable : struct, IStructEnumerable<TRightItem, TUnionFirstEnumerator>
//        where TUnionFirstEnumerator : struct, IStructEnumerator<TRightItem>
//        where TUnionSecondEnumerable : struct, IStructEnumerable<TRightItem, TUnionSecondEnumerator>
//        where TUnionSecondEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, UnionDefaultEnumerable<TRightItem, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator>, UnionDefaultEnumerator<TRightItem, TUnionFirstEnumerator, TUnionSecondEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static JoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, ConcatEnumerable<TRightItem, TConcatFirstEnumerable, TConcatFirstEnumerator, TConcatSecondEnumerable, TConcatSecondEnumerator>, ConcatEnumerator<TRightItem, TConcatFirstEnumerator, TConcatSecondEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TConcatFirstEnumerable, TConcatFirstEnumerator, TConcatSecondEnumerable, TConcatSecondEnumerator>(this RangeEnumerable source, ConcatEnumerable<TRightItem, TConcatFirstEnumerable, TConcatFirstEnumerator, TConcatSecondEnumerable, TConcatSecondEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TConcatFirstEnumerable : struct, IStructEnumerable<TRightItem, TConcatFirstEnumerator>
//        where TConcatFirstEnumerator : struct, IStructEnumerator<TRightItem>
//        where TConcatSecondEnumerable : struct, IStructEnumerable<TRightItem, TConcatSecondEnumerator>
//        where TConcatSecondEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, ConcatEnumerable<TRightItem, TConcatFirstEnumerable, TConcatFirstEnumerator, TConcatSecondEnumerable, TConcatSecondEnumerator>, ConcatEnumerator<TRightItem, TConcatFirstEnumerator, TConcatSecondEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static JoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectWhereEnumerable<TRightItem, TSelectInnerItem, TSelectInnerEnumerable, TSelectInnerEnumerator, TSelectProjection, TSelectPredicate>, SelectWhereEnumerator<TRightItem, TSelectInnerItem, TSelectInnerEnumerator, TSelectProjection, TSelectPredicate>> Join<TOutItem, TKeyItem, TRightItem, TSelectInnerItem, TSelectInnerEnumerable, TSelectInnerEnumerator, TSelectProjection, TSelectPredicate>(this RangeEnumerable source, SelectWhereEnumerable<TRightItem, TSelectInnerItem, TSelectInnerEnumerable, TSelectInnerEnumerator, TSelectProjection, TSelectPredicate> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector)
//        where TSelectInnerEnumerable : struct, IStructEnumerable<TSelectInnerItem, TSelectInnerEnumerator>
//        where TSelectInnerEnumerator : struct, IStructEnumerator<TSelectInnerItem>
//        where TSelectProjection : struct, IStructProjection<TRightItem, TSelectInnerItem>
//        where TSelectPredicate : struct, IStructPredicate<TRightItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectWhereEnumerable<TRightItem, TSelectInnerItem, TSelectInnerEnumerable, TSelectInnerEnumerator, TSelectProjection, TSelectPredicate>, SelectWhereEnumerator<TRightItem, TSelectInnerItem, TSelectInnerEnumerator, TSelectProjection, TSelectPredicate>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static JoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectManyBridgeEnumerable<TSelectManyInItem, TRightItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyBridgeEnumerator<TSelectManyInItem, TRightItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TSelectManyInItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyBridgeEnumerable<TSelectManyInItem, TRightItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector)
//        where TSelectManyBridgeType : class
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectManyInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectManyInItem>
//        where TSelectManyProjectedEnumerator : struct, IStructEnumerator<TRightItem>
//        where TSelectManyBridger : struct, IStructBridger<TRightItem, TSelectManyBridgeType, TSelectManyProjectedEnumerator>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectManyBridgeEnumerable<TSelectManyInItem, TRightItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyBridgeEnumerator<TSelectManyInItem, TRightItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static JoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectManyEnumerable<TSelectManyInItem, TRightItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>, SelectManyEnumerator<TSelectManyInItem, TRightItem, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TSelectManyInItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyEnumerable<TSelectManyInItem, TRightItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector)
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectManyInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectManyInItem>
//        where TSelectManyProjectedEnumerable : struct, IStructEnumerable<TRightItem, TSelectManyProjectedEnumerator>
//        where TSelectManyProjectedEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectManyEnumerable<TSelectManyInItem, TRightItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>, SelectManyEnumerator<TSelectManyInItem, TRightItem, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static JoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectManyIndexedEnumerable<TSelectManyInItem, TRightItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>, SelectManyIndexedEnumerator<TSelectManyInItem, TRightItem, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TSelectManyInItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyIndexedEnumerable<TSelectManyInItem, TRightItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector)
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectManyInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectManyInItem>
//        where TSelectManyProjectedEnumerable : struct, IStructEnumerable<TRightItem, TSelectManyProjectedEnumerator>
//        where TSelectManyProjectedEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectManyIndexedEnumerable<TSelectManyInItem, TRightItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>, SelectManyIndexedEnumerator<TSelectManyInItem, TRightItem, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static JoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, GroupByCollectionSpecificEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, TRightItem, TGroupByEnumerable, TGroupByEnumerator>, GroupByCollectionSpecificEnumerator<TGroupByInItem, TGroupByKey, TGroupByElement, TRightItem, TGroupByEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByEnumerable, TGroupByEnumerator>(this RangeEnumerable source, GroupByCollectionSpecificEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, TRightItem, TGroupByEnumerable, TGroupByEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector)
//        where TGroupByEnumerable : struct, IStructEnumerable<TGroupByInItem, TGroupByEnumerator>
//        where TGroupByEnumerator : struct, IStructEnumerator<TGroupByInItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, GroupByCollectionSpecificEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, TRightItem, TGroupByEnumerable, TGroupByEnumerator>, GroupByCollectionSpecificEnumerator<TGroupByInItem, TGroupByKey, TGroupByElement, TRightItem, TGroupByEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static JoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, WhereSelectEnumerable<TRightItem, TWhereInnerItem, TWhereInnerEnumerable, TWhereInnerEnumerator, TWherePredicate, TWhereProjection>, WhereSelectEnumerator<TRightItem, TWhereInnerItem, TWhereInnerEnumerator, TWherePredicate, TWhereProjection>> Join<TOutItem, TKeyItem, TRightItem, TWhereInnerItem, TWhereInnerEnumerable, TWhereInnerEnumerator, TWherePredicate, TWhereProjection>(this RangeEnumerable source, WhereSelectEnumerable<TRightItem, TWhereInnerItem, TWhereInnerEnumerable, TWhereInnerEnumerator, TWherePredicate, TWhereProjection> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector)
//        where TWhereInnerEnumerable : struct, IStructEnumerable<TWhereInnerItem, TWhereInnerEnumerator>
//        where TWhereInnerEnumerator : struct, IStructEnumerator<TWhereInnerItem>
//        where TWherePredicate : struct, IStructPredicate<TWhereInnerItem>
//        where TWhereProjection : struct, IStructProjection<TRightItem, TWhereInnerItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, WhereSelectEnumerable<TRightItem, TWhereInnerItem, TWhereInnerEnumerable, TWhereInnerEnumerator, TWherePredicate, TWhereProjection>, WhereSelectEnumerator<TRightItem, TWhereInnerItem, TWhereInnerEnumerator, TWherePredicate, TWhereProjection>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static JoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectManyIndexedBridgeEnumerable<TSelectManyInItem, TRightItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyIndexedBridgeEnumerator<TSelectManyInItem, TRightItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TSelectManyInItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyIndexedBridgeEnumerable<TSelectManyInItem, TRightItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector)
//        where TSelectManyBridgeType : class
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectManyInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectManyInItem>
//        where TSelectManyProjectedEnumerator : struct, IStructEnumerator<TRightItem>
//        where TSelectManyBridger : struct, IStructBridger<TRightItem, TSelectManyBridgeType, TSelectManyProjectedEnumerator>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectManyIndexedBridgeEnumerable<TSelectManyInItem, TRightItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyIndexedBridgeEnumerator<TSelectManyInItem, TRightItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static JoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, GroupByCollectionDefaultEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, TRightItem, TGroupByEnumerable, TGroupByEnumerator>, GroupByCollectionDefaultEnumerator<TGroupByInItem, TGroupByKey, TGroupByElement, TRightItem, TGroupByEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByEnumerable, TGroupByEnumerator>(this RangeEnumerable source, GroupByCollectionDefaultEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, TRightItem, TGroupByEnumerable, TGroupByEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector)
//        where TGroupByEnumerable : struct, IStructEnumerable<TGroupByInItem, TGroupByEnumerator>
//        where TGroupByEnumerator : struct, IStructEnumerator<TGroupByInItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, GroupByCollectionDefaultEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, TRightItem, TGroupByEnumerable, TGroupByEnumerator>, GroupByCollectionDefaultEnumerator<TGroupByInItem, TGroupByKey, TGroupByElement, TRightItem, TGroupByEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static JoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, GroupByCollectionSpecificEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, TRightItem, TGroupByEnumerable, TGroupByEnumerator>, GroupByCollectionSpecificEnumerator<TGroupByInItem, TGroupByKey, TGroupByElement, TRightItem, TGroupByEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByEnumerable, TGroupByEnumerator>(this RangeEnumerable source, GroupByCollectionSpecificEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, TRightItem, TGroupByEnumerable, TGroupByEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TGroupByEnumerable : struct, IStructEnumerable<TGroupByInItem, TGroupByEnumerator>
//        where TGroupByEnumerator : struct, IStructEnumerator<TGroupByInItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, GroupByCollectionSpecificEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, TRightItem, TGroupByEnumerable, TGroupByEnumerator>, GroupByCollectionSpecificEnumerator<TGroupByInItem, TGroupByKey, TGroupByElement, TRightItem, TGroupByEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static JoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectWhereEnumerable<TRightItem, TSelectInnerItem, TSelectInnerEnumerable, TSelectInnerEnumerator, TSelectProjection, TSelectPredicate>, SelectWhereEnumerator<TRightItem, TSelectInnerItem, TSelectInnerEnumerator, TSelectProjection, TSelectPredicate>> Join<TOutItem, TKeyItem, TRightItem, TSelectInnerItem, TSelectInnerEnumerable, TSelectInnerEnumerator, TSelectProjection, TSelectPredicate>(this RangeEnumerable source, SelectWhereEnumerable<TRightItem, TSelectInnerItem, TSelectInnerEnumerable, TSelectInnerEnumerator, TSelectProjection, TSelectPredicate> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TSelectInnerEnumerable : struct, IStructEnumerable<TSelectInnerItem, TSelectInnerEnumerator>
//        where TSelectInnerEnumerator : struct, IStructEnumerator<TSelectInnerItem>
//        where TSelectProjection : struct, IStructProjection<TRightItem, TSelectInnerItem>
//        where TSelectPredicate : struct, IStructPredicate<TRightItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectWhereEnumerable<TRightItem, TSelectInnerItem, TSelectInnerEnumerable, TSelectInnerEnumerator, TSelectProjection, TSelectPredicate>, SelectWhereEnumerator<TRightItem, TSelectInnerItem, TSelectInnerEnumerator, TSelectProjection, TSelectPredicate>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static JoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectManyBridgeEnumerable<TSelectManyInItem, TRightItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyBridgeEnumerator<TSelectManyInItem, TRightItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TSelectManyInItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyBridgeEnumerable<TSelectManyInItem, TRightItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TSelectManyBridgeType : class
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectManyInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectManyInItem>
//        where TSelectManyProjectedEnumerator : struct, IStructEnumerator<TRightItem>
//        where TSelectManyBridger : struct, IStructBridger<TRightItem, TSelectManyBridgeType, TSelectManyProjectedEnumerator>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectManyBridgeEnumerable<TSelectManyInItem, TRightItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyBridgeEnumerator<TSelectManyInItem, TRightItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static JoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectManyIndexedBridgeEnumerable<TSelectManyInItem, TRightItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyIndexedBridgeEnumerator<TSelectManyInItem, TRightItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TSelectManyInItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyIndexedBridgeEnumerable<TSelectManyInItem, TRightItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TSelectManyBridgeType : class
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectManyInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectManyInItem>
//        where TSelectManyProjectedEnumerator : struct, IStructEnumerator<TRightItem>
//        where TSelectManyBridger : struct, IStructBridger<TRightItem, TSelectManyBridgeType, TSelectManyProjectedEnumerator>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectManyIndexedBridgeEnumerable<TSelectManyInItem, TRightItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyIndexedBridgeEnumerator<TSelectManyInItem, TRightItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static JoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectManyEnumerable<TSelectManyInItem, TRightItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>, SelectManyEnumerator<TSelectManyInItem, TRightItem, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TSelectManyInItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyEnumerable<TSelectManyInItem, TRightItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectManyInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectManyInItem>
//        where TSelectManyProjectedEnumerable : struct, IStructEnumerable<TRightItem, TSelectManyProjectedEnumerator>
//        where TSelectManyProjectedEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectManyEnumerable<TSelectManyInItem, TRightItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>, SelectManyEnumerator<TSelectManyInItem, TRightItem, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static JoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectManyIndexedEnumerable<TSelectManyInItem, TRightItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>, SelectManyIndexedEnumerator<TSelectManyInItem, TRightItem, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TSelectManyInItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyIndexedEnumerable<TSelectManyInItem, TRightItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectManyInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectManyInItem>
//        where TSelectManyProjectedEnumerable : struct, IStructEnumerable<TRightItem, TSelectManyProjectedEnumerator>
//        where TSelectManyProjectedEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectManyIndexedEnumerable<TSelectManyInItem, TRightItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>, SelectManyIndexedEnumerator<TSelectManyInItem, TRightItem, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static JoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, WhereSelectEnumerable<TRightItem, TWhereInnerItem, TWhereInnerEnumerable, TWhereInnerEnumerator, TWherePredicate, TWhereProjection>, WhereSelectEnumerator<TRightItem, TWhereInnerItem, TWhereInnerEnumerator, TWherePredicate, TWhereProjection>> Join<TOutItem, TKeyItem, TRightItem, TWhereInnerItem, TWhereInnerEnumerable, TWhereInnerEnumerator, TWherePredicate, TWhereProjection>(this RangeEnumerable source, WhereSelectEnumerable<TRightItem, TWhereInnerItem, TWhereInnerEnumerable, TWhereInnerEnumerator, TWherePredicate, TWhereProjection> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TWhereInnerEnumerable : struct, IStructEnumerable<TWhereInnerItem, TWhereInnerEnumerator>
//        where TWhereInnerEnumerator : struct, IStructEnumerator<TWhereInnerItem>
//        where TWherePredicate : struct, IStructPredicate<TWhereInnerItem>
//        where TWhereProjection : struct, IStructProjection<TRightItem, TWhereInnerItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, WhereSelectEnumerable<TRightItem, TWhereInnerItem, TWhereInnerEnumerable, TWhereInnerEnumerator, TWherePredicate, TWhereProjection>, WhereSelectEnumerator<TRightItem, TWhereInnerItem, TWhereInnerEnumerator, TWherePredicate, TWhereProjection>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static JoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, GroupByCollectionDefaultEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, TRightItem, TGroupByEnumerable, TGroupByEnumerator>, GroupByCollectionDefaultEnumerator<TGroupByInItem, TGroupByKey, TGroupByElement, TRightItem, TGroupByEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByEnumerable, TGroupByEnumerator>(this RangeEnumerable source, GroupByCollectionDefaultEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, TRightItem, TGroupByEnumerable, TGroupByEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TGroupByEnumerable : struct, IStructEnumerable<TGroupByInItem, TGroupByEnumerator>
//        where TGroupByEnumerator : struct, IStructEnumerator<TGroupByInItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, GroupByCollectionDefaultEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, TRightItem, TGroupByEnumerable, TGroupByEnumerator>, GroupByCollectionDefaultEnumerator<TGroupByInItem, TGroupByKey, TGroupByElement, TRightItem, TGroupByEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static JoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectManyCollectionIndexedEnumerable<TSelectManyInItem, TRightItem, TSelectManyCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>, SelectManyCollectionIndexedEnumerator<TSelectManyInItem, TRightItem, TSelectManyCollectionItem, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TSelectManyInItem, TSelectManyCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyCollectionIndexedEnumerable<TSelectManyInItem, TRightItem, TSelectManyCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector)
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectManyInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectManyInItem>
//        where TSelectManyProjectedEnumerable : struct, IStructEnumerable<TSelectManyCollectionItem, TSelectManyProjectedEnumerator>
//        where TSelectManyProjectedEnumerator : struct, IStructEnumerator<TSelectManyCollectionItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectManyCollectionIndexedEnumerable<TSelectManyInItem, TRightItem, TSelectManyCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>, SelectManyCollectionIndexedEnumerator<TSelectManyInItem, TRightItem, TSelectManyCollectionItem, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static JoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectManyCollectionEnumerable<TSelectManyInItem, TRightItem, TSelectManyCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>, SelectManyCollectionEnumerator<TSelectManyInItem, TRightItem, TSelectManyCollectionItem, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TSelectManyInItem, TSelectManyCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyCollectionEnumerable<TSelectManyInItem, TRightItem, TSelectManyCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector)
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectManyInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectManyInItem>
//        where TSelectManyProjectedEnumerable : struct, IStructEnumerable<TSelectManyCollectionItem, TSelectManyProjectedEnumerator>
//        where TSelectManyProjectedEnumerator : struct, IStructEnumerator<TSelectManyCollectionItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectManyCollectionEnumerable<TSelectManyInItem, TRightItem, TSelectManyCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>, SelectManyCollectionEnumerator<TSelectManyInItem, TRightItem, TSelectManyCollectionItem, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static JoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectManyCollectionIndexedBridgeEnumerable<TSelectManyInItem, TRightItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyCollectionIndexedBridgeEnumerator<TSelectManyInItem, TRightItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TSelectManyCollectionItem, TSelectManyInItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyCollectionIndexedBridgeEnumerable<TSelectManyInItem, TRightItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector)
//        where TSelectManyBridgeType : class
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectManyInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectManyInItem>
//        where TSelectManyProjectedEnumerator : struct, IStructEnumerator<TSelectManyCollectionItem>
//        where TSelectManyBridger : struct, IStructBridger<TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyProjectedEnumerator>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectManyCollectionIndexedBridgeEnumerable<TSelectManyInItem, TRightItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyCollectionIndexedBridgeEnumerator<TSelectManyInItem, TRightItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static JoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, ZipEnumerable<TRightItem, TZipFirstItem, TZipSecondItem, TZipFirstEnumerable, TZipFirstEnumerator, TZipSecondEnumerable, TZipSecondEnumerator>, ZipEnumerator<TRightItem, TZipFirstItem, TZipSecondItem, TZipFirstEnumerator, TZipSecondEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TZipFirstItem, TZipSecondItem, TZipFirstEnumerable, TZipFirstEnumerator, TZipSecondEnumerable, TZipSecondEnumerator>(this RangeEnumerable source, ZipEnumerable<TRightItem, TZipFirstItem, TZipSecondItem, TZipFirstEnumerable, TZipFirstEnumerator, TZipSecondEnumerable, TZipSecondEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector)
//        where TZipFirstEnumerable : struct, IStructEnumerable<TZipFirstItem, TZipFirstEnumerator>
//        where TZipFirstEnumerator : struct, IStructEnumerator<TZipFirstItem>
//        where TZipSecondEnumerable : struct, IStructEnumerable<TZipSecondItem, TZipSecondEnumerator>
//        where TZipSecondEnumerator : struct, IStructEnumerator<TZipSecondItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, ZipEnumerable<TRightItem, TZipFirstItem, TZipSecondItem, TZipFirstEnumerable, TZipFirstEnumerator, TZipSecondEnumerable, TZipSecondEnumerator>, ZipEnumerator<TRightItem, TZipFirstItem, TZipSecondItem, TZipFirstEnumerator, TZipSecondEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static JoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectManyCollectionBridgeEnumerable<TSelectManyInItem, TRightItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyCollectionBridgeEnumerator<TSelectManyInItem, TRightItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TSelectManyCollectionItem, TSelectManyInItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyCollectionBridgeEnumerable<TSelectManyInItem, TRightItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector)
//        where TSelectManyBridgeType : class
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectManyInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectManyInItem>
//        where TSelectManyProjectedEnumerator : struct, IStructEnumerator<TSelectManyCollectionItem>
//        where TSelectManyBridger : struct, IStructBridger<TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyProjectedEnumerator>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectManyCollectionBridgeEnumerable<TSelectManyInItem, TRightItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyCollectionBridgeEnumerator<TSelectManyInItem, TRightItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static JoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectManyCollectionIndexedEnumerable<TSelectManyInItem, TRightItem, TSelectManyCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>, SelectManyCollectionIndexedEnumerator<TSelectManyInItem, TRightItem, TSelectManyCollectionItem, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TSelectManyInItem, TSelectManyCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyCollectionIndexedEnumerable<TSelectManyInItem, TRightItem, TSelectManyCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectManyInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectManyInItem>
//        where TSelectManyProjectedEnumerable : struct, IStructEnumerable<TSelectManyCollectionItem, TSelectManyProjectedEnumerator>
//        where TSelectManyProjectedEnumerator : struct, IStructEnumerator<TSelectManyCollectionItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectManyCollectionIndexedEnumerable<TSelectManyInItem, TRightItem, TSelectManyCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>, SelectManyCollectionIndexedEnumerator<TSelectManyInItem, TRightItem, TSelectManyCollectionItem, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static JoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectManyCollectionEnumerable<TSelectManyInItem, TRightItem, TSelectManyCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>, SelectManyCollectionEnumerator<TSelectManyInItem, TRightItem, TSelectManyCollectionItem, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TSelectManyInItem, TSelectManyCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyCollectionEnumerable<TSelectManyInItem, TRightItem, TSelectManyCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectManyInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectManyInItem>
//        where TSelectManyProjectedEnumerable : struct, IStructEnumerable<TSelectManyCollectionItem, TSelectManyProjectedEnumerator>
//        where TSelectManyProjectedEnumerator : struct, IStructEnumerator<TSelectManyCollectionItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectManyCollectionEnumerable<TSelectManyInItem, TRightItem, TSelectManyCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>, SelectManyCollectionEnumerator<TSelectManyInItem, TRightItem, TSelectManyCollectionItem, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static JoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectManyCollectionIndexedBridgeEnumerable<TSelectManyInItem, TRightItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyCollectionIndexedBridgeEnumerator<TSelectManyInItem, TRightItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TSelectManyCollectionItem, TSelectManyInItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyCollectionIndexedBridgeEnumerable<TSelectManyInItem, TRightItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TSelectManyBridgeType : class
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectManyInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectManyInItem>
//        where TSelectManyProjectedEnumerator : struct, IStructEnumerator<TSelectManyCollectionItem>
//        where TSelectManyBridger : struct, IStructBridger<TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyProjectedEnumerator>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectManyCollectionIndexedBridgeEnumerable<TSelectManyInItem, TRightItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyCollectionIndexedBridgeEnumerator<TSelectManyInItem, TRightItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static JoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, ZipEnumerable<TRightItem, TZipFirstItem, TZipSecondItem, TZipFirstEnumerable, TZipFirstEnumerator, TZipSecondEnumerable, TZipSecondEnumerator>, ZipEnumerator<TRightItem, TZipFirstItem, TZipSecondItem, TZipFirstEnumerator, TZipSecondEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TZipFirstItem, TZipSecondItem, TZipFirstEnumerable, TZipFirstEnumerator, TZipSecondEnumerable, TZipSecondEnumerator>(this RangeEnumerable source, ZipEnumerable<TRightItem, TZipFirstItem, TZipSecondItem, TZipFirstEnumerable, TZipFirstEnumerator, TZipSecondEnumerable, TZipSecondEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TZipFirstEnumerable : struct, IStructEnumerable<TZipFirstItem, TZipFirstEnumerator>
//        where TZipFirstEnumerator : struct, IStructEnumerator<TZipFirstItem>
//        where TZipSecondEnumerable : struct, IStructEnumerable<TZipSecondItem, TZipSecondEnumerator>
//        where TZipSecondEnumerator : struct, IStructEnumerator<TZipSecondItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, ZipEnumerable<TRightItem, TZipFirstItem, TZipSecondItem, TZipFirstEnumerable, TZipFirstEnumerator, TZipSecondEnumerable, TZipSecondEnumerator>, ZipEnumerator<TRightItem, TZipFirstItem, TZipSecondItem, TZipFirstEnumerator, TZipSecondEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static JoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectManyCollectionBridgeEnumerable<TSelectManyInItem, TRightItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyCollectionBridgeEnumerator<TSelectManyInItem, TRightItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TSelectManyCollectionItem, TSelectManyInItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyCollectionBridgeEnumerable<TSelectManyInItem, TRightItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TSelectManyBridgeType : class
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectManyInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectManyInItem>
//        where TSelectManyProjectedEnumerator : struct, IStructEnumerator<TSelectManyCollectionItem>
//        where TSelectManyBridger : struct, IStructBridger<TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyProjectedEnumerator>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SelectManyCollectionBridgeEnumerable<TSelectManyInItem, TRightItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyCollectionBridgeEnumerator<TSelectManyInItem, TRightItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static JoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, GroupJoinSpecificEnumerable<TRightItem, TGroupJoinKeyItem, TGroupJoinLeftItem, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRightItem, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator>, GroupJoinSpecificEnumerator<TRightItem, TGroupJoinKeyItem, TGroupJoinLeftItem, TGroupJoinLeftEnumerator, TGroupJoinRightItem, TGroupJoinRightEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TGroupJoinKeyItem, TGroupJoinLeftItem, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRightItem, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator>(this RangeEnumerable source, GroupJoinSpecificEnumerable<TRightItem, TGroupJoinKeyItem, TGroupJoinLeftItem, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRightItem, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector)
//        where TGroupJoinLeftEnumerable : struct, IStructEnumerable<TGroupJoinLeftItem, TGroupJoinLeftEnumerator>
//        where TGroupJoinLeftEnumerator : struct, IStructEnumerator<TGroupJoinLeftItem>
//        where TGroupJoinRightEnumerable : struct, IStructEnumerable<TGroupJoinRightItem, TGroupJoinRightEnumerator>
//        where TGroupJoinRightEnumerator : struct, IStructEnumerator<TGroupJoinRightItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, GroupJoinSpecificEnumerable<TRightItem, TGroupJoinKeyItem, TGroupJoinLeftItem, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRightItem, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator>, GroupJoinSpecificEnumerator<TRightItem, TGroupJoinKeyItem, TGroupJoinLeftItem, TGroupJoinLeftEnumerator, TGroupJoinRightItem, TGroupJoinRightEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static JoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, JoinSpecificEnumerable<TRightItem, TJoinKeyItem, TJoinLeftItem, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRightItem, TJoinRightEnumerable, TJoinRightEnumerator>, JoinSpecificEnumerator<TRightItem, TJoinKeyItem, TJoinLeftItem, TJoinLeftEnumerator, TJoinRightItem, TJoinRightEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TJoinKeyItem, TJoinLeftItem, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRightItem, TJoinRightEnumerable, TJoinRightEnumerator>(this RangeEnumerable source, JoinSpecificEnumerable<TRightItem, TJoinKeyItem, TJoinLeftItem, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRightItem, TJoinRightEnumerable, TJoinRightEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector)
//        where TJoinLeftEnumerable : struct, IStructEnumerable<TJoinLeftItem, TJoinLeftEnumerator>
//        where TJoinLeftEnumerator : struct, IStructEnumerator<TJoinLeftItem>
//        where TJoinRightEnumerable : struct, IStructEnumerable<TJoinRightItem, TJoinRightEnumerator>
//        where TJoinRightEnumerator : struct, IStructEnumerator<TJoinRightItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, JoinSpecificEnumerable<TRightItem, TJoinKeyItem, TJoinLeftItem, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRightItem, TJoinRightEnumerable, TJoinRightEnumerator>, JoinSpecificEnumerator<TRightItem, TJoinKeyItem, TJoinLeftItem, TJoinLeftEnumerator, TJoinRightItem, TJoinRightEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static JoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, JoinDefaultEnumerable<TRightItem, TJoinKeyItem, TJoinLeftItem, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRightItem, TJoinRightEnumerable, TJoinRightEnumerator>, JoinDefaultEnumerator<TRightItem, TJoinKeyItem, TJoinLeftItem, TJoinLeftEnumerator, TJoinRightItem, TJoinRightEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TJoinKeyItem, TJoinLeftItem, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRightItem, TJoinRightEnumerable, TJoinRightEnumerator>(this RangeEnumerable source, JoinDefaultEnumerable<TRightItem, TJoinKeyItem, TJoinLeftItem, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRightItem, TJoinRightEnumerable, TJoinRightEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector)
//        where TJoinLeftEnumerable : struct, IStructEnumerable<TJoinLeftItem, TJoinLeftEnumerator>
//        where TJoinLeftEnumerator : struct, IStructEnumerator<TJoinLeftItem>
//        where TJoinRightEnumerable : struct, IStructEnumerable<TJoinRightItem, TJoinRightEnumerator>
//        where TJoinRightEnumerator : struct, IStructEnumerator<TJoinRightItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, JoinDefaultEnumerable<TRightItem, TJoinKeyItem, TJoinLeftItem, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRightItem, TJoinRightEnumerable, TJoinRightEnumerator>, JoinDefaultEnumerator<TRightItem, TJoinKeyItem, TJoinLeftItem, TJoinLeftEnumerator, TJoinRightItem, TJoinRightEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static JoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, GroupJoinDefaultEnumerable<TRightItem, TGroupJoinKeyItem, TGroupJoinLeftItem, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRightItem, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator>, GroupJoinDefaultEnumerator<TRightItem, TGroupJoinKeyItem, TGroupJoinLeftItem, TGroupJoinLeftEnumerator, TGroupJoinRightItem, TGroupJoinRightEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TGroupJoinKeyItem, TGroupJoinLeftItem, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRightItem, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator>(this RangeEnumerable source, GroupJoinDefaultEnumerable<TRightItem, TGroupJoinKeyItem, TGroupJoinLeftItem, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRightItem, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector)
//        where TGroupJoinLeftEnumerable : struct, IStructEnumerable<TGroupJoinLeftItem, TGroupJoinLeftEnumerator>
//        where TGroupJoinLeftEnumerator : struct, IStructEnumerator<TGroupJoinLeftItem>
//        where TGroupJoinRightEnumerable : struct, IStructEnumerable<TGroupJoinRightItem, TGroupJoinRightEnumerator>
//        where TGroupJoinRightEnumerator : struct, IStructEnumerator<TGroupJoinRightItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, GroupJoinDefaultEnumerable<TRightItem, TGroupJoinKeyItem, TGroupJoinLeftItem, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRightItem, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator>, GroupJoinDefaultEnumerator<TRightItem, TGroupJoinKeyItem, TGroupJoinLeftItem, TGroupJoinLeftEnumerator, TGroupJoinRightItem, TGroupJoinRightEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static JoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, JoinSpecificEnumerable<TRightItem, TJoinKeyItem, TJoinLeftItem, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRightItem, TJoinRightEnumerable, TJoinRightEnumerator>, JoinSpecificEnumerator<TRightItem, TJoinKeyItem, TJoinLeftItem, TJoinLeftEnumerator, TJoinRightItem, TJoinRightEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TJoinKeyItem, TJoinLeftItem, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRightItem, TJoinRightEnumerable, TJoinRightEnumerator>(this RangeEnumerable source, JoinSpecificEnumerable<TRightItem, TJoinKeyItem, TJoinLeftItem, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRightItem, TJoinRightEnumerable, TJoinRightEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TJoinLeftEnumerable : struct, IStructEnumerable<TJoinLeftItem, TJoinLeftEnumerator>
//        where TJoinLeftEnumerator : struct, IStructEnumerator<TJoinLeftItem>
//        where TJoinRightEnumerable : struct, IStructEnumerable<TJoinRightItem, TJoinRightEnumerator>
//        where TJoinRightEnumerator : struct, IStructEnumerator<TJoinRightItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, JoinSpecificEnumerable<TRightItem, TJoinKeyItem, TJoinLeftItem, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRightItem, TJoinRightEnumerable, TJoinRightEnumerator>, JoinSpecificEnumerator<TRightItem, TJoinKeyItem, TJoinLeftItem, TJoinLeftEnumerator, TJoinRightItem, TJoinRightEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static JoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, JoinDefaultEnumerable<TRightItem, TJoinKeyItem, TJoinLeftItem, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRightItem, TJoinRightEnumerable, TJoinRightEnumerator>, JoinDefaultEnumerator<TRightItem, TJoinKeyItem, TJoinLeftItem, TJoinLeftEnumerator, TJoinRightItem, TJoinRightEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TJoinKeyItem, TJoinLeftItem, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRightItem, TJoinRightEnumerable, TJoinRightEnumerator>(this RangeEnumerable source, JoinDefaultEnumerable<TRightItem, TJoinKeyItem, TJoinLeftItem, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRightItem, TJoinRightEnumerable, TJoinRightEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TJoinLeftEnumerable : struct, IStructEnumerable<TJoinLeftItem, TJoinLeftEnumerator>
//        where TJoinLeftEnumerator : struct, IStructEnumerator<TJoinLeftItem>
//        where TJoinRightEnumerable : struct, IStructEnumerable<TJoinRightItem, TJoinRightEnumerator>
//        where TJoinRightEnumerator : struct, IStructEnumerator<TJoinRightItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, JoinDefaultEnumerable<TRightItem, TJoinKeyItem, TJoinLeftItem, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRightItem, TJoinRightEnumerable, TJoinRightEnumerator>, JoinDefaultEnumerator<TRightItem, TJoinKeyItem, TJoinLeftItem, TJoinLeftEnumerator, TJoinRightItem, TJoinRightEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static JoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, GroupJoinSpecificEnumerable<TRightItem, TGroupJoinKeyItem, TGroupJoinLeftItem, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRightItem, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator>, GroupJoinSpecificEnumerator<TRightItem, TGroupJoinKeyItem, TGroupJoinLeftItem, TGroupJoinLeftEnumerator, TGroupJoinRightItem, TGroupJoinRightEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TGroupJoinKeyItem, TGroupJoinLeftItem, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRightItem, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator>(this RangeEnumerable source, GroupJoinSpecificEnumerable<TRightItem, TGroupJoinKeyItem, TGroupJoinLeftItem, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRightItem, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TGroupJoinLeftEnumerable : struct, IStructEnumerable<TGroupJoinLeftItem, TGroupJoinLeftEnumerator>
//        where TGroupJoinLeftEnumerator : struct, IStructEnumerator<TGroupJoinLeftItem>
//        where TGroupJoinRightEnumerable : struct, IStructEnumerable<TGroupJoinRightItem, TGroupJoinRightEnumerator>
//        where TGroupJoinRightEnumerator : struct, IStructEnumerator<TGroupJoinRightItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, GroupJoinSpecificEnumerable<TRightItem, TGroupJoinKeyItem, TGroupJoinLeftItem, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRightItem, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator>, GroupJoinSpecificEnumerator<TRightItem, TGroupJoinKeyItem, TGroupJoinLeftItem, TGroupJoinLeftEnumerator, TGroupJoinRightItem, TGroupJoinRightEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static JoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, GroupJoinDefaultEnumerable<TRightItem, TGroupJoinKeyItem, TGroupJoinLeftItem, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRightItem, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator>, GroupJoinDefaultEnumerator<TRightItem, TGroupJoinKeyItem, TGroupJoinLeftItem, TGroupJoinLeftEnumerator, TGroupJoinRightItem, TGroupJoinRightEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TGroupJoinKeyItem, TGroupJoinLeftItem, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRightItem, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator>(this RangeEnumerable source, GroupJoinDefaultEnumerable<TRightItem, TGroupJoinKeyItem, TGroupJoinLeftItem, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRightItem, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TGroupJoinLeftEnumerable : struct, IStructEnumerable<TGroupJoinLeftItem, TGroupJoinLeftEnumerator>
//        where TGroupJoinLeftEnumerator : struct, IStructEnumerator<TGroupJoinLeftItem>
//        where TGroupJoinRightEnumerable : struct, IStructEnumerable<TGroupJoinRightItem, TGroupJoinRightEnumerator>
//        where TGroupJoinRightEnumerator : struct, IStructEnumerator<TGroupJoinRightItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, GroupJoinDefaultEnumerable<TRightItem, TGroupJoinKeyItem, TGroupJoinLeftItem, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRightItem, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator>, GroupJoinDefaultEnumerator<TRightItem, TGroupJoinKeyItem, TGroupJoinLeftItem, TGroupJoinLeftEnumerator, TGroupJoinRightItem, TGroupJoinRightEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static JoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, OneItemDefaultEnumerable<TRightItem>, OneItemDefaultEnumerator<TRightItem>> Join<TOutItem, TKeyItem, TRightItem>(this RangeEnumerable source, OneItemDefaultEnumerable<TRightItem> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector)
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, OneItemDefaultEnumerable<TRightItem>, OneItemDefaultEnumerator<TRightItem>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static JoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, OneItemDefaultEnumerable<TRightItem>, OneItemDefaultEnumerator<TRightItem>> Join<TOutItem, TKeyItem, TRightItem>(this RangeEnumerable source, OneItemDefaultEnumerable<TRightItem> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, OneItemDefaultEnumerable<TRightItem>, OneItemDefaultEnumerator<TRightItem>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static JoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, OneItemSpecificEnumerable<TRightItem>, OneItemSpecificEnumerator<TRightItem>> Join<TOutItem, TKeyItem, TRightItem>(this RangeEnumerable source, OneItemSpecificEnumerable<TRightItem> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector)
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, OneItemSpecificEnumerable<TRightItem>, OneItemSpecificEnumerator<TRightItem>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static JoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, OneItemSpecificEnumerable<TRightItem>, OneItemSpecificEnumerator<TRightItem>> Join<TOutItem, TKeyItem, TRightItem>(this RangeEnumerable source, OneItemSpecificEnumerable<TRightItem> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, OneItemSpecificEnumerable<TRightItem>, OneItemSpecificEnumerator<TRightItem>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static JoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, OneItemDefaultOrderedEnumerable<TRightItem>, OneItemDefaultOrderedEnumerator<TRightItem>> Join<TOutItem, TKeyItem, TRightItem>(this RangeEnumerable source, OneItemDefaultOrderedEnumerable<TRightItem> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector)
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, OneItemDefaultOrderedEnumerable<TRightItem>, OneItemDefaultOrderedEnumerator<TRightItem>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static JoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, OneItemDefaultOrderedEnumerable<TRightItem>, OneItemDefaultOrderedEnumerator<TRightItem>> Join<TOutItem, TKeyItem, TRightItem>(this RangeEnumerable source, OneItemDefaultOrderedEnumerable<TRightItem> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, OneItemDefaultOrderedEnumerable<TRightItem>, OneItemDefaultOrderedEnumerator<TRightItem>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static JoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, OneItemSpecificOrderedEnumerable<TRightItem>, OneItemSpecificOrderedEnumerator<TRightItem>> Join<TOutItem, TKeyItem, TRightItem>(this RangeEnumerable source, OneItemSpecificOrderedEnumerable<TRightItem> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector)
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, OneItemSpecificOrderedEnumerable<TRightItem>, OneItemSpecificOrderedEnumerator<TRightItem>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static JoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, OneItemSpecificOrderedEnumerable<TRightItem>, OneItemSpecificOrderedEnumerator<TRightItem>> Join<TOutItem, TKeyItem, TRightItem>(this RangeEnumerable source, OneItemSpecificOrderedEnumerable<TRightItem> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, OneItemSpecificOrderedEnumerable<TRightItem>, OneItemSpecificOrderedEnumerator<TRightItem>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static JoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SkipLastEnumerable<TRightItem, TSkipEnumerable, TSkipEnumerator>, SkipLastEnumerator<TRightItem, TSkipEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TSkipEnumerable, TSkipEnumerator>(this RangeEnumerable source, SkipLastEnumerable<TRightItem, TSkipEnumerable, TSkipEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector)
//        where TSkipEnumerable : struct, IStructEnumerable<TRightItem, TSkipEnumerator>
//        where TSkipEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SkipLastEnumerable<TRightItem, TSkipEnumerable, TSkipEnumerator>, SkipLastEnumerator<TRightItem, TSkipEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static JoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SkipLastEnumerable<TRightItem, TSkipEnumerable, TSkipEnumerator>, SkipLastEnumerator<TRightItem, TSkipEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TSkipEnumerable, TSkipEnumerator>(this RangeEnumerable source, SkipLastEnumerable<TRightItem, TSkipEnumerable, TSkipEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TSkipEnumerable : struct, IStructEnumerable<TRightItem, TSkipEnumerator>
//        where TSkipEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, SkipLastEnumerable<TRightItem, TSkipEnumerable, TSkipEnumerator>, SkipLastEnumerator<TRightItem, TSkipEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static JoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, TakeLastEnumerable<TRightItem, TTakeEnumerable, TTakeEnumerator>, TakeLastEnumerator<TRightItem, TTakeEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TTakeEnumerable, TTakeEnumerator>(this RangeEnumerable source, TakeLastEnumerable<TRightItem, TTakeEnumerable, TTakeEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector)
//        where TTakeEnumerable : struct, IStructEnumerable<TRightItem, TTakeEnumerator>
//        where TTakeEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, TakeLastEnumerable<TRightItem, TTakeEnumerable, TTakeEnumerator>, TakeLastEnumerator<TRightItem, TTakeEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static JoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, TakeLastEnumerable<TRightItem, TTakeEnumerable, TTakeEnumerator>, TakeLastEnumerator<TRightItem, TTakeEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TTakeEnumerable, TTakeEnumerator>(this RangeEnumerable source, TakeLastEnumerable<TRightItem, TTakeEnumerable, TTakeEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TTakeEnumerable : struct, IStructEnumerable<TRightItem, TTakeEnumerator>
//        where TTakeEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, TakeLastEnumerable<TRightItem, TTakeEnumerable, TTakeEnumerator>, TakeLastEnumerator<TRightItem, TTakeEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static JoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, AppendEnumerable<TRightItem, TAppendEnumerable, TAppendEnumerator>, AppendEnumerator<TRightItem, TAppendEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TAppendEnumerable, TAppendEnumerator>(this RangeEnumerable source, AppendEnumerable<TRightItem, TAppendEnumerable, TAppendEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector)
//        where TAppendEnumerable : struct, IStructEnumerable<TRightItem, TAppendEnumerator>
//        where TAppendEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, AppendEnumerable<TRightItem, TAppendEnumerable, TAppendEnumerator>, AppendEnumerator<TRightItem, TAppendEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static JoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, AppendEnumerable<TRightItem, TAppendEnumerable, TAppendEnumerator>, AppendEnumerator<TRightItem, TAppendEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TAppendEnumerable, TAppendEnumerator>(this RangeEnumerable source, AppendEnumerable<TRightItem, TAppendEnumerable, TAppendEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TAppendEnumerable : struct, IStructEnumerable<TRightItem, TAppendEnumerator>
//        where TAppendEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, AppendEnumerable<TRightItem, TAppendEnumerable, TAppendEnumerator>, AppendEnumerator<TRightItem, TAppendEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        public static JoinDefaultEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, PrependEnumerable<TRightItem, TPrependEnumerable, TPrependEnumerator>, PrependEnumerator<TRightItem, TPrependEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TPrependEnumerable, TPrependEnumerator>(this RangeEnumerable source, PrependEnumerable<TRightItem, TPrependEnumerable, TPrependEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector)
//        where TPrependEnumerable : struct, IStructEnumerable<TRightItem, TPrependEnumerator>
//        where TPrependEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, PrependEnumerable<TRightItem, TPrependEnumerable, TPrependEnumerator>, PrependEnumerator<TRightItem, TPrependEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector);

//        public static JoinSpecificEnumerable<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, PrependEnumerable<TRightItem, TPrependEnumerable, TPrependEnumerator>, PrependEnumerator<TRightItem, TPrependEnumerator>> Join<TOutItem, TKeyItem, TRightItem, TPrependEnumerable, TPrependEnumerator>(this RangeEnumerable source, PrependEnumerable<TRightItem, TPrependEnumerable, TPrependEnumerator> inner, Func<int, TKeyItem> outerKeySelector, Func<TRightItem, TKeyItem> innerKeySelector, Func<int, TRightItem, TOutItem> resultSelector, IEqualityComparer<TKeyItem> comparer)
//        where TPrependEnumerable : struct, IStructEnumerable<TRightItem, TPrependEnumerator>
//        where TPrependEnumerator : struct, IStructEnumerator<TRightItem>
//        => CommonImplementation.Join<TOutItem, TKeyItem, int, RangeEnumerable, RangeEnumerator, TRightItem, PrependEnumerable<TRightItem, TPrependEnumerable, TPrependEnumerator>, PrependEnumerator<TRightItem, TPrependEnumerator>>(ref source, ref inner, outerKeySelector, innerKeySelector, resultSelector, comparer);

//        // Last 

//        public static int Last(this RangeEnumerable source)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            if (source.InnerCount == 0) throw CommonImplementation.SequenceEmpty();

//            return source.Start + source.InnerCount - 1;
//        }

//        public static int Last(this RangeEnumerable source, Func<int, bool> predicate)
//        => CommonImplementation.Last<int, RangeEnumerable, RangeEnumerator>(ref source, predicate);

//        public static int LastOrDefault(this RangeEnumerable source)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            if (source.InnerCount == 0)
//            {
//                return default(int);
//            }

//            return source.Start + source.InnerCount - 1;
//        }

//        public static int LastOrDefault(this RangeEnumerable source, Func<int, bool> predicate)
//        => CommonImplementation.LastOrDefault<int, RangeEnumerable, RangeEnumerator>(ref source, predicate);

//        // Max

//        public static int Max(this RangeEnumerable source)
//        => source.Last();

//        public static int Max(this RangeEnumerable source, Func<int, int> selector)
//        => CommonImplementation.MaxSelector<int, RangeEnumerable, RangeEnumerator>(ref source, selector);

//        public static long Max(this RangeEnumerable source, Func<int, long> selector)
//        => CommonImplementation.MaxSelector<int, RangeEnumerable, RangeEnumerator>(ref source, selector);

//        public static float Max(this RangeEnumerable source, Func<int, float> selector)
//        => CommonImplementation.MaxSelector<int, RangeEnumerable, RangeEnumerator>(ref source, selector);

//        public static double Max(this RangeEnumerable source, Func<int, double> selector)
//        => CommonImplementation.MaxSelector<int, RangeEnumerable, RangeEnumerator>(ref source, selector);

//        public static decimal Max(this RangeEnumerable source, Func<int, decimal> selector)
//        => CommonImplementation.MaxSelector<int, RangeEnumerable, RangeEnumerator>(ref source, selector);

//        public static decimal? Max(this RangeEnumerable source, Func<int, decimal?> selector)
//        => CommonImplementation.MaxSelector<int, RangeEnumerable, RangeEnumerator>(ref source, selector);

//        public static double? Max(this RangeEnumerable source, Func<int, double?> selector)
//        => CommonImplementation.MaxSelector<int, RangeEnumerable, RangeEnumerator>(ref source, selector);

//        public static float? Max(this RangeEnumerable source, Func<int, float?> selector)
//        => CommonImplementation.MaxSelector<int, RangeEnumerable, RangeEnumerator>(ref source, selector);

//        public static long? Max(this RangeEnumerable source, Func<int, long?> selector)
//        => CommonImplementation.MaxSelector<int, RangeEnumerable, RangeEnumerator>(ref source, selector);

//        public static int? Max(this RangeEnumerable source, Func<int, int?> selector)
//        => CommonImplementation.MaxSelector<int, RangeEnumerable, RangeEnumerator>(ref source, selector);

//        public static TResult Max<TResult>(this RangeEnumerable source, Func<int, TResult> selector)
//        => CommonImplementation.MaxProjectedComparable<int, TResult, RangeEnumerable, RangeEnumerator>(ref source, selector);

//        // Min

//        public static int Min(this RangeEnumerable source)
//        => source.First();

//        public static int Min(this RangeEnumerable source, Func<int, int> selector)
//        => CommonImplementation.MinSelector<int, RangeEnumerable, RangeEnumerator>(ref source, selector);

//        public static long Min(this RangeEnumerable source, Func<int, long> selector)
//        => CommonImplementation.MinSelector<int, RangeEnumerable, RangeEnumerator>(ref source, selector);

//        public static float Min(this RangeEnumerable source, Func<int, float> selector)
//        => CommonImplementation.MinSelector<int, RangeEnumerable, RangeEnumerator>(ref source, selector);

//        public static double Min(this RangeEnumerable source, Func<int, double> selector)
//        => CommonImplementation.MinSelector<int, RangeEnumerable, RangeEnumerator>(ref source, selector);

//        public static decimal Min(this RangeEnumerable source, Func<int, decimal> selector)
//        => CommonImplementation.MinSelector<int, RangeEnumerable, RangeEnumerator>(ref source, selector);

//        public static decimal? Min(this RangeEnumerable source, Func<int, decimal?> selector)
//        => CommonImplementation.MinSelector<int, RangeEnumerable, RangeEnumerator>(ref source, selector);

//        public static double? Min(this RangeEnumerable source, Func<int, double?> selector)
//        => CommonImplementation.MinSelector<int, RangeEnumerable, RangeEnumerator>(ref source, selector);

//        public static float? Min(this RangeEnumerable source, Func<int, float?> selector)
//        => CommonImplementation.MinSelector<int, RangeEnumerable, RangeEnumerator>(ref source, selector);

//        public static long? Min(this RangeEnumerable source, Func<int, long?> selector)
//        => CommonImplementation.MinSelector<int, RangeEnumerable, RangeEnumerator>(ref source, selector);

//        public static int? Min(this RangeEnumerable source, Func<int, int?> selector)
//        => CommonImplementation.MinSelector<int, RangeEnumerable, RangeEnumerator>(ref source, selector);

//        public static TResult Min<TResult>(this RangeEnumerable source, Func<int, TResult> selector)
//        => CommonImplementation.MinProjectedComparable<int, TResult, RangeEnumerable, RangeEnumerator>(ref source, selector);

//        // OfType

//        public static OfTypeEnumerable<int, TOfTypeOutItem, RangeEnumerable, RangeEnumerator> OfType<TOfTypeOutItem>(this RangeEnumerable source)
//        => CommonImplementation.OfType<int, TOfTypeOutItem, RangeEnumerable, RangeEnumerator>(ref source);

//        // OrderBy

//        public static OrderByEnumerable<int, TKey, RangeEnumerable, RangeEnumerator, DefaultAscending<int, TKey>> OrderBy<TKey>(this RangeEnumerable source, Func<int, TKey> keySelector)
//        => CommonImplementation.OrderBy<int, TKey, RangeEnumerable, RangeEnumerator>(ref source, keySelector);

//        public static OrderByEnumerable<int, TKey, RangeEnumerable, RangeEnumerator, SingleComparerAscending<int, TKey>> OrderBy<TKey>(this RangeEnumerable source, Func<int, TKey> keySelector, IComparer<TKey> comparer)
//        => CommonImplementation.OrderBy<int, TKey, RangeEnumerable, RangeEnumerator>(ref source, keySelector, comparer);

//        public static OrderByEnumerable<int, TKey, RangeEnumerable, RangeEnumerator, DefaultDescending<int, TKey>> OrderByDescending<TKey>(this RangeEnumerable source, Func<int, TKey> keySelector)
//        => CommonImplementation.OrderByDescending<int, TKey, RangeEnumerable, RangeEnumerator>(ref source, keySelector);

//        public static OrderByEnumerable<int, TKey, RangeEnumerable, RangeEnumerator, SingleComparerDescending<int, TKey>> OrderByDescending<TKey>(this RangeEnumerable source, Func<int, TKey> keySelector, IComparer<TKey> comparer)
//        => CommonImplementation.OrderByDescending<int, TKey, RangeEnumerable, RangeEnumerator>(ref source, keySelector, comparer);

//        // Prepend

//        public static PrependEnumerable<int, RangeEnumerable, RangeEnumerator> Prepend(this RangeEnumerable source, int element)
//        => CommonImplementation.Prepend<int, RangeEnumerable, RangeEnumerator>(ref source, element);

//        // Reverse

//        public static ReverseRangeEnumerable Reverse(this RangeEnumerable source)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));

//            var last = source.Start + source.InnerCount - 1;
//            var len = source.InnerCount;

//            return new ReverseRangeEnumerable(Enumerable.ReverseRangeSigil, last, len);
//        }

//        // Select

//        public static SelectIndexedEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator> Select<TOutItem>(this RangeEnumerable source, Func<int, int, TOutItem> selector)
//        => CommonImplementation.Select<int, TOutItem, RangeEnumerable, RangeEnumerator>(ref source, selector);

//        public static SelectEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator> Select<TOutItem>(this RangeEnumerable source, Func<int, TOutItem> selector)
//        => CommonImplementation.Select<int, TOutItem, RangeEnumerable, RangeEnumerator>(ref source, selector);

//        // SelectMany

//        public static SelectManyBridgeEnumerable<int, TOutItem, HashSet<TOutItem>, HashSetBridger<TOutItem>, RangeEnumerable, RangeEnumerator, HashSetEnumerator<TOutItem>> SelectMany<TOutItem>(this RangeEnumerable source, Func<int, HashSet<TOutItem>> selector)
//        => CommonImplementation.SelectMany<int, TOutItem, HashSet<TOutItem>, HashSetBridger<TOutItem>, RangeEnumerable, RangeEnumerator, HashSetEnumerator<TOutItem>>(ref source, selector);

//        public static SelectManyBridgeEnumerable<int, TOutItem, LinkedList<TOutItem>, LinkedListBridger<TOutItem>, RangeEnumerable, RangeEnumerator, LinkedListEnumerator<TOutItem>> SelectMany<TOutItem>(this RangeEnumerable source, Func<int, LinkedList<TOutItem>> selector)
//        => CommonImplementation.SelectMany<int, TOutItem, LinkedList<TOutItem>, LinkedListBridger<TOutItem>, RangeEnumerable, RangeEnumerator, LinkedListEnumerator<TOutItem>>(ref source, selector);

//        public static SelectManyBridgeEnumerable<int, TOutItem, Queue<TOutItem>, QueueBridger<TOutItem>, RangeEnumerable, RangeEnumerator, QueueEnumerator<TOutItem>> SelectMany<TOutItem>(this RangeEnumerable source, Func<int, Queue<TOutItem>> selector)
//        => CommonImplementation.SelectMany<int, TOutItem, Queue<TOutItem>, QueueBridger<TOutItem>, RangeEnumerable, RangeEnumerator, QueueEnumerator<TOutItem>>(ref source, selector);

//        public static SelectManyBridgeEnumerable<int, TOutItem, List<TOutItem>, ListBridger<TOutItem>, RangeEnumerable, RangeEnumerator, ListEnumerator<TOutItem>> SelectMany<TOutItem>(this RangeEnumerable source, Func<int, List<TOutItem>> selector)
//        => CommonImplementation.SelectMany<int, TOutItem, List<TOutItem>, ListBridger<TOutItem>, RangeEnumerable, RangeEnumerator, ListEnumerator<TOutItem>>(ref source, selector);

//        public static SelectManyBridgeEnumerable<int, TOutItem, Stack<TOutItem>, StackBridger<TOutItem>, RangeEnumerable, RangeEnumerator, StackEnumerator<TOutItem>> SelectMany<TOutItem>(this RangeEnumerable source, Func<int, Stack<TOutItem>> selector)
//        => CommonImplementation.SelectMany<int, TOutItem, Stack<TOutItem>, StackBridger<TOutItem>, RangeEnumerable, RangeEnumerator, StackEnumerator<TOutItem>>(ref source, selector);

//        public static SelectManyEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, BoxedEnumerable<TOutItem>, BoxedEnumerator<TOutItem>> SelectMany<TOutItem>(this RangeEnumerable source, Func<int, BoxedEnumerable<TOutItem>> selector)
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, BoxedEnumerable<TOutItem>, BoxedEnumerator<TOutItem>>(ref source, selector);

//        public static SelectManyBridgeEnumerable<int, TOutItem, TOutItem[], ArrayBridger<TOutItem>, RangeEnumerable, RangeEnumerator, ArrayEnumerator<TOutItem>> SelectMany<TOutItem>(this RangeEnumerable source, Func<int, TOutItem[]> selector)
//        => CommonImplementation.SelectMany<int, TOutItem, TOutItem[], ArrayBridger<TOutItem>, RangeEnumerable, RangeEnumerator, ArrayEnumerator<TOutItem>>(ref source, selector);

//        public static SelectManyIndexedBridgeEnumerable<int, TOutItem, IEnumerable<TOutItem>, IEnumerableBridger<TOutItem>, RangeEnumerable, RangeEnumerator, IdentityEnumerator<TOutItem>> SelectMany<TOutItem>(this RangeEnumerable source, Func<int, int, IEnumerable<TOutItem>> selector)
//        => CommonImplementation.SelectMany<int, TOutItem, IEnumerable<TOutItem>, IEnumerableBridger<TOutItem>, RangeEnumerable, RangeEnumerator, IdentityEnumerator<TOutItem>>(ref source, selector);

//        public static SelectManyIndexedBridgeEnumerable<int, TOutItem, List<TOutItem>, ListBridger<TOutItem>, RangeEnumerable, RangeEnumerator, ListEnumerator<TOutItem>> SelectMany<TOutItem>(this RangeEnumerable source, Func<int, int, List<TOutItem>> selector)
//        => CommonImplementation.SelectMany<int, TOutItem, List<TOutItem>, ListBridger<TOutItem>, RangeEnumerable, RangeEnumerator, ListEnumerator<TOutItem>>(ref source, selector);

//        public static SelectManyIndexedBridgeEnumerable<int, TOutItem, LinkedList<TOutItem>, LinkedListBridger<TOutItem>, RangeEnumerable, RangeEnumerator, LinkedListEnumerator<TOutItem>> SelectMany<TOutItem>(this RangeEnumerable source, Func<int, int, LinkedList<TOutItem>> selector)
//        => CommonImplementation.SelectMany<int, TOutItem, LinkedList<TOutItem>, LinkedListBridger<TOutItem>, RangeEnumerable, RangeEnumerator, LinkedListEnumerator<TOutItem>>(ref source, selector);

//        public static SelectManyIndexedBridgeEnumerable<int, TOutItem, HashSet<TOutItem>, HashSetBridger<TOutItem>, RangeEnumerable, RangeEnumerator, HashSetEnumerator<TOutItem>> SelectMany<TOutItem>(this RangeEnumerable source, Func<int, int, HashSet<TOutItem>> selector)
//        => CommonImplementation.SelectMany<int, TOutItem, HashSet<TOutItem>, HashSetBridger<TOutItem>, RangeEnumerable, RangeEnumerator, HashSetEnumerator<TOutItem>>(ref source, selector);

//        public static EmptyEnumerable<TOutItem> SelectMany<TOutItem>(this RangeEnumerable source, Func<int, int, EmptyOrderedEnumerable<TOutItem>> selector)
//        => CommonImplementation.EmptySelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator>(ref source, selector);

//        public static SelectManyEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, RepeatEnumerable<TOutItem>, RepeatEnumerator<TOutItem>> SelectMany<TOutItem>(this RangeEnumerable source, Func<int, RepeatEnumerable<TOutItem>> selector)
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, RepeatEnumerable<TOutItem>, RepeatEnumerator<TOutItem>>(ref source, selector);

//        public static EmptyEnumerable<TOutItem> SelectMany<TOutItem>(this RangeEnumerable source, Func<int, EmptyEnumerable<TOutItem>> selector)
//        => CommonImplementation.EmptySelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator>(ref source, selector);

//        public static SelectManyBridgeEnumerable<int, TOutItem, SortedSet<TOutItem>, SortedSetBridger<TOutItem>, RangeEnumerable, RangeEnumerator, SortedSetEnumerator<TOutItem>> SelectMany<TOutItem>(this RangeEnumerable source, Func<int, SortedSet<TOutItem>> selector)
//        => CommonImplementation.SelectMany<int, TOutItem, SortedSet<TOutItem>, SortedSetBridger<TOutItem>, RangeEnumerable, RangeEnumerator, SortedSetEnumerator<TOutItem>>(ref source, selector);

//        public static EmptyEnumerable<TOutItem> SelectMany<TOutItem>(this RangeEnumerable source, Func<int, EmptyOrderedEnumerable<TOutItem>> selector)
//        => CommonImplementation.EmptySelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator>(ref source, selector);

//        public static SelectManyIndexedBridgeEnumerable<int, TOutItem, Queue<TOutItem>, QueueBridger<TOutItem>, RangeEnumerable, RangeEnumerator, QueueEnumerator<TOutItem>> SelectMany<TOutItem>(this RangeEnumerable source, Func<int, int, Queue<TOutItem>> selector)
//        => CommonImplementation.SelectMany<int, TOutItem, Queue<TOutItem>, QueueBridger<TOutItem>, RangeEnumerable, RangeEnumerator, QueueEnumerator<TOutItem>>(ref source, selector);

//        public static SelectManyIndexedBridgeEnumerable<int, TOutItem, Stack<TOutItem>, StackBridger<TOutItem>, RangeEnumerable, RangeEnumerator, StackEnumerator<TOutItem>> SelectMany<TOutItem>(this RangeEnumerable source, Func<int, int, Stack<TOutItem>> selector)
//        => CommonImplementation.SelectMany<int, TOutItem, Stack<TOutItem>, StackBridger<TOutItem>, RangeEnumerable, RangeEnumerator, StackEnumerator<TOutItem>>(ref source, selector);

//        public static SelectManyIndexedEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, BoxedEnumerable<TOutItem>, BoxedEnumerator<TOutItem>> SelectMany<TOutItem>(this RangeEnumerable source, Func<int, int, BoxedEnumerable<TOutItem>> selector)
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, BoxedEnumerable<TOutItem>, BoxedEnumerator<TOutItem>>(ref source, selector);

//        public static SelectManyIndexedEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, RepeatEnumerable<TOutItem>, RepeatEnumerator<TOutItem>> SelectMany<TOutItem>(this RangeEnumerable source, Func<int, int, RepeatEnumerable<TOutItem>> selector)
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, RepeatEnumerable<TOutItem>, RepeatEnumerator<TOutItem>>(ref source, selector);

//        public static EmptyEnumerable<TOutItem> SelectMany<TOutItem>(this RangeEnumerable source, Func<int, int, EmptyEnumerable<TOutItem>> selector)
//        => CommonImplementation.EmptySelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator>(ref source, selector);

//        public static SelectManyIndexedBridgeEnumerable<int, TOutItem, TOutItem[], ArrayBridger<TOutItem>, RangeEnumerable, RangeEnumerator, ArrayEnumerator<TOutItem>> SelectMany<TOutItem>(this RangeEnumerable source, Func<int, int, TOutItem[]> selector)
//        => CommonImplementation.SelectMany<int, TOutItem, TOutItem[], ArrayBridger<TOutItem>, RangeEnumerable, RangeEnumerator, ArrayEnumerator<TOutItem>>(ref source, selector);

//        public static SelectManyIndexedBridgeEnumerable<int, TOutItem, SortedSet<TOutItem>, SortedSetBridger<TOutItem>, RangeEnumerable, RangeEnumerator, SortedSetEnumerator<TOutItem>> SelectMany<TOutItem>(this RangeEnumerable source, Func<int, int, SortedSet<TOutItem>> selector)
//        => CommonImplementation.SelectMany<int, TOutItem, SortedSet<TOutItem>, SortedSetBridger<TOutItem>, RangeEnumerable, RangeEnumerator, SortedSetEnumerator<TOutItem>>(ref source, selector);

//        public static SelectManyBridgeEnumerable<int, TOutItem, IEnumerable<TOutItem>, IEnumerableBridger<TOutItem>, RangeEnumerable, RangeEnumerator, IdentityEnumerator<TOutItem>> SelectMany<TOutItem>(this RangeEnumerable source, Func<int, IEnumerable<TOutItem>> selector)
//        => CommonImplementation.SelectMany<int, TOutItem, IEnumerable<TOutItem>, IEnumerableBridger<TOutItem>, RangeEnumerable, RangeEnumerator, IdentityEnumerator<TOutItem>>(ref source, selector);

//        public static SelectManyEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, GroupingEnumerable<TSelectMany_GroupingKey, TOutItem>, GroupingEnumerator<TOutItem>> SelectMany<TOutItem, TSelectMany_GroupingKey>(this RangeEnumerable source, Func<int, GroupingEnumerable<TSelectMany_GroupingKey, TOutItem>> selector)
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, GroupingEnumerable<TSelectMany_GroupingKey, TOutItem>, GroupingEnumerator<TOutItem>>(ref source, selector);

//        public static SelectManyIndexedBridgeEnumerable<int, TOutItem, Dictionary<TDictionaryKey, TOutItem>.ValueCollection, DictionaryValuesBridger<TDictionaryKey, TOutItem>, RangeEnumerable, RangeEnumerator, DictionaryValuesEnumerator<TDictionaryKey, TOutItem>> SelectMany<TOutItem, TDictionaryKey>(this RangeEnumerable source, Func<int, int, Dictionary<TDictionaryKey, TOutItem>.ValueCollection> selector)
//        => CommonImplementation.SelectMany<int, TOutItem, Dictionary<TDictionaryKey, TOutItem>.ValueCollection, DictionaryValuesBridger<TDictionaryKey, TOutItem>, RangeEnumerable, RangeEnumerator, DictionaryValuesEnumerator<TDictionaryKey, TOutItem>>(ref source, selector);

//        public static SelectManyIndexedEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, GroupedEnumerable<TSelectMany_GroupedKey, TOutItem>, GroupedEnumerator<TOutItem>> SelectMany<TOutItem, TSelectMany_GroupedKey>(this RangeEnumerable source, Func<int, int, GroupedEnumerable<TSelectMany_GroupedKey, TOutItem>> selector)
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, GroupedEnumerable<TSelectMany_GroupedKey, TOutItem>, GroupedEnumerator<TOutItem>>(ref source, selector);

//        public static SelectManyIndexedEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, GroupingEnumerable<TSelectMany_GroupingKey, TOutItem>, GroupingEnumerator<TOutItem>> SelectMany<TOutItem, TSelectMany_GroupingKey>(this RangeEnumerable source, Func<int, int, GroupingEnumerable<TSelectMany_GroupingKey, TOutItem>> selector)
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, GroupingEnumerable<TSelectMany_GroupingKey, TOutItem>, GroupingEnumerator<TOutItem>>(ref source, selector);

//        public static SelectManyIndexedEnumerable<int, GroupingEnumerable<TSelectMany_LookupKey, TSelectMany_LookupElement>, RangeEnumerable, RangeEnumerator, LookupDefaultEnumerable<TSelectMany_LookupKey, TSelectMany_LookupElement>, LookupDefaultEnumerator<TSelectMany_LookupKey, TSelectMany_LookupElement>> SelectMany<TSelectMany_LookupKey, TSelectMany_LookupElement>(this RangeEnumerable source, Func<int, int, LookupDefaultEnumerable<TSelectMany_LookupKey, TSelectMany_LookupElement>> selector)
//        => CommonImplementation.SelectMany<int, GroupingEnumerable<TSelectMany_LookupKey, TSelectMany_LookupElement>, RangeEnumerable, RangeEnumerator, LookupDefaultEnumerable<TSelectMany_LookupKey, TSelectMany_LookupElement>, LookupDefaultEnumerator<TSelectMany_LookupKey, TSelectMany_LookupElement>>(ref source, selector);

//        public static SelectManyIndexedEnumerable<int, GroupingEnumerable<TSelectMany_LookupKey, TSelectMany_LookupElement>, RangeEnumerable, RangeEnumerator, LookupSpecificEnumerable<TSelectMany_LookupKey, TSelectMany_LookupElement>, LookupSpecificEnumerator<TSelectMany_LookupKey, TSelectMany_LookupElement>> SelectMany<TSelectMany_LookupKey, TSelectMany_LookupElement>(this RangeEnumerable source, Func<int, int, LookupSpecificEnumerable<TSelectMany_LookupKey, TSelectMany_LookupElement>> selector)
//        => CommonImplementation.SelectMany<int, GroupingEnumerable<TSelectMany_LookupKey, TSelectMany_LookupElement>, RangeEnumerable, RangeEnumerator, LookupSpecificEnumerable<TSelectMany_LookupKey, TSelectMany_LookupElement>, LookupSpecificEnumerator<TSelectMany_LookupKey, TSelectMany_LookupElement>>(ref source, selector);

//        public static SelectManyIndexedBridgeEnumerable<int, TOutItem, Dictionary<TOutItem, TDictionaryValue>.KeyCollection, DictionaryKeysBridger<TOutItem, TDictionaryValue>, RangeEnumerable, RangeEnumerator, DictionaryKeysEnumerator<TOutItem, TDictionaryValue>> SelectMany<TOutItem, TDictionaryValue>(this RangeEnumerable source, Func<int, int, Dictionary<TOutItem, TDictionaryValue>.KeyCollection> selector)
//        => CommonImplementation.SelectMany<int, TOutItem, Dictionary<TOutItem, TDictionaryValue>.KeyCollection, DictionaryKeysBridger<TOutItem, TDictionaryValue>, RangeEnumerable, RangeEnumerator, DictionaryKeysEnumerator<TOutItem, TDictionaryValue>>(ref source, selector);

//        public static SelectManyEnumerable<int, GroupingEnumerable<TSelectMany_LookupKey, TSelectMany_LookupElement>, RangeEnumerable, RangeEnumerator, LookupDefaultEnumerable<TSelectMany_LookupKey, TSelectMany_LookupElement>, LookupDefaultEnumerator<TSelectMany_LookupKey, TSelectMany_LookupElement>> SelectMany<TSelectMany_LookupKey, TSelectMany_LookupElement>(this RangeEnumerable source, Func<int, LookupDefaultEnumerable<TSelectMany_LookupKey, TSelectMany_LookupElement>> selector)
//        => CommonImplementation.SelectMany<int, GroupingEnumerable<TSelectMany_LookupKey, TSelectMany_LookupElement>, RangeEnumerable, RangeEnumerator, LookupDefaultEnumerable<TSelectMany_LookupKey, TSelectMany_LookupElement>, LookupDefaultEnumerator<TSelectMany_LookupKey, TSelectMany_LookupElement>>(ref source, selector);

//        public static SelectManyEnumerable<int, GroupingEnumerable<TSelectMany_LookupKey, TSelectMany_LookupElement>, RangeEnumerable, RangeEnumerator, LookupSpecificEnumerable<TSelectMany_LookupKey, TSelectMany_LookupElement>, LookupSpecificEnumerator<TSelectMany_LookupKey, TSelectMany_LookupElement>> SelectMany<TSelectMany_LookupKey, TSelectMany_LookupElement>(this RangeEnumerable source, Func<int, LookupSpecificEnumerable<TSelectMany_LookupKey, TSelectMany_LookupElement>> selector)
//        => CommonImplementation.SelectMany<int, GroupingEnumerable<TSelectMany_LookupKey, TSelectMany_LookupElement>, RangeEnumerable, RangeEnumerator, LookupSpecificEnumerable<TSelectMany_LookupKey, TSelectMany_LookupElement>, LookupSpecificEnumerator<TSelectMany_LookupKey, TSelectMany_LookupElement>>(ref source, selector);

//        public static SelectManyBridgeEnumerable<int, TOutItem, SortedDictionary<TDictionaryKey, TOutItem>.ValueCollection, SortedDictionaryValuesBridger<TDictionaryKey, TOutItem>, RangeEnumerable, RangeEnumerator, SortedDictionaryValuesEnumerator<TDictionaryKey, TOutItem>> SelectMany<TOutItem, TDictionaryKey>(this RangeEnumerable source, Func<int, SortedDictionary<TDictionaryKey, TOutItem>.ValueCollection> selector)
//        => CommonImplementation.SelectMany<int, TOutItem, SortedDictionary<TDictionaryKey, TOutItem>.ValueCollection, SortedDictionaryValuesBridger<TDictionaryKey, TOutItem>, RangeEnumerable, RangeEnumerator, SortedDictionaryValuesEnumerator<TDictionaryKey, TOutItem>>(ref source, selector);

//        public static SelectManyBridgeEnumerable<int, TOutItem, SortedDictionary<TOutItem, TDictionaryValue>.KeyCollection, SortedDictionaryKeysBridger<TOutItem, TDictionaryValue>, RangeEnumerable, RangeEnumerator, SortedDictionaryKeysEnumerator<TOutItem, TDictionaryValue>> SelectMany<TOutItem, TDictionaryValue>(this RangeEnumerable source, Func<int, SortedDictionary<TOutItem, TDictionaryValue>.KeyCollection> selector)
//        => CommonImplementation.SelectMany<int, TOutItem, SortedDictionary<TOutItem, TDictionaryValue>.KeyCollection, SortedDictionaryKeysBridger<TOutItem, TDictionaryValue>, RangeEnumerable, RangeEnumerator, SortedDictionaryKeysEnumerator<TOutItem, TDictionaryValue>>(ref source, selector);

//        public static SelectManyEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, GroupedEnumerable<TSelectMany_GroupedKey, TOutItem>, GroupedEnumerator<TOutItem>> SelectMany<TOutItem, TSelectMany_GroupedKey>(this RangeEnumerable source, Func<int, GroupedEnumerable<TSelectMany_GroupedKey, TOutItem>> selector)
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, GroupedEnumerable<TSelectMany_GroupedKey, TOutItem>, GroupedEnumerator<TOutItem>>(ref source, selector);

//        public static SelectManyBridgeEnumerable<int, TOutItem, Dictionary<TDictionaryKey, TOutItem>.ValueCollection, DictionaryValuesBridger<TDictionaryKey, TOutItem>, RangeEnumerable, RangeEnumerator, DictionaryValuesEnumerator<TDictionaryKey, TOutItem>> SelectMany<TOutItem, TDictionaryKey>(this RangeEnumerable source, Func<int, Dictionary<TDictionaryKey, TOutItem>.ValueCollection> selector)
//        => CommonImplementation.SelectMany<int, TOutItem, Dictionary<TDictionaryKey, TOutItem>.ValueCollection, DictionaryValuesBridger<TDictionaryKey, TOutItem>, RangeEnumerable, RangeEnumerator, DictionaryValuesEnumerator<TDictionaryKey, TOutItem>>(ref source, selector);

//        public static SelectManyIndexedBridgeEnumerable<int, TOutItem, SortedDictionary<TDictionaryKey, TOutItem>.ValueCollection, SortedDictionaryValuesBridger<TDictionaryKey, TOutItem>, RangeEnumerable, RangeEnumerator, SortedDictionaryValuesEnumerator<TDictionaryKey, TOutItem>> SelectMany<TOutItem, TDictionaryKey>(this RangeEnumerable source, Func<int, int, SortedDictionary<TDictionaryKey, TOutItem>.ValueCollection> selector)
//        => CommonImplementation.SelectMany<int, TOutItem, SortedDictionary<TDictionaryKey, TOutItem>.ValueCollection, SortedDictionaryValuesBridger<TDictionaryKey, TOutItem>, RangeEnumerable, RangeEnumerator, SortedDictionaryValuesEnumerator<TDictionaryKey, TOutItem>>(ref source, selector);

//        public static SelectManyIndexedBridgeEnumerable<int, TOutItem, SortedDictionary<TOutItem, TDictionaryValue>.KeyCollection, SortedDictionaryKeysBridger<TOutItem, TDictionaryValue>, RangeEnumerable, RangeEnumerator, SortedDictionaryKeysEnumerator<TOutItem, TDictionaryValue>> SelectMany<TOutItem, TDictionaryValue>(this RangeEnumerable source, Func<int, int, SortedDictionary<TOutItem, TDictionaryValue>.KeyCollection> selector)
//        => CommonImplementation.SelectMany<int, TOutItem, SortedDictionary<TOutItem, TDictionaryValue>.KeyCollection, SortedDictionaryKeysBridger<TOutItem, TDictionaryValue>, RangeEnumerable, RangeEnumerator, SortedDictionaryKeysEnumerator<TOutItem, TDictionaryValue>>(ref source, selector);

//        public static SelectManyBridgeEnumerable<int, TOutItem, Dictionary<TOutItem, TDictionaryValue>.KeyCollection, DictionaryKeysBridger<TOutItem, TDictionaryValue>, RangeEnumerable, RangeEnumerator, DictionaryKeysEnumerator<TOutItem, TDictionaryValue>> SelectMany<TOutItem, TDictionaryValue>(this RangeEnumerable source, Func<int, Dictionary<TOutItem, TDictionaryValue>.KeyCollection> selector)
//        => CommonImplementation.SelectMany<int, TOutItem, Dictionary<TOutItem, TDictionaryValue>.KeyCollection, DictionaryKeysBridger<TOutItem, TDictionaryValue>, RangeEnumerable, RangeEnumerator, DictionaryKeysEnumerator<TOutItem, TDictionaryValue>>(ref source, selector);

//        public static SelectManyCollectionBridgeEnumerable<int, TOutItem, TCollectionItem, LinkedList<TCollectionItem>, LinkedListBridger<TCollectionItem>, RangeEnumerable, RangeEnumerator, LinkedListEnumerator<TCollectionItem>> SelectMany<TOutItem, TCollectionItem>(this RangeEnumerable source, Func<int, LinkedList<TCollectionItem>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, LinkedList<TCollectionItem>, LinkedListBridger<TCollectionItem>, RangeEnumerable, RangeEnumerator, LinkedListEnumerator<TCollectionItem>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionBridgeEnumerable<int, TOutItem, TCollectionItem, Queue<TCollectionItem>, QueueBridger<TCollectionItem>, RangeEnumerable, RangeEnumerator, QueueEnumerator<TCollectionItem>> SelectMany<TOutItem, TCollectionItem>(this RangeEnumerable source, Func<int, Queue<TCollectionItem>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, Queue<TCollectionItem>, QueueBridger<TCollectionItem>, RangeEnumerable, RangeEnumerator, QueueEnumerator<TCollectionItem>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionBridgeEnumerable<int, TOutItem, TCollectionItem, Stack<TCollectionItem>, StackBridger<TCollectionItem>, RangeEnumerable, RangeEnumerator, StackEnumerator<TCollectionItem>> SelectMany<TOutItem, TCollectionItem>(this RangeEnumerable source, Func<int, Stack<TCollectionItem>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, Stack<TCollectionItem>, StackBridger<TCollectionItem>, RangeEnumerable, RangeEnumerator, StackEnumerator<TCollectionItem>>(ref source, collectionSelector, resultSelector);

//        public static EmptyEnumerable<TOutItem> SelectMany<TOutItem, TCollectionItem>(this RangeEnumerable source, Func<int, EmptyOrderedEnumerable<TCollectionItem>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        => CommonImplementation.EmptySelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, BoxedEnumerable<TCollectionItem>, BoxedEnumerator<TCollectionItem>> SelectMany<TOutItem, TCollectionItem>(this RangeEnumerable source, Func<int, BoxedEnumerable<TCollectionItem>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, BoxedEnumerable<TCollectionItem>, BoxedEnumerator<TCollectionItem>>(ref source, collectionSelector, resultSelector);

//        public static EmptyEnumerable<TOutItem> SelectMany<TOutItem, TCollectionItem>(this RangeEnumerable source, Func<int, EmptyEnumerable<TCollectionItem>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        => CommonImplementation.EmptySelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, RepeatEnumerable<TCollectionItem>, RepeatEnumerator<TCollectionItem>> SelectMany<TOutItem, TCollectionItem>(this RangeEnumerable source, Func<int, RepeatEnumerable<TCollectionItem>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, RepeatEnumerable<TCollectionItem>, RepeatEnumerator<TCollectionItem>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionIndexedBridgeEnumerable<int, TOutItem, TCollectionItem, IEnumerable<TCollectionItem>, IEnumerableBridger<TCollectionItem>, RangeEnumerable, RangeEnumerator, IdentityEnumerator<TCollectionItem>> SelectMany<TOutItem, TCollectionItem>(this RangeEnumerable source, Func<int, int, IEnumerable<TCollectionItem>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, IEnumerable<TCollectionItem>, IEnumerableBridger<TCollectionItem>, RangeEnumerable, RangeEnumerator, IdentityEnumerator<TCollectionItem>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionIndexedBridgeEnumerable<int, TOutItem, TCollectionItem, Queue<TCollectionItem>, QueueBridger<TCollectionItem>, RangeEnumerable, RangeEnumerator, QueueEnumerator<TCollectionItem>> SelectMany<TOutItem, TCollectionItem>(this RangeEnumerable source, Func<int, int, Queue<TCollectionItem>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, Queue<TCollectionItem>, QueueBridger<TCollectionItem>, RangeEnumerable, RangeEnumerator, QueueEnumerator<TCollectionItem>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionIndexedBridgeEnumerable<int, TOutItem, TCollectionItem, Stack<TCollectionItem>, StackBridger<TCollectionItem>, RangeEnumerable, RangeEnumerator, StackEnumerator<TCollectionItem>> SelectMany<TOutItem, TCollectionItem>(this RangeEnumerable source, Func<int, int, Stack<TCollectionItem>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, Stack<TCollectionItem>, StackBridger<TCollectionItem>, RangeEnumerable, RangeEnumerator, StackEnumerator<TCollectionItem>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionIndexedEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, BoxedEnumerable<TCollectionItem>, BoxedEnumerator<TCollectionItem>> SelectMany<TOutItem, TCollectionItem>(this RangeEnumerable source, Func<int, int, BoxedEnumerable<TCollectionItem>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, BoxedEnumerable<TCollectionItem>, BoxedEnumerator<TCollectionItem>>(ref source, collectionSelector, resultSelector);

//        public static EmptyEnumerable<TOutItem> SelectMany<TOutItem, TCollectionItem>(this RangeEnumerable source, Func<int, int, EmptyEnumerable<TCollectionItem>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        => CommonImplementation.EmptySelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionIndexedEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, RepeatEnumerable<TCollectionItem>, RepeatEnumerator<TCollectionItem>> SelectMany<TOutItem, TCollectionItem>(this RangeEnumerable source, Func<int, int, RepeatEnumerable<TCollectionItem>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, RepeatEnumerable<TCollectionItem>, RepeatEnumerator<TCollectionItem>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionIndexedBridgeEnumerable<int, TOutItem, TCollectionItem, TCollectionItem[], ArrayBridger<TCollectionItem>, RangeEnumerable, RangeEnumerator, ArrayEnumerator<TCollectionItem>> SelectMany<TOutItem, TCollectionItem>(this RangeEnumerable source, Func<int, int, TCollectionItem[]> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, TCollectionItem[], ArrayBridger<TCollectionItem>, RangeEnumerable, RangeEnumerator, ArrayEnumerator<TCollectionItem>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionIndexedBridgeEnumerable<int, TOutItem, TCollectionItem, SortedSet<TCollectionItem>, SortedSetBridger<TCollectionItem>, RangeEnumerable, RangeEnumerator, SortedSetEnumerator<TCollectionItem>> SelectMany<TOutItem, TCollectionItem>(this RangeEnumerable source, Func<int, int, SortedSet<TCollectionItem>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, SortedSet<TCollectionItem>, SortedSetBridger<TCollectionItem>, RangeEnumerable, RangeEnumerator, SortedSetEnumerator<TCollectionItem>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionIndexedBridgeEnumerable<int, TOutItem, TCollectionItem, List<TCollectionItem>, ListBridger<TCollectionItem>, RangeEnumerable, RangeEnumerator, ListEnumerator<TCollectionItem>> SelectMany<TOutItem, TCollectionItem>(this RangeEnumerable source, Func<int, int, List<TCollectionItem>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, List<TCollectionItem>, ListBridger<TCollectionItem>, RangeEnumerable, RangeEnumerator, ListEnumerator<TCollectionItem>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionIndexedBridgeEnumerable<int, TOutItem, TCollectionItem, LinkedList<TCollectionItem>, LinkedListBridger<TCollectionItem>, RangeEnumerable, RangeEnumerator, LinkedListEnumerator<TCollectionItem>> SelectMany<TOutItem, TCollectionItem>(this RangeEnumerable source, Func<int, int, LinkedList<TCollectionItem>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, LinkedList<TCollectionItem>, LinkedListBridger<TCollectionItem>, RangeEnumerable, RangeEnumerator, LinkedListEnumerator<TCollectionItem>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionIndexedBridgeEnumerable<int, TOutItem, TCollectionItem, HashSet<TCollectionItem>, HashSetBridger<TCollectionItem>, RangeEnumerable, RangeEnumerator, HashSetEnumerator<TCollectionItem>> SelectMany<TOutItem, TCollectionItem>(this RangeEnumerable source, Func<int, int, HashSet<TCollectionItem>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, HashSet<TCollectionItem>, HashSetBridger<TCollectionItem>, RangeEnumerable, RangeEnumerator, HashSetEnumerator<TCollectionItem>>(ref source, collectionSelector, resultSelector);

//        public static EmptyEnumerable<TOutItem> SelectMany<TOutItem, TCollectionItem>(this RangeEnumerable source, Func<int, int, EmptyOrderedEnumerable<TCollectionItem>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        => CommonImplementation.EmptySelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionBridgeEnumerable<int, TOutItem, TCollectionItem, TCollectionItem[], ArrayBridger<TCollectionItem>, RangeEnumerable, RangeEnumerator, ArrayEnumerator<TCollectionItem>> SelectMany<TOutItem, TCollectionItem>(this RangeEnumerable source, Func<int, TCollectionItem[]> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, TCollectionItem[], ArrayBridger<TCollectionItem>, RangeEnumerable, RangeEnumerator, ArrayEnumerator<TCollectionItem>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionBridgeEnumerable<int, TOutItem, TCollectionItem, SortedSet<TCollectionItem>, SortedSetBridger<TCollectionItem>, RangeEnumerable, RangeEnumerator, SortedSetEnumerator<TCollectionItem>> SelectMany<TOutItem, TCollectionItem>(this RangeEnumerable source, Func<int, SortedSet<TCollectionItem>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, SortedSet<TCollectionItem>, SortedSetBridger<TCollectionItem>, RangeEnumerable, RangeEnumerator, SortedSetEnumerator<TCollectionItem>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionBridgeEnumerable<int, TOutItem, TCollectionItem, List<TCollectionItem>, ListBridger<TCollectionItem>, RangeEnumerable, RangeEnumerator, ListEnumerator<TCollectionItem>> SelectMany<TOutItem, TCollectionItem>(this RangeEnumerable source, Func<int, List<TCollectionItem>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, List<TCollectionItem>, ListBridger<TCollectionItem>, RangeEnumerable, RangeEnumerator, ListEnumerator<TCollectionItem>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionBridgeEnumerable<int, TOutItem, TCollectionItem, HashSet<TCollectionItem>, HashSetBridger<TCollectionItem>, RangeEnumerable, RangeEnumerator, HashSetEnumerator<TCollectionItem>> SelectMany<TOutItem, TCollectionItem>(this RangeEnumerable source, Func<int, HashSet<TCollectionItem>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, HashSet<TCollectionItem>, HashSetBridger<TCollectionItem>, RangeEnumerable, RangeEnumerator, HashSetEnumerator<TCollectionItem>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionBridgeEnumerable<int, TOutItem, TCollectionItem, IEnumerable<TCollectionItem>, IEnumerableBridger<TCollectionItem>, RangeEnumerable, RangeEnumerator, IdentityEnumerator<TCollectionItem>> SelectMany<TOutItem, TCollectionItem>(this RangeEnumerable source, Func<int, IEnumerable<TCollectionItem>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, IEnumerable<TCollectionItem>, IEnumerableBridger<TCollectionItem>, RangeEnumerable, RangeEnumerator, IdentityEnumerator<TCollectionItem>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, SkipWhileIndexedEnumerable<TOutItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>, SkipWhileIndexedEnumerator<TOutItem, TDefaultIfEmptyInnerEnumerator>> SelectMany<TOutItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>(this RangeEnumerable source, Func<int, SkipWhileIndexedEnumerable<TOutItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>> selector)
//        where TDefaultIfEmptyInnerEnumerable : struct, IStructEnumerable<TOutItem, TDefaultIfEmptyInnerEnumerator>
//        where TDefaultIfEmptyInnerEnumerator : struct, IStructEnumerator<TOutItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, SkipWhileIndexedEnumerable<TOutItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>, SkipWhileIndexedEnumerator<TOutItem, TDefaultIfEmptyInnerEnumerator>>(ref source, selector);

//        public static SelectManyEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, DefaultIfEmptySpecificEnumerable<TOutItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>, DefaultIfEmptySpecificEnumerator<TOutItem, TDefaultIfEmptyInnerEnumerator>> SelectMany<TOutItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>(this RangeEnumerable source, Func<int, DefaultIfEmptySpecificEnumerable<TOutItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>> selector)
//        where TDefaultIfEmptyInnerEnumerable : struct, IStructEnumerable<TOutItem, TDefaultIfEmptyInnerEnumerator>
//        where TDefaultIfEmptyInnerEnumerator : struct, IStructEnumerator<TOutItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, DefaultIfEmptySpecificEnumerable<TOutItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>, DefaultIfEmptySpecificEnumerator<TOutItem, TDefaultIfEmptyInnerEnumerator>>(ref source, selector);

//        public static SelectManyEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, WhereIndexedEnumerable<TOutItem, TWhereInnerEnumerable, TWhereInnerEnumerator>, WhereIndexedEnumerator<TOutItem, TWhereInnerEnumerator>> SelectMany<TOutItem, TWhereInnerEnumerable, TWhereInnerEnumerator>(this RangeEnumerable source, Func<int, WhereIndexedEnumerable<TOutItem, TWhereInnerEnumerable, TWhereInnerEnumerator>> selector)
//        where TWhereInnerEnumerable : struct, IStructEnumerable<TOutItem, TWhereInnerEnumerator>
//        where TWhereInnerEnumerator : struct, IStructEnumerator<TOutItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, WhereIndexedEnumerable<TOutItem, TWhereInnerEnumerable, TWhereInnerEnumerator>, WhereIndexedEnumerator<TOutItem, TWhereInnerEnumerator>>(ref source, selector);

//        public static SelectManyEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, DefaultIfEmptyDefaultEnumerable<TOutItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>, DefaultIfEmptyDefaultEnumerator<TOutItem, TDefaultIfEmptyInnerEnumerator>> SelectMany<TOutItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>(this RangeEnumerable source, Func<int, DefaultIfEmptyDefaultEnumerable<TOutItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>> selector)
//        where TDefaultIfEmptyInnerEnumerable : struct, IStructEnumerable<TOutItem, TDefaultIfEmptyInnerEnumerator>
//        where TDefaultIfEmptyInnerEnumerator : struct, IStructEnumerator<TOutItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, DefaultIfEmptyDefaultEnumerable<TOutItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>, DefaultIfEmptyDefaultEnumerator<TOutItem, TDefaultIfEmptyInnerEnumerator>>(ref source, selector);

//        public static SelectManyEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, WhereEnumerable<TOutItem, TWhereInnerEnumerable, TWhereInnerEnumerator>, WhereEnumerator<TOutItem, TWhereInnerEnumerator>> SelectMany<TOutItem, TWhereInnerEnumerable, TWhereInnerEnumerator>(this RangeEnumerable source, Func<int, WhereEnumerable<TOutItem, TWhereInnerEnumerable, TWhereInnerEnumerator>> selector)
//        where TWhereInnerEnumerable : struct, IStructEnumerable<TOutItem, TWhereInnerEnumerator>
//        where TWhereInnerEnumerator : struct, IStructEnumerator<TOutItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, WhereEnumerable<TOutItem, TWhereInnerEnumerable, TWhereInnerEnumerator>, WhereEnumerator<TOutItem, TWhereInnerEnumerator>>(ref source, selector);

//        public static SelectManyEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, TakeEnumerable<TOutItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>, TakeEnumerator<TOutItem, TDefaultIfEmptyInnerEnumerator>> SelectMany<TOutItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>(this RangeEnumerable source, Func<int, TakeEnumerable<TOutItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>> selector)
//        where TDefaultIfEmptyInnerEnumerable : struct, IStructEnumerable<TOutItem, TDefaultIfEmptyInnerEnumerator>
//        where TDefaultIfEmptyInnerEnumerator : struct, IStructEnumerator<TOutItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, TakeEnumerable<TOutItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>, TakeEnumerator<TOutItem, TDefaultIfEmptyInnerEnumerator>>(ref source, selector);

//        public static SelectManyIndexedEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, IdentityEnumerable<TOutItem, TIdentityBridgeType, TIdentityBridger, TIdentityEnumerator>, TIdentityEnumerator> SelectMany<TOutItem, TIdentityBridgeType, TIdentityBridger, TIdentityEnumerator>(this RangeEnumerable source, Func<int, int, IdentityEnumerable<TOutItem, TIdentityBridgeType, TIdentityBridger, TIdentityEnumerator>> selector)
//        where TIdentityBridgeType : class
//        where TIdentityEnumerator : struct, IStructEnumerator<TOutItem>
//        where TIdentityBridger : struct, IStructBridger<TOutItem, TIdentityBridgeType, TIdentityEnumerator>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, IdentityEnumerable<TOutItem, TIdentityBridgeType, TIdentityBridger, TIdentityEnumerator>, TIdentityEnumerator>(ref source, selector);

//        public static SelectManyEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, DistinctSpecificEnumerable<TOutItem, TSelectMany_DistinctInnerEnumerable, TSelectMany_DistinctInnerEnumerator>, DistinctSpecificEnumerator<TOutItem, TSelectMany_DistinctInnerEnumerator>> SelectMany<TOutItem, TSelectMany_DistinctInnerEnumerable, TSelectMany_DistinctInnerEnumerator>(this RangeEnumerable source, Func<int, DistinctSpecificEnumerable<TOutItem, TSelectMany_DistinctInnerEnumerable, TSelectMany_DistinctInnerEnumerator>> selector)
//        where TSelectMany_DistinctInnerEnumerable : struct, IStructEnumerable<TOutItem, TSelectMany_DistinctInnerEnumerator>
//        where TSelectMany_DistinctInnerEnumerator : struct, IStructEnumerator<TOutItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, DistinctSpecificEnumerable<TOutItem, TSelectMany_DistinctInnerEnumerable, TSelectMany_DistinctInnerEnumerator>, DistinctSpecificEnumerator<TOutItem, TSelectMany_DistinctInnerEnumerator>>(ref source, selector);

//        public static SelectManyIndexedEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, WhereEnumerable<TOutItem, TWhereInnerEnumerable, TWhereInnerEnumerator>, WhereEnumerator<TOutItem, TWhereInnerEnumerator>> SelectMany<TOutItem, TWhereInnerEnumerable, TWhereInnerEnumerator>(this RangeEnumerable source, Func<int, int, WhereEnumerable<TOutItem, TWhereInnerEnumerable, TWhereInnerEnumerator>> selector)
//        where TWhereInnerEnumerable : struct, IStructEnumerable<TOutItem, TWhereInnerEnumerator>
//        where TWhereInnerEnumerator : struct, IStructEnumerator<TOutItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, WhereEnumerable<TOutItem, TWhereInnerEnumerable, TWhereInnerEnumerator>, WhereEnumerator<TOutItem, TWhereInnerEnumerator>>(ref source, selector);

//        public static SelectManyIndexedEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, DefaultIfEmptyDefaultEnumerable<TOutItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>, DefaultIfEmptyDefaultEnumerator<TOutItem, TDefaultIfEmptyInnerEnumerator>> SelectMany<TOutItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>(this RangeEnumerable source, Func<int, int, DefaultIfEmptyDefaultEnumerable<TOutItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>> selector)
//        where TDefaultIfEmptyInnerEnumerable : struct, IStructEnumerable<TOutItem, TDefaultIfEmptyInnerEnumerator>
//        where TDefaultIfEmptyInnerEnumerator : struct, IStructEnumerator<TOutItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, DefaultIfEmptyDefaultEnumerable<TOutItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>, DefaultIfEmptyDefaultEnumerator<TOutItem, TDefaultIfEmptyInnerEnumerator>>(ref source, selector);

//        public static SelectManyIndexedEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, TakeEnumerable<TOutItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>, TakeEnumerator<TOutItem, TDefaultIfEmptyInnerEnumerator>> SelectMany<TOutItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>(this RangeEnumerable source, Func<int, int, TakeEnumerable<TOutItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>> selector)
//        where TDefaultIfEmptyInnerEnumerable : struct, IStructEnumerable<TOutItem, TDefaultIfEmptyInnerEnumerator>
//        where TDefaultIfEmptyInnerEnumerator : struct, IStructEnumerator<TOutItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, TakeEnumerable<TOutItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>, TakeEnumerator<TOutItem, TDefaultIfEmptyInnerEnumerator>>(ref source, selector);

//        public static SelectManyIndexedEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, TakeWhileIndexedEnumerable<TOutItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>, TakeWhileIndexedEnumerator<TOutItem, TDefaultIfEmptyInnerEnumerator>> SelectMany<TOutItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>(this RangeEnumerable source, Func<int, int, TakeWhileIndexedEnumerable<TOutItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>> selector)
//        where TDefaultIfEmptyInnerEnumerable : struct, IStructEnumerable<TOutItem, TDefaultIfEmptyInnerEnumerator>
//        where TDefaultIfEmptyInnerEnumerator : struct, IStructEnumerator<TOutItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, TakeWhileIndexedEnumerable<TOutItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>, TakeWhileIndexedEnumerator<TOutItem, TDefaultIfEmptyInnerEnumerator>>(ref source, selector);

//        public static SelectManyIndexedEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, SkipWhileEnumerable<TOutItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>, SkipWhileEnumerator<TOutItem, TDefaultIfEmptyInnerEnumerator>> SelectMany<TOutItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>(this RangeEnumerable source, Func<int, int, SkipWhileEnumerable<TOutItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>> selector)
//        where TDefaultIfEmptyInnerEnumerable : struct, IStructEnumerable<TOutItem, TDefaultIfEmptyInnerEnumerator>
//        where TDefaultIfEmptyInnerEnumerator : struct, IStructEnumerator<TOutItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, SkipWhileEnumerable<TOutItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>, SkipWhileEnumerator<TOutItem, TDefaultIfEmptyInnerEnumerator>>(ref source, selector);

//        public static SelectManyIndexedEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, SkipWhileIndexedEnumerable<TOutItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>, SkipWhileIndexedEnumerator<TOutItem, TDefaultIfEmptyInnerEnumerator>> SelectMany<TOutItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>(this RangeEnumerable source, Func<int, int, SkipWhileIndexedEnumerable<TOutItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>> selector)
//        where TDefaultIfEmptyInnerEnumerable : struct, IStructEnumerable<TOutItem, TDefaultIfEmptyInnerEnumerator>
//        where TDefaultIfEmptyInnerEnumerator : struct, IStructEnumerator<TOutItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, SkipWhileIndexedEnumerable<TOutItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>, SkipWhileIndexedEnumerator<TOutItem, TDefaultIfEmptyInnerEnumerator>>(ref source, selector);

//        public static SelectManyIndexedEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, SkipEnumerable<TOutItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>, SkipEnumerator<TOutItem, TDefaultIfEmptyInnerEnumerator>> SelectMany<TOutItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>(this RangeEnumerable source, Func<int, int, SkipEnumerable<TOutItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>> selector)
//        where TDefaultIfEmptyInnerEnumerable : struct, IStructEnumerable<TOutItem, TDefaultIfEmptyInnerEnumerator>
//        where TDefaultIfEmptyInnerEnumerator : struct, IStructEnumerator<TOutItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, SkipEnumerable<TOutItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>, SkipEnumerator<TOutItem, TDefaultIfEmptyInnerEnumerator>>(ref source, selector);

//        public static SelectManyIndexedEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, TakeWhileEnumerable<TOutItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>, TakeWhileEnumerator<TOutItem, TDefaultIfEmptyInnerEnumerator>> SelectMany<TOutItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>(this RangeEnumerable source, Func<int, int, TakeWhileEnumerable<TOutItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>> selector)
//        where TDefaultIfEmptyInnerEnumerable : struct, IStructEnumerable<TOutItem, TDefaultIfEmptyInnerEnumerator>
//        where TDefaultIfEmptyInnerEnumerator : struct, IStructEnumerator<TOutItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, TakeWhileEnumerable<TOutItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>, TakeWhileEnumerator<TOutItem, TDefaultIfEmptyInnerEnumerator>>(ref source, selector);

//        public static SelectManyIndexedEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, DefaultIfEmptySpecificEnumerable<TOutItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>, DefaultIfEmptySpecificEnumerator<TOutItem, TDefaultIfEmptyInnerEnumerator>> SelectMany<TOutItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>(this RangeEnumerable source, Func<int, int, DefaultIfEmptySpecificEnumerable<TOutItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>> selector)
//        where TDefaultIfEmptyInnerEnumerable : struct, IStructEnumerable<TOutItem, TDefaultIfEmptyInnerEnumerator>
//        where TDefaultIfEmptyInnerEnumerator : struct, IStructEnumerator<TOutItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, DefaultIfEmptySpecificEnumerable<TOutItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>, DefaultIfEmptySpecificEnumerator<TOutItem, TDefaultIfEmptyInnerEnumerator>>(ref source, selector);

//        public static SelectManyIndexedEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, WhereIndexedEnumerable<TOutItem, TWhereInnerEnumerable, TWhereInnerEnumerator>, WhereIndexedEnumerator<TOutItem, TWhereInnerEnumerator>> SelectMany<TOutItem, TWhereInnerEnumerable, TWhereInnerEnumerator>(this RangeEnumerable source, Func<int, int, WhereIndexedEnumerable<TOutItem, TWhereInnerEnumerable, TWhereInnerEnumerator>> selector)
//        where TWhereInnerEnumerable : struct, IStructEnumerable<TOutItem, TWhereInnerEnumerator>
//        where TWhereInnerEnumerator : struct, IStructEnumerator<TOutItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, WhereIndexedEnumerable<TOutItem, TWhereInnerEnumerable, TWhereInnerEnumerator>, WhereIndexedEnumerator<TOutItem, TWhereInnerEnumerator>>(ref source, selector);

//        public static SelectManyEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, DistinctDefaultEnumerable<TOutItem, TSelectMany_DistinctInnerEnumerable, TSelectMany_DistinctInnerEnumerator>, DistinctDefaultEnumerator<TOutItem, TSelectMany_DistinctInnerEnumerator>> SelectMany<TOutItem, TSelectMany_DistinctInnerEnumerable, TSelectMany_DistinctInnerEnumerator>(this RangeEnumerable source, Func<int, DistinctDefaultEnumerable<TOutItem, TSelectMany_DistinctInnerEnumerable, TSelectMany_DistinctInnerEnumerator>> selector)
//        where TSelectMany_DistinctInnerEnumerable : struct, IStructEnumerable<TOutItem, TSelectMany_DistinctInnerEnumerator>
//        where TSelectMany_DistinctInnerEnumerator : struct, IStructEnumerator<TOutItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, DistinctDefaultEnumerable<TOutItem, TSelectMany_DistinctInnerEnumerable, TSelectMany_DistinctInnerEnumerator>, DistinctDefaultEnumerator<TOutItem, TSelectMany_DistinctInnerEnumerator>>(ref source, selector);

//        public static SelectManyIndexedEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, DistinctSpecificEnumerable<TOutItem, TSelectMany_DistinctInnerEnumerable, TSelectMany_DistinctInnerEnumerator>, DistinctSpecificEnumerator<TOutItem, TSelectMany_DistinctInnerEnumerator>> SelectMany<TOutItem, TSelectMany_DistinctInnerEnumerable, TSelectMany_DistinctInnerEnumerator>(this RangeEnumerable source, Func<int, int, DistinctSpecificEnumerable<TOutItem, TSelectMany_DistinctInnerEnumerable, TSelectMany_DistinctInnerEnumerator>> selector)
//        where TSelectMany_DistinctInnerEnumerable : struct, IStructEnumerable<TOutItem, TSelectMany_DistinctInnerEnumerator>
//        where TSelectMany_DistinctInnerEnumerator : struct, IStructEnumerator<TOutItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, DistinctSpecificEnumerable<TOutItem, TSelectMany_DistinctInnerEnumerable, TSelectMany_DistinctInnerEnumerator>, DistinctSpecificEnumerator<TOutItem, TSelectMany_DistinctInnerEnumerator>>(ref source, selector);

//        public static SelectManyIndexedEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, DistinctDefaultEnumerable<TOutItem, TSelectMany_DistinctInnerEnumerable, TSelectMany_DistinctInnerEnumerator>, DistinctDefaultEnumerator<TOutItem, TSelectMany_DistinctInnerEnumerator>> SelectMany<TOutItem, TSelectMany_DistinctInnerEnumerable, TSelectMany_DistinctInnerEnumerator>(this RangeEnumerable source, Func<int, int, DistinctDefaultEnumerable<TOutItem, TSelectMany_DistinctInnerEnumerable, TSelectMany_DistinctInnerEnumerator>> selector)
//        where TSelectMany_DistinctInnerEnumerable : struct, IStructEnumerable<TOutItem, TSelectMany_DistinctInnerEnumerator>
//        where TSelectMany_DistinctInnerEnumerator : struct, IStructEnumerator<TOutItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, DistinctDefaultEnumerable<TOutItem, TSelectMany_DistinctInnerEnumerable, TSelectMany_DistinctInnerEnumerator>, DistinctDefaultEnumerator<TOutItem, TSelectMany_DistinctInnerEnumerator>>(ref source, selector);

//        public static SelectManyEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, TakeWhileEnumerable<TOutItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>, TakeWhileEnumerator<TOutItem, TDefaultIfEmptyInnerEnumerator>> SelectMany<TOutItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>(this RangeEnumerable source, Func<int, TakeWhileEnumerable<TOutItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>> selector)
//        where TDefaultIfEmptyInnerEnumerable : struct, IStructEnumerable<TOutItem, TDefaultIfEmptyInnerEnumerator>
//        where TDefaultIfEmptyInnerEnumerator : struct, IStructEnumerator<TOutItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, TakeWhileEnumerable<TOutItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>, TakeWhileEnumerator<TOutItem, TDefaultIfEmptyInnerEnumerator>>(ref source, selector);

//        public static SelectManyEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, TakeWhileIndexedEnumerable<TOutItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>, TakeWhileIndexedEnumerator<TOutItem, TDefaultIfEmptyInnerEnumerator>> SelectMany<TOutItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>(this RangeEnumerable source, Func<int, TakeWhileIndexedEnumerable<TOutItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>> selector)
//        where TDefaultIfEmptyInnerEnumerable : struct, IStructEnumerable<TOutItem, TDefaultIfEmptyInnerEnumerator>
//        where TDefaultIfEmptyInnerEnumerator : struct, IStructEnumerator<TOutItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, TakeWhileIndexedEnumerable<TOutItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>, TakeWhileIndexedEnumerator<TOutItem, TDefaultIfEmptyInnerEnumerator>>(ref source, selector);

//        public static SelectManyEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, SkipWhileEnumerable<TOutItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>, SkipWhileEnumerator<TOutItem, TDefaultIfEmptyInnerEnumerator>> SelectMany<TOutItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>(this RangeEnumerable source, Func<int, SkipWhileEnumerable<TOutItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>> selector)
//        where TDefaultIfEmptyInnerEnumerable : struct, IStructEnumerable<TOutItem, TDefaultIfEmptyInnerEnumerator>
//        where TDefaultIfEmptyInnerEnumerator : struct, IStructEnumerator<TOutItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, SkipWhileEnumerable<TOutItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>, SkipWhileEnumerator<TOutItem, TDefaultIfEmptyInnerEnumerator>>(ref source, selector);

//        public static SelectManyIndexedEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, ReverseEnumerable<TOutItem, TSelectMany_ReverseEnumerable, TSelectMany_ReverseEnumerator>, ReverseEnumerator<TOutItem>> SelectMany<TOutItem, TSelectMany_ReverseEnumerable, TSelectMany_ReverseEnumerator>(this RangeEnumerable source, Func<int, int, ReverseEnumerable<TOutItem, TSelectMany_ReverseEnumerable, TSelectMany_ReverseEnumerator>> selector)
//        where TSelectMany_ReverseEnumerable : struct, IStructEnumerable<TOutItem, TSelectMany_ReverseEnumerator>
//        where TSelectMany_ReverseEnumerator : struct, IStructEnumerator<TOutItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, ReverseEnumerable<TOutItem, TSelectMany_ReverseEnumerable, TSelectMany_ReverseEnumerator>, ReverseEnumerator<TOutItem>>(ref source, selector);

//        public static SelectManyEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, ReverseEnumerable<TOutItem, TSelectMany_ReverseEnumerable, TSelectMany_ReverseEnumerator>, ReverseEnumerator<TOutItem>> SelectMany<TOutItem, TSelectMany_ReverseEnumerable, TSelectMany_ReverseEnumerator>(this RangeEnumerable source, Func<int, ReverseEnumerable<TOutItem, TSelectMany_ReverseEnumerable, TSelectMany_ReverseEnumerator>> selector)
//        where TSelectMany_ReverseEnumerable : struct, IStructEnumerable<TOutItem, TSelectMany_ReverseEnumerator>
//        where TSelectMany_ReverseEnumerator : struct, IStructEnumerator<TOutItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, ReverseEnumerable<TOutItem, TSelectMany_ReverseEnumerable, TSelectMany_ReverseEnumerator>, ReverseEnumerator<TOutItem>>(ref source, selector);

//        public static SelectManyEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, SkipEnumerable<TOutItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>, SkipEnumerator<TOutItem, TDefaultIfEmptyInnerEnumerator>> SelectMany<TOutItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>(this RangeEnumerable source, Func<int, SkipEnumerable<TOutItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>> selector)
//        where TDefaultIfEmptyInnerEnumerable : struct, IStructEnumerable<TOutItem, TDefaultIfEmptyInnerEnumerator>
//        where TDefaultIfEmptyInnerEnumerator : struct, IStructEnumerator<TOutItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, SkipEnumerable<TOutItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>, SkipEnumerator<TOutItem, TDefaultIfEmptyInnerEnumerator>>(ref source, selector);

//        public static SelectManyEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, IdentityEnumerable<TOutItem, TIdentityBridgeType, TIdentityBridger, TIdentityEnumerator>, TIdentityEnumerator> SelectMany<TOutItem, TIdentityBridgeType, TIdentityBridger, TIdentityEnumerator>(this RangeEnumerable source, Func<int, IdentityEnumerable<TOutItem, TIdentityBridgeType, TIdentityBridger, TIdentityEnumerator>> selector)
//        where TIdentityBridgeType : class
//        where TIdentityEnumerator : struct, IStructEnumerator<TOutItem>
//        where TIdentityBridger : struct, IStructBridger<TOutItem, TIdentityBridgeType, TIdentityEnumerator>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, IdentityEnumerable<TOutItem, TIdentityBridgeType, TIdentityBridger, TIdentityEnumerator>, TIdentityEnumerator>(ref source, selector);

//        public static SelectManyCollectionIndexedEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, GroupingEnumerable<TSelectMany_GroupedKey, TCollectionItem>, GroupingEnumerator<TCollectionItem>> SelectMany<TOutItem, TCollectionItem, TSelectMany_GroupedKey>(this RangeEnumerable source, Func<int, int, GroupingEnumerable<TSelectMany_GroupedKey, TCollectionItem>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, GroupingEnumerable<TSelectMany_GroupedKey, TCollectionItem>, GroupingEnumerator<TCollectionItem>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, GroupingEnumerable<TSelectMany_GroupedKey, TCollectionItem>, GroupingEnumerator<TCollectionItem>> SelectMany<TOutItem, TCollectionItem, TSelectMany_GroupedKey>(this RangeEnumerable source, Func<int, GroupingEnumerable<TSelectMany_GroupedKey, TCollectionItem>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, GroupingEnumerable<TSelectMany_GroupedKey, TCollectionItem>, GroupingEnumerator<TCollectionItem>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionIndexedEnumerable<int, TOutItem, GroupingEnumerable<TSelectMany_LookupKey, TSelectMany_LookupElement>, RangeEnumerable, RangeEnumerator, LookupDefaultEnumerable<TSelectMany_LookupKey, TSelectMany_LookupElement>, LookupDefaultEnumerator<TSelectMany_LookupKey, TSelectMany_LookupElement>> SelectMany<TOutItem, TSelectMany_LookupKey, TSelectMany_LookupElement>(this RangeEnumerable source, Func<int, int, LookupDefaultEnumerable<TSelectMany_LookupKey, TSelectMany_LookupElement>> collectionSelector, Func<int, GroupingEnumerable<TSelectMany_LookupKey, TSelectMany_LookupElement>, TOutItem> resultSelector)
//        => CommonImplementation.SelectMany<int, TOutItem, GroupingEnumerable<TSelectMany_LookupKey, TSelectMany_LookupElement>, RangeEnumerable, RangeEnumerator, LookupDefaultEnumerable<TSelectMany_LookupKey, TSelectMany_LookupElement>, LookupDefaultEnumerator<TSelectMany_LookupKey, TSelectMany_LookupElement>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionIndexedEnumerable<int, TOutItem, GroupingEnumerable<TSelectMany_LookupKey, TSelectMany_LookupElement>, RangeEnumerable, RangeEnumerator, LookupSpecificEnumerable<TSelectMany_LookupKey, TSelectMany_LookupElement>, LookupSpecificEnumerator<TSelectMany_LookupKey, TSelectMany_LookupElement>> SelectMany<TOutItem, TSelectMany_LookupKey, TSelectMany_LookupElement>(this RangeEnumerable source, Func<int, int, LookupSpecificEnumerable<TSelectMany_LookupKey, TSelectMany_LookupElement>> collectionSelector, Func<int, GroupingEnumerable<TSelectMany_LookupKey, TSelectMany_LookupElement>, TOutItem> resultSelector)
//        => CommonImplementation.SelectMany<int, TOutItem, GroupingEnumerable<TSelectMany_LookupKey, TSelectMany_LookupElement>, RangeEnumerable, RangeEnumerator, LookupSpecificEnumerable<TSelectMany_LookupKey, TSelectMany_LookupElement>, LookupSpecificEnumerator<TSelectMany_LookupKey, TSelectMany_LookupElement>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, GroupedEnumerable<TSelectMany_GroupedKey, TCollectionItem>, GroupedEnumerator<TCollectionItem>> SelectMany<TOutItem, TCollectionItem, TSelectMany_GroupedKey>(this RangeEnumerable source, Func<int, GroupedEnumerable<TSelectMany_GroupedKey, TCollectionItem>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, GroupedEnumerable<TSelectMany_GroupedKey, TCollectionItem>, GroupedEnumerator<TCollectionItem>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionIndexedBridgeEnumerable<int, TOutItem, TCollectionItem, SortedDictionary<TDictionaryKey, TCollectionItem>.ValueCollection, SortedDictionaryValuesBridger<TDictionaryKey, TCollectionItem>, RangeEnumerable, RangeEnumerator, SortedDictionaryValuesEnumerator<TDictionaryKey, TCollectionItem>> SelectMany<TOutItem, TCollectionItem, TDictionaryKey>(this RangeEnumerable source, Func<int, int, SortedDictionary<TDictionaryKey, TCollectionItem>.ValueCollection> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, SortedDictionary<TDictionaryKey, TCollectionItem>.ValueCollection, SortedDictionaryValuesBridger<TDictionaryKey, TCollectionItem>, RangeEnumerable, RangeEnumerator, SortedDictionaryValuesEnumerator<TDictionaryKey, TCollectionItem>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionIndexedBridgeEnumerable<int, TOutItem, TCollectionItem, SortedDictionary<TCollectionItem, TDictionaryValue>.KeyCollection, SortedDictionaryKeysBridger<TCollectionItem, TDictionaryValue>, RangeEnumerable, RangeEnumerator, SortedDictionaryKeysEnumerator<TCollectionItem, TDictionaryValue>> SelectMany<TOutItem, TCollectionItem, TDictionaryValue>(this RangeEnumerable source, Func<int, int, SortedDictionary<TCollectionItem, TDictionaryValue>.KeyCollection> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, SortedDictionary<TCollectionItem, TDictionaryValue>.KeyCollection, SortedDictionaryKeysBridger<TCollectionItem, TDictionaryValue>, RangeEnumerable, RangeEnumerator, SortedDictionaryKeysEnumerator<TCollectionItem, TDictionaryValue>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionBridgeEnumerable<int, TOutItem, TCollectionItem, SortedDictionary<TDictionaryKey, TCollectionItem>.ValueCollection, SortedDictionaryValuesBridger<TDictionaryKey, TCollectionItem>, RangeEnumerable, RangeEnumerator, SortedDictionaryValuesEnumerator<TDictionaryKey, TCollectionItem>> SelectMany<TOutItem, TCollectionItem, TDictionaryKey>(this RangeEnumerable source, Func<int, SortedDictionary<TDictionaryKey, TCollectionItem>.ValueCollection> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, SortedDictionary<TDictionaryKey, TCollectionItem>.ValueCollection, SortedDictionaryValuesBridger<TDictionaryKey, TCollectionItem>, RangeEnumerable, RangeEnumerator, SortedDictionaryValuesEnumerator<TDictionaryKey, TCollectionItem>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionEnumerable<int, TOutItem, GroupingEnumerable<TSelectMany_LookupKey, TSelectMany_LookupElement>, RangeEnumerable, RangeEnumerator, LookupDefaultEnumerable<TSelectMany_LookupKey, TSelectMany_LookupElement>, LookupDefaultEnumerator<TSelectMany_LookupKey, TSelectMany_LookupElement>> SelectMany<TOutItem, TSelectMany_LookupKey, TSelectMany_LookupElement>(this RangeEnumerable source, Func<int, LookupDefaultEnumerable<TSelectMany_LookupKey, TSelectMany_LookupElement>> collectionSelector, Func<int, GroupingEnumerable<TSelectMany_LookupKey, TSelectMany_LookupElement>, TOutItem> resultSelector)
//        => CommonImplementation.SelectMany<int, TOutItem, GroupingEnumerable<TSelectMany_LookupKey, TSelectMany_LookupElement>, RangeEnumerable, RangeEnumerator, LookupDefaultEnumerable<TSelectMany_LookupKey, TSelectMany_LookupElement>, LookupDefaultEnumerator<TSelectMany_LookupKey, TSelectMany_LookupElement>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionEnumerable<int, TOutItem, GroupingEnumerable<TSelectMany_LookupKey, TSelectMany_LookupElement>, RangeEnumerable, RangeEnumerator, LookupSpecificEnumerable<TSelectMany_LookupKey, TSelectMany_LookupElement>, LookupSpecificEnumerator<TSelectMany_LookupKey, TSelectMany_LookupElement>> SelectMany<TOutItem, TSelectMany_LookupKey, TSelectMany_LookupElement>(this RangeEnumerable source, Func<int, LookupSpecificEnumerable<TSelectMany_LookupKey, TSelectMany_LookupElement>> collectionSelector, Func<int, GroupingEnumerable<TSelectMany_LookupKey, TSelectMany_LookupElement>, TOutItem> resultSelector)
//        => CommonImplementation.SelectMany<int, TOutItem, GroupingEnumerable<TSelectMany_LookupKey, TSelectMany_LookupElement>, RangeEnumerable, RangeEnumerator, LookupSpecificEnumerable<TSelectMany_LookupKey, TSelectMany_LookupElement>, LookupSpecificEnumerator<TSelectMany_LookupKey, TSelectMany_LookupElement>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionIndexedBridgeEnumerable<int, TOutItem, TCollectionItem, Dictionary<TDictionaryKey, TCollectionItem>.ValueCollection, DictionaryValuesBridger<TDictionaryKey, TCollectionItem>, RangeEnumerable, RangeEnumerator, DictionaryValuesEnumerator<TDictionaryKey, TCollectionItem>> SelectMany<TOutItem, TCollectionItem, TDictionaryKey>(this RangeEnumerable source, Func<int, int, Dictionary<TDictionaryKey, TCollectionItem>.ValueCollection> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, Dictionary<TDictionaryKey, TCollectionItem>.ValueCollection, DictionaryValuesBridger<TDictionaryKey, TCollectionItem>, RangeEnumerable, RangeEnumerator, DictionaryValuesEnumerator<TDictionaryKey, TCollectionItem>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionIndexedEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, GroupedEnumerable<TSelectMany_GroupedKey, TCollectionItem>, GroupedEnumerator<TCollectionItem>> SelectMany<TOutItem, TCollectionItem, TSelectMany_GroupedKey>(this RangeEnumerable source, Func<int, int, GroupedEnumerable<TSelectMany_GroupedKey, TCollectionItem>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, GroupedEnumerable<TSelectMany_GroupedKey, TCollectionItem>, GroupedEnumerator<TCollectionItem>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionIndexedBridgeEnumerable<int, TOutItem, TCollectionItem, Dictionary<TCollectionItem, TDictionaryValue>.KeyCollection, DictionaryKeysBridger<TCollectionItem, TDictionaryValue>, RangeEnumerable, RangeEnumerator, DictionaryKeysEnumerator<TCollectionItem, TDictionaryValue>> SelectMany<TOutItem, TCollectionItem, TDictionaryValue>(this RangeEnumerable source, Func<int, int, Dictionary<TCollectionItem, TDictionaryValue>.KeyCollection> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, Dictionary<TCollectionItem, TDictionaryValue>.KeyCollection, DictionaryKeysBridger<TCollectionItem, TDictionaryValue>, RangeEnumerable, RangeEnumerator, DictionaryKeysEnumerator<TCollectionItem, TDictionaryValue>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionBridgeEnumerable<int, TOutItem, TCollectionItem, SortedDictionary<TCollectionItem, TDictionaryValue>.KeyCollection, SortedDictionaryKeysBridger<TCollectionItem, TDictionaryValue>, RangeEnumerable, RangeEnumerator, SortedDictionaryKeysEnumerator<TCollectionItem, TDictionaryValue>> SelectMany<TOutItem, TCollectionItem, TDictionaryValue>(this RangeEnumerable source, Func<int, SortedDictionary<TCollectionItem, TDictionaryValue>.KeyCollection> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, SortedDictionary<TCollectionItem, TDictionaryValue>.KeyCollection, SortedDictionaryKeysBridger<TCollectionItem, TDictionaryValue>, RangeEnumerable, RangeEnumerator, SortedDictionaryKeysEnumerator<TCollectionItem, TDictionaryValue>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionBridgeEnumerable<int, TOutItem, TCollectionItem, Dictionary<TDictionaryKey, TCollectionItem>.ValueCollection, DictionaryValuesBridger<TDictionaryKey, TCollectionItem>, RangeEnumerable, RangeEnumerator, DictionaryValuesEnumerator<TDictionaryKey, TCollectionItem>> SelectMany<TOutItem, TCollectionItem, TDictionaryKey>(this RangeEnumerable source, Func<int, Dictionary<TDictionaryKey, TCollectionItem>.ValueCollection> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, Dictionary<TDictionaryKey, TCollectionItem>.ValueCollection, DictionaryValuesBridger<TDictionaryKey, TCollectionItem>, RangeEnumerable, RangeEnumerator, DictionaryValuesEnumerator<TDictionaryKey, TCollectionItem>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionBridgeEnumerable<int, TOutItem, TCollectionItem, Dictionary<TCollectionItem, TDictionaryValue>.KeyCollection, DictionaryKeysBridger<TCollectionItem, TDictionaryValue>, RangeEnumerable, RangeEnumerator, DictionaryKeysEnumerator<TCollectionItem, TDictionaryValue>> SelectMany<TOutItem, TCollectionItem, TDictionaryValue>(this RangeEnumerable source, Func<int, Dictionary<TCollectionItem, TDictionaryValue>.KeyCollection> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, Dictionary<TCollectionItem, TDictionaryValue>.KeyCollection, DictionaryKeysBridger<TCollectionItem, TDictionaryValue>, RangeEnumerable, RangeEnumerator, DictionaryKeysEnumerator<TCollectionItem, TDictionaryValue>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, CastEnumerable<TCastInItem, TOutItem, TCastInnerEnumerable, TCastInnerEnumerator>, CastEnumerator<TCastInItem, TOutItem, TCastInnerEnumerator>> SelectMany<TCastInItem, TOutItem, TCastInnerEnumerable, TCastInnerEnumerator>(this RangeEnumerable source, Func<int, CastEnumerable<TCastInItem, TOutItem, TCastInnerEnumerable, TCastInnerEnumerator>> selector)
//        where TCastInnerEnumerable : struct, IStructEnumerable<TCastInItem, TCastInnerEnumerator>
//        where TCastInnerEnumerator : struct, IStructEnumerator<TCastInItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, CastEnumerable<TCastInItem, TOutItem, TCastInnerEnumerable, TCastInnerEnumerator>, CastEnumerator<TCastInItem, TOutItem, TCastInnerEnumerator>>(ref source, selector);

//        public static SelectManyIndexedEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, CastEnumerable<TCastInItem, TOutItem, TCastInnerEnumerable, TCastInnerEnumerator>, CastEnumerator<TCastInItem, TOutItem, TCastInnerEnumerator>> SelectMany<TCastInItem, TOutItem, TCastInnerEnumerable, TCastInnerEnumerator>(this RangeEnumerable source, Func<int, int, CastEnumerable<TCastInItem, TOutItem, TCastInnerEnumerable, TCastInnerEnumerator>> selector)
//        where TCastInnerEnumerable : struct, IStructEnumerable<TCastInItem, TCastInnerEnumerator>
//        where TCastInnerEnumerator : struct, IStructEnumerator<TCastInItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, CastEnumerable<TCastInItem, TOutItem, TCastInnerEnumerable, TCastInnerEnumerator>, CastEnumerator<TCastInItem, TOutItem, TCastInnerEnumerator>>(ref source, selector);

//        public static SelectManyIndexedEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, OfTypeEnumerable<TCastInItem, TOutItem, TCastInnerEnumerable, TCastInnerEnumerator>, OfTypeEnumerator<TCastInItem, TOutItem, TCastInnerEnumerator>> SelectMany<TCastInItem, TOutItem, TCastInnerEnumerable, TCastInnerEnumerator>(this RangeEnumerable source, Func<int, int, OfTypeEnumerable<TCastInItem, TOutItem, TCastInnerEnumerable, TCastInnerEnumerator>> selector)
//        where TCastInnerEnumerable : struct, IStructEnumerable<TCastInItem, TCastInnerEnumerator>
//        where TCastInnerEnumerator : struct, IStructEnumerator<TCastInItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, OfTypeEnumerable<TCastInItem, TOutItem, TCastInnerEnumerable, TCastInnerEnumerator>, OfTypeEnumerator<TCastInItem, TOutItem, TCastInnerEnumerator>>(ref source, selector);

//        public static SelectManyIndexedEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, SelectEnumerable<TSelectInItem, TOutItem, TSelectInnerEnumerable, TSelectInnerEnumerator>, SelectEnumerator<TSelectInItem, TOutItem, TSelectInnerEnumerator>> SelectMany<TSelectInItem, TOutItem, TSelectInnerEnumerable, TSelectInnerEnumerator>(this RangeEnumerable source, Func<int, int, SelectEnumerable<TSelectInItem, TOutItem, TSelectInnerEnumerable, TSelectInnerEnumerator>> selector)
//        where TSelectInnerEnumerable : struct, IStructEnumerable<TSelectInItem, TSelectInnerEnumerator>
//        where TSelectInnerEnumerator : struct, IStructEnumerator<TSelectInItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, SelectEnumerable<TSelectInItem, TOutItem, TSelectInnerEnumerable, TSelectInnerEnumerator>, SelectEnumerator<TSelectInItem, TOutItem, TSelectInnerEnumerator>>(ref source, selector);

//        public static SelectManyIndexedEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, SelectIndexedEnumerable<TSelectInItem, TOutItem, TSelectInnerEnumerable, TSelectInnerEnumerator>, SelectIndexedEnumerator<TSelectInItem, TOutItem, TSelectInnerEnumerator>> SelectMany<TSelectInItem, TOutItem, TSelectInnerEnumerable, TSelectInnerEnumerator>(this RangeEnumerable source, Func<int, int, SelectIndexedEnumerable<TSelectInItem, TOutItem, TSelectInnerEnumerable, TSelectInnerEnumerator>> selector)
//        where TSelectInnerEnumerable : struct, IStructEnumerable<TSelectInItem, TSelectInnerEnumerator>
//        where TSelectInnerEnumerator : struct, IStructEnumerator<TSelectInItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, SelectIndexedEnumerable<TSelectInItem, TOutItem, TSelectInnerEnumerable, TSelectInnerEnumerator>, SelectIndexedEnumerator<TSelectInItem, TOutItem, TSelectInnerEnumerator>>(ref source, selector);

//        public static SelectManyIndexedEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, OrderByEnumerable<TOutItem, TSelectMany_OrderByKey, TSelectMany_OrderByEnumerable, TSelectMany_OrderByEnumerator, TSelectMany_OrderByComparer>, OrderByEnumerator<TOutItem, TSelectMany_OrderByKey, TSelectMany_OrderByEnumerator, TSelectMany_OrderByComparer>> SelectMany<TOutItem, TSelectMany_OrderByKey, TSelectMany_OrderByEnumerable, TSelectMany_OrderByEnumerator, TSelectMany_OrderByComparer>(this RangeEnumerable source, Func<int, int, OrderByEnumerable<TOutItem, TSelectMany_OrderByKey, TSelectMany_OrderByEnumerable, TSelectMany_OrderByEnumerator, TSelectMany_OrderByComparer>> selector)
//        where TSelectMany_OrderByEnumerable : struct, IStructEnumerable<TOutItem, TSelectMany_OrderByEnumerator>
//        where TSelectMany_OrderByEnumerator : struct, IStructEnumerator<TOutItem>
//        where TSelectMany_OrderByComparer : struct, IStructComparer<TOutItem, TSelectMany_OrderByKey>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, OrderByEnumerable<TOutItem, TSelectMany_OrderByKey, TSelectMany_OrderByEnumerable, TSelectMany_OrderByEnumerator, TSelectMany_OrderByComparer>, OrderByEnumerator<TOutItem, TSelectMany_OrderByKey, TSelectMany_OrderByEnumerator, TSelectMany_OrderByComparer>>(ref source, selector);

//        public static SelectManyEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, OfTypeEnumerable<TCastInItem, TOutItem, TCastInnerEnumerable, TCastInnerEnumerator>, OfTypeEnumerator<TCastInItem, TOutItem, TCastInnerEnumerator>> SelectMany<TCastInItem, TOutItem, TCastInnerEnumerable, TCastInnerEnumerator>(this RangeEnumerable source, Func<int, OfTypeEnumerable<TCastInItem, TOutItem, TCastInnerEnumerable, TCastInnerEnumerator>> selector)
//        where TCastInnerEnumerable : struct, IStructEnumerable<TCastInItem, TCastInnerEnumerator>
//        where TCastInnerEnumerator : struct, IStructEnumerator<TCastInItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, OfTypeEnumerable<TCastInItem, TOutItem, TCastInnerEnumerable, TCastInnerEnumerator>, OfTypeEnumerator<TCastInItem, TOutItem, TCastInnerEnumerator>>(ref source, selector);

//        public static SelectManyEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, OrderByEnumerable<TOutItem, TSelectMany_OrderByKey, TSelectMany_OrderByEnumerable, TSelectMany_OrderByEnumerator, TSelectMany_OrderByComparer>, OrderByEnumerator<TOutItem, TSelectMany_OrderByKey, TSelectMany_OrderByEnumerator, TSelectMany_OrderByComparer>> SelectMany<TOutItem, TSelectMany_OrderByKey, TSelectMany_OrderByEnumerable, TSelectMany_OrderByEnumerator, TSelectMany_OrderByComparer>(this RangeEnumerable source, Func<int, OrderByEnumerable<TOutItem, TSelectMany_OrderByKey, TSelectMany_OrderByEnumerable, TSelectMany_OrderByEnumerator, TSelectMany_OrderByComparer>> selector)
//        where TSelectMany_OrderByEnumerable : struct, IStructEnumerable<TOutItem, TSelectMany_OrderByEnumerator>
//        where TSelectMany_OrderByEnumerator : struct, IStructEnumerator<TOutItem>
//        where TSelectMany_OrderByComparer : struct, IStructComparer<TOutItem, TSelectMany_OrderByKey>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, OrderByEnumerable<TOutItem, TSelectMany_OrderByKey, TSelectMany_OrderByEnumerable, TSelectMany_OrderByEnumerator, TSelectMany_OrderByComparer>, OrderByEnumerator<TOutItem, TSelectMany_OrderByKey, TSelectMany_OrderByEnumerator, TSelectMany_OrderByComparer>>(ref source, selector);

//        public static SelectManyIndexedEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, WhereWhereEnumerable<TOutItem, TSelectMany_WhereInnerEnumerable, TSelectMany_WhereInnerEnumerator, TSelectMany_WherePredicate>, WhereWhereEnumerator<TOutItem, TSelectMany_WhereInnerEnumerator, TSelectMany_WherePredicate>> SelectMany<TOutItem, TSelectMany_WhereInnerEnumerable, TSelectMany_WhereInnerEnumerator, TSelectMany_WherePredicate>(this RangeEnumerable source, Func<int, int, WhereWhereEnumerable<TOutItem, TSelectMany_WhereInnerEnumerable, TSelectMany_WhereInnerEnumerator, TSelectMany_WherePredicate>> selector)
//        where TSelectMany_WhereInnerEnumerable : struct, IStructEnumerable<TOutItem, TSelectMany_WhereInnerEnumerator>
//        where TSelectMany_WhereInnerEnumerator : struct, IStructEnumerator<TOutItem>
//        where TSelectMany_WherePredicate : struct, IStructPredicate<TOutItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, WhereWhereEnumerable<TOutItem, TSelectMany_WhereInnerEnumerable, TSelectMany_WhereInnerEnumerator, TSelectMany_WherePredicate>, WhereWhereEnumerator<TOutItem, TSelectMany_WhereInnerEnumerator, TSelectMany_WherePredicate>>(ref source, selector);

//        public static SelectManyEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, WhereWhereEnumerable<TOutItem, TSelectMany_WhereInnerEnumerable, TSelectMany_WhereInnerEnumerator, TSelectMany_WherePredicate>, WhereWhereEnumerator<TOutItem, TSelectMany_WhereInnerEnumerator, TSelectMany_WherePredicate>> SelectMany<TOutItem, TSelectMany_WhereInnerEnumerable, TSelectMany_WhereInnerEnumerator, TSelectMany_WherePredicate>(this RangeEnumerable source, Func<int, WhereWhereEnumerable<TOutItem, TSelectMany_WhereInnerEnumerable, TSelectMany_WhereInnerEnumerator, TSelectMany_WherePredicate>> selector)
//        where TSelectMany_WhereInnerEnumerable : struct, IStructEnumerable<TOutItem, TSelectMany_WhereInnerEnumerator>
//        where TSelectMany_WhereInnerEnumerator : struct, IStructEnumerator<TOutItem>
//        where TSelectMany_WherePredicate : struct, IStructPredicate<TOutItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, WhereWhereEnumerable<TOutItem, TSelectMany_WhereInnerEnumerable, TSelectMany_WhereInnerEnumerator, TSelectMany_WherePredicate>, WhereWhereEnumerator<TOutItem, TSelectMany_WhereInnerEnumerator, TSelectMany_WherePredicate>>(ref source, selector);

//        public static SelectManyEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, SelectIndexedEnumerable<TSelectInItem, TOutItem, TSelectInnerEnumerable, TSelectInnerEnumerator>, SelectIndexedEnumerator<TSelectInItem, TOutItem, TSelectInnerEnumerator>> SelectMany<TSelectInItem, TOutItem, TSelectInnerEnumerable, TSelectInnerEnumerator>(this RangeEnumerable source, Func<int, SelectIndexedEnumerable<TSelectInItem, TOutItem, TSelectInnerEnumerable, TSelectInnerEnumerator>> selector)
//        where TSelectInnerEnumerable : struct, IStructEnumerable<TSelectInItem, TSelectInnerEnumerator>
//        where TSelectInnerEnumerator : struct, IStructEnumerator<TSelectInItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, SelectIndexedEnumerable<TSelectInItem, TOutItem, TSelectInnerEnumerable, TSelectInnerEnumerator>, SelectIndexedEnumerator<TSelectInItem, TOutItem, TSelectInnerEnumerator>>(ref source, selector);

//        public static SelectManyEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, SelectEnumerable<TSelectInItem, TOutItem, TSelectInnerEnumerable, TSelectInnerEnumerator>, SelectEnumerator<TSelectInItem, TOutItem, TSelectInnerEnumerator>> SelectMany<TSelectInItem, TOutItem, TSelectInnerEnumerable, TSelectInnerEnumerator>(this RangeEnumerable source, Func<int, SelectEnumerable<TSelectInItem, TOutItem, TSelectInnerEnumerable, TSelectInnerEnumerator>> selector)
//        where TSelectInnerEnumerable : struct, IStructEnumerable<TSelectInItem, TSelectInnerEnumerator>
//        where TSelectInnerEnumerator : struct, IStructEnumerator<TSelectInItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, SelectEnumerable<TSelectInItem, TOutItem, TSelectInnerEnumerable, TSelectInnerEnumerator>, SelectEnumerator<TSelectInItem, TOutItem, TSelectInnerEnumerator>>(ref source, selector);

//        public static SelectManyCollectionIndexedEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, TakeWhileEnumerable<TCollectionItem, TTakeInnerEnumerable, TTakeInnerEnumerator>, TakeWhileEnumerator<TCollectionItem, TTakeInnerEnumerator>> SelectMany<TOutItem, TCollectionItem, TTakeInnerEnumerable, TTakeInnerEnumerator>(this RangeEnumerable source, Func<int, int, TakeWhileEnumerable<TCollectionItem, TTakeInnerEnumerable, TTakeInnerEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TTakeInnerEnumerable : struct, IStructEnumerable<TCollectionItem, TTakeInnerEnumerator>
//        where TTakeInnerEnumerator : struct, IStructEnumerator<TCollectionItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, TakeWhileEnumerable<TCollectionItem, TTakeInnerEnumerable, TTakeInnerEnumerator>, TakeWhileEnumerator<TCollectionItem, TTakeInnerEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionIndexedEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, WhereEnumerable<TCollectionItem, TWhereInnerEnumerable, TWhereInnerEnumerator>, WhereEnumerator<TCollectionItem, TWhereInnerEnumerator>> SelectMany<TOutItem, TCollectionItem, TWhereInnerEnumerable, TWhereInnerEnumerator>(this RangeEnumerable source, Func<int, int, WhereEnumerable<TCollectionItem, TWhereInnerEnumerable, TWhereInnerEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TWhereInnerEnumerable : struct, IStructEnumerable<TCollectionItem, TWhereInnerEnumerator>
//        where TWhereInnerEnumerator : struct, IStructEnumerator<TCollectionItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, WhereEnumerable<TCollectionItem, TWhereInnerEnumerable, TWhereInnerEnumerator>, WhereEnumerator<TCollectionItem, TWhereInnerEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionIndexedEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, WhereIndexedEnumerable<TCollectionItem, TWhereInnerEnumerable, TWhereInnerEnumerator>, WhereIndexedEnumerator<TCollectionItem, TWhereInnerEnumerator>> SelectMany<TOutItem, TCollectionItem, TWhereInnerEnumerable, TWhereInnerEnumerator>(this RangeEnumerable source, Func<int, int, WhereIndexedEnumerable<TCollectionItem, TWhereInnerEnumerable, TWhereInnerEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TWhereInnerEnumerable : struct, IStructEnumerable<TCollectionItem, TWhereInnerEnumerator>
//        where TWhereInnerEnumerator : struct, IStructEnumerator<TCollectionItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, WhereIndexedEnumerable<TCollectionItem, TWhereInnerEnumerable, TWhereInnerEnumerator>, WhereIndexedEnumerator<TCollectionItem, TWhereInnerEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionIndexedEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, TakeWhileIndexedEnumerable<TCollectionItem, TTakeInnerEnumerable, TTakeInnerEnumerator>, TakeWhileIndexedEnumerator<TCollectionItem, TTakeInnerEnumerator>> SelectMany<TOutItem, TCollectionItem, TTakeInnerEnumerable, TTakeInnerEnumerator>(this RangeEnumerable source, Func<int, int, TakeWhileIndexedEnumerable<TCollectionItem, TTakeInnerEnumerable, TTakeInnerEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TTakeInnerEnumerable : struct, IStructEnumerable<TCollectionItem, TTakeInnerEnumerator>
//        where TTakeInnerEnumerator : struct, IStructEnumerator<TCollectionItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, TakeWhileIndexedEnumerable<TCollectionItem, TTakeInnerEnumerable, TTakeInnerEnumerator>, TakeWhileIndexedEnumerator<TCollectionItem, TTakeInnerEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionIndexedEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, TakeEnumerable<TCollectionItem, TTakeInnerEnumerable, TTakeInnerEnumerator>, TakeEnumerator<TCollectionItem, TTakeInnerEnumerator>> SelectMany<TOutItem, TCollectionItem, TTakeInnerEnumerable, TTakeInnerEnumerator>(this RangeEnumerable source, Func<int, int, TakeEnumerable<TCollectionItem, TTakeInnerEnumerable, TTakeInnerEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TTakeInnerEnumerable : struct, IStructEnumerable<TCollectionItem, TTakeInnerEnumerator>
//        where TTakeInnerEnumerator : struct, IStructEnumerator<TCollectionItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, TakeEnumerable<TCollectionItem, TTakeInnerEnumerable, TTakeInnerEnumerator>, TakeEnumerator<TCollectionItem, TTakeInnerEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionIndexedEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, DistinctSpecificEnumerable<TCollectionItem, TSelectMany_DistinctInnerEnumerable, TSelectMany_DistinctInnerEnumerator>, DistinctSpecificEnumerator<TCollectionItem, TSelectMany_DistinctInnerEnumerator>> SelectMany<TCollectionItem, TOutItem, TSelectMany_DistinctInnerEnumerable, TSelectMany_DistinctInnerEnumerator>(this RangeEnumerable source, Func<int, int, DistinctSpecificEnumerable<TCollectionItem, TSelectMany_DistinctInnerEnumerable, TSelectMany_DistinctInnerEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TSelectMany_DistinctInnerEnumerable : struct, IStructEnumerable<TCollectionItem, TSelectMany_DistinctInnerEnumerator>
//        where TSelectMany_DistinctInnerEnumerator : struct, IStructEnumerator<TCollectionItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, DistinctSpecificEnumerable<TCollectionItem, TSelectMany_DistinctInnerEnumerable, TSelectMany_DistinctInnerEnumerator>, DistinctSpecificEnumerator<TCollectionItem, TSelectMany_DistinctInnerEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionIndexedEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, DistinctDefaultEnumerable<TCollectionItem, TSelectMany_DistinctInnerEnumerable, TSelectMany_DistinctInnerEnumerator>, DistinctDefaultEnumerator<TCollectionItem, TSelectMany_DistinctInnerEnumerator>> SelectMany<TCollectionItem, TOutItem, TSelectMany_DistinctInnerEnumerable, TSelectMany_DistinctInnerEnumerator>(this RangeEnumerable source, Func<int, int, DistinctDefaultEnumerable<TCollectionItem, TSelectMany_DistinctInnerEnumerable, TSelectMany_DistinctInnerEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TSelectMany_DistinctInnerEnumerable : struct, IStructEnumerable<TCollectionItem, TSelectMany_DistinctInnerEnumerator>
//        where TSelectMany_DistinctInnerEnumerator : struct, IStructEnumerator<TCollectionItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, DistinctDefaultEnumerable<TCollectionItem, TSelectMany_DistinctInnerEnumerable, TSelectMany_DistinctInnerEnumerator>, DistinctDefaultEnumerator<TCollectionItem, TSelectMany_DistinctInnerEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, WhereIndexedEnumerable<TCollectionItem, TWhereInnerEnumerable, TWhereInnerEnumerator>, WhereIndexedEnumerator<TCollectionItem, TWhereInnerEnumerator>> SelectMany<TOutItem, TCollectionItem, TWhereInnerEnumerable, TWhereInnerEnumerator>(this RangeEnumerable source, Func<int, WhereIndexedEnumerable<TCollectionItem, TWhereInnerEnumerable, TWhereInnerEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TWhereInnerEnumerable : struct, IStructEnumerable<TCollectionItem, TWhereInnerEnumerator>
//        where TWhereInnerEnumerator : struct, IStructEnumerator<TCollectionItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, WhereIndexedEnumerable<TCollectionItem, TWhereInnerEnumerable, TWhereInnerEnumerator>, WhereIndexedEnumerator<TCollectionItem, TWhereInnerEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, SkipEnumerable<TCollectionItem, TSkipInnerEnumerable, TSkipInnerEnumerator>, SkipEnumerator<TCollectionItem, TSkipInnerEnumerator>> SelectMany<TOutItem, TCollectionItem, TSkipInnerEnumerable, TSkipInnerEnumerator>(this RangeEnumerable source, Func<int, SkipEnumerable<TCollectionItem, TSkipInnerEnumerable, TSkipInnerEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TSkipInnerEnumerable : struct, IStructEnumerable<TCollectionItem, TSkipInnerEnumerator>
//        where TSkipInnerEnumerator : struct, IStructEnumerator<TCollectionItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, SkipEnumerable<TCollectionItem, TSkipInnerEnumerable, TSkipInnerEnumerator>, SkipEnumerator<TCollectionItem, TSkipInnerEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, SkipWhileIndexedEnumerable<TCollectionItem, TSkipInnerEnumerable, TSkipInnerEnumerator>, SkipWhileIndexedEnumerator<TCollectionItem, TSkipInnerEnumerator>> SelectMany<TOutItem, TCollectionItem, TSkipInnerEnumerable, TSkipInnerEnumerator>(this RangeEnumerable source, Func<int, SkipWhileIndexedEnumerable<TCollectionItem, TSkipInnerEnumerable, TSkipInnerEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TSkipInnerEnumerable : struct, IStructEnumerable<TCollectionItem, TSkipInnerEnumerator>
//        where TSkipInnerEnumerator : struct, IStructEnumerator<TCollectionItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, SkipWhileIndexedEnumerable<TCollectionItem, TSkipInnerEnumerable, TSkipInnerEnumerator>, SkipWhileIndexedEnumerator<TCollectionItem, TSkipInnerEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, DistinctSpecificEnumerable<TCollectionItem, TSelectMany_DistinctInnerEnumerable, TSelectMany_DistinctInnerEnumerator>, DistinctSpecificEnumerator<TCollectionItem, TSelectMany_DistinctInnerEnumerator>> SelectMany<TCollectionItem, TOutItem, TSelectMany_DistinctInnerEnumerable, TSelectMany_DistinctInnerEnumerator>(this RangeEnumerable source, Func<int, DistinctSpecificEnumerable<TCollectionItem, TSelectMany_DistinctInnerEnumerable, TSelectMany_DistinctInnerEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TSelectMany_DistinctInnerEnumerable : struct, IStructEnumerable<TCollectionItem, TSelectMany_DistinctInnerEnumerator>
//        where TSelectMany_DistinctInnerEnumerator : struct, IStructEnumerator<TCollectionItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, DistinctSpecificEnumerable<TCollectionItem, TSelectMany_DistinctInnerEnumerable, TSelectMany_DistinctInnerEnumerator>, DistinctSpecificEnumerator<TCollectionItem, TSelectMany_DistinctInnerEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionIndexedEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, ReverseEnumerable<TCollectionItem, TSelectMany_ReverseEnumerable, TSelectMany_ReverseEnumerator>, ReverseEnumerator<TCollectionItem>> SelectMany<TOutItem, TCollectionItem, TSelectMany_ReverseEnumerable, TSelectMany_ReverseEnumerator>(this RangeEnumerable source, Func<int, int, ReverseEnumerable<TCollectionItem, TSelectMany_ReverseEnumerable, TSelectMany_ReverseEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TSelectMany_ReverseEnumerable : struct, IStructEnumerable<TCollectionItem, TSelectMany_ReverseEnumerator>
//        where TSelectMany_ReverseEnumerator : struct, IStructEnumerator<TCollectionItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, ReverseEnumerable<TCollectionItem, TSelectMany_ReverseEnumerable, TSelectMany_ReverseEnumerator>, ReverseEnumerator<TCollectionItem>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, DistinctDefaultEnumerable<TCollectionItem, TSelectMany_DistinctInnerEnumerable, TSelectMany_DistinctInnerEnumerator>, DistinctDefaultEnumerator<TCollectionItem, TSelectMany_DistinctInnerEnumerator>> SelectMany<TCollectionItem, TOutItem, TSelectMany_DistinctInnerEnumerable, TSelectMany_DistinctInnerEnumerator>(this RangeEnumerable source, Func<int, DistinctDefaultEnumerable<TCollectionItem, TSelectMany_DistinctInnerEnumerable, TSelectMany_DistinctInnerEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TSelectMany_DistinctInnerEnumerable : struct, IStructEnumerable<TCollectionItem, TSelectMany_DistinctInnerEnumerator>
//        where TSelectMany_DistinctInnerEnumerator : struct, IStructEnumerator<TCollectionItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, DistinctDefaultEnumerable<TCollectionItem, TSelectMany_DistinctInnerEnumerable, TSelectMany_DistinctInnerEnumerator>, DistinctDefaultEnumerator<TCollectionItem, TSelectMany_DistinctInnerEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionIndexedEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, IdentityEnumerable<TCollectionItem, TIdentityBridgeType, TIdentityBridger, TIdentityEnumerator>, TIdentityEnumerator> SelectMany<TOutItem, TCollectionItem, TIdentityBridgeType, TIdentityBridger, TIdentityEnumerator>(this RangeEnumerable source, Func<int, int, IdentityEnumerable<TCollectionItem, TIdentityBridgeType, TIdentityBridger, TIdentityEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TIdentityBridgeType : class
//        where TIdentityEnumerator : struct, IStructEnumerator<TCollectionItem>
//        where TIdentityBridger : struct, IStructBridger<TCollectionItem, TIdentityBridgeType, TIdentityEnumerator>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, IdentityEnumerable<TCollectionItem, TIdentityBridgeType, TIdentityBridger, TIdentityEnumerator>, TIdentityEnumerator>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionIndexedEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, DefaultIfEmptyDefaultEnumerable<TCollectionItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>, DefaultIfEmptyDefaultEnumerator<TCollectionItem, TDefaultIfEmptyInnerEnumerator>> SelectMany<TOutItem, TCollectionItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>(this RangeEnumerable source, Func<int, int, DefaultIfEmptyDefaultEnumerable<TCollectionItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TDefaultIfEmptyInnerEnumerable : struct, IStructEnumerable<TCollectionItem, TDefaultIfEmptyInnerEnumerator>
//        where TDefaultIfEmptyInnerEnumerator : struct, IStructEnumerator<TCollectionItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, DefaultIfEmptyDefaultEnumerable<TCollectionItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>, DefaultIfEmptyDefaultEnumerator<TCollectionItem, TDefaultIfEmptyInnerEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionIndexedEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, DefaultIfEmptySpecificEnumerable<TCollectionItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>, DefaultIfEmptySpecificEnumerator<TCollectionItem, TDefaultIfEmptyInnerEnumerator>> SelectMany<TOutItem, TCollectionItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>(this RangeEnumerable source, Func<int, int, DefaultIfEmptySpecificEnumerable<TCollectionItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TDefaultIfEmptyInnerEnumerable : struct, IStructEnumerable<TCollectionItem, TDefaultIfEmptyInnerEnumerator>
//        where TDefaultIfEmptyInnerEnumerator : struct, IStructEnumerator<TCollectionItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, DefaultIfEmptySpecificEnumerable<TCollectionItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>, DefaultIfEmptySpecificEnumerator<TCollectionItem, TDefaultIfEmptyInnerEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, TakeWhileEnumerable<TCollectionItem, TTakeInnerEnumerable, TTakeInnerEnumerator>, TakeWhileEnumerator<TCollectionItem, TTakeInnerEnumerator>> SelectMany<TOutItem, TCollectionItem, TTakeInnerEnumerable, TTakeInnerEnumerator>(this RangeEnumerable source, Func<int, TakeWhileEnumerable<TCollectionItem, TTakeInnerEnumerable, TTakeInnerEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TTakeInnerEnumerable : struct, IStructEnumerable<TCollectionItem, TTakeInnerEnumerator>
//        where TTakeInnerEnumerator : struct, IStructEnumerator<TCollectionItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, TakeWhileEnumerable<TCollectionItem, TTakeInnerEnumerable, TTakeInnerEnumerator>, TakeWhileEnumerator<TCollectionItem, TTakeInnerEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, TakeWhileIndexedEnumerable<TCollectionItem, TTakeInnerEnumerable, TTakeInnerEnumerator>, TakeWhileIndexedEnumerator<TCollectionItem, TTakeInnerEnumerator>> SelectMany<TOutItem, TCollectionItem, TTakeInnerEnumerable, TTakeInnerEnumerator>(this RangeEnumerable source, Func<int, TakeWhileIndexedEnumerable<TCollectionItem, TTakeInnerEnumerable, TTakeInnerEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TTakeInnerEnumerable : struct, IStructEnumerable<TCollectionItem, TTakeInnerEnumerator>
//        where TTakeInnerEnumerator : struct, IStructEnumerator<TCollectionItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, TakeWhileIndexedEnumerable<TCollectionItem, TTakeInnerEnumerable, TTakeInnerEnumerator>, TakeWhileIndexedEnumerator<TCollectionItem, TTakeInnerEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, WhereEnumerable<TCollectionItem, TWhereInnerEnumerable, TWhereInnerEnumerator>, WhereEnumerator<TCollectionItem, TWhereInnerEnumerator>> SelectMany<TOutItem, TCollectionItem, TWhereInnerEnumerable, TWhereInnerEnumerator>(this RangeEnumerable source, Func<int, WhereEnumerable<TCollectionItem, TWhereInnerEnumerable, TWhereInnerEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TWhereInnerEnumerable : struct, IStructEnumerable<TCollectionItem, TWhereInnerEnumerator>
//        where TWhereInnerEnumerator : struct, IStructEnumerator<TCollectionItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, WhereEnumerable<TCollectionItem, TWhereInnerEnumerable, TWhereInnerEnumerator>, WhereEnumerator<TCollectionItem, TWhereInnerEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, TakeEnumerable<TCollectionItem, TTakeInnerEnumerable, TTakeInnerEnumerator>, TakeEnumerator<TCollectionItem, TTakeInnerEnumerator>> SelectMany<TOutItem, TCollectionItem, TTakeInnerEnumerable, TTakeInnerEnumerator>(this RangeEnumerable source, Func<int, TakeEnumerable<TCollectionItem, TTakeInnerEnumerable, TTakeInnerEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TTakeInnerEnumerable : struct, IStructEnumerable<TCollectionItem, TTakeInnerEnumerator>
//        where TTakeInnerEnumerator : struct, IStructEnumerator<TCollectionItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, TakeEnumerable<TCollectionItem, TTakeInnerEnumerable, TTakeInnerEnumerator>, TakeEnumerator<TCollectionItem, TTakeInnerEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionIndexedEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, SkipEnumerable<TCollectionItem, TSkipInnerEnumerable, TSkipInnerEnumerator>, SkipEnumerator<TCollectionItem, TSkipInnerEnumerator>> SelectMany<TOutItem, TCollectionItem, TSkipInnerEnumerable, TSkipInnerEnumerator>(this RangeEnumerable source, Func<int, int, SkipEnumerable<TCollectionItem, TSkipInnerEnumerable, TSkipInnerEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TSkipInnerEnumerable : struct, IStructEnumerable<TCollectionItem, TSkipInnerEnumerator>
//        where TSkipInnerEnumerator : struct, IStructEnumerator<TCollectionItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, SkipEnumerable<TCollectionItem, TSkipInnerEnumerable, TSkipInnerEnumerator>, SkipEnumerator<TCollectionItem, TSkipInnerEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionIndexedEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, SkipWhileEnumerable<TCollectionItem, TSkipInnerEnumerable, TSkipInnerEnumerator>, SkipWhileEnumerator<TCollectionItem, TSkipInnerEnumerator>> SelectMany<TOutItem, TCollectionItem, TSkipInnerEnumerable, TSkipInnerEnumerator>(this RangeEnumerable source, Func<int, int, SkipWhileEnumerable<TCollectionItem, TSkipInnerEnumerable, TSkipInnerEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TSkipInnerEnumerable : struct, IStructEnumerable<TCollectionItem, TSkipInnerEnumerator>
//        where TSkipInnerEnumerator : struct, IStructEnumerator<TCollectionItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, SkipWhileEnumerable<TCollectionItem, TSkipInnerEnumerable, TSkipInnerEnumerator>, SkipWhileEnumerator<TCollectionItem, TSkipInnerEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionIndexedEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, SkipWhileIndexedEnumerable<TCollectionItem, TSkipInnerEnumerable, TSkipInnerEnumerator>, SkipWhileIndexedEnumerator<TCollectionItem, TSkipInnerEnumerator>> SelectMany<TOutItem, TCollectionItem, TSkipInnerEnumerable, TSkipInnerEnumerator>(this RangeEnumerable source, Func<int, int, SkipWhileIndexedEnumerable<TCollectionItem, TSkipInnerEnumerable, TSkipInnerEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TSkipInnerEnumerable : struct, IStructEnumerable<TCollectionItem, TSkipInnerEnumerator>
//        where TSkipInnerEnumerator : struct, IStructEnumerator<TCollectionItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, SkipWhileIndexedEnumerable<TCollectionItem, TSkipInnerEnumerable, TSkipInnerEnumerator>, SkipWhileIndexedEnumerator<TCollectionItem, TSkipInnerEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, SkipWhileEnumerable<TCollectionItem, TSkipInnerEnumerable, TSkipInnerEnumerator>, SkipWhileEnumerator<TCollectionItem, TSkipInnerEnumerator>> SelectMany<TOutItem, TCollectionItem, TSkipInnerEnumerable, TSkipInnerEnumerator>(this RangeEnumerable source, Func<int, SkipWhileEnumerable<TCollectionItem, TSkipInnerEnumerable, TSkipInnerEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TSkipInnerEnumerable : struct, IStructEnumerable<TCollectionItem, TSkipInnerEnumerator>
//        where TSkipInnerEnumerator : struct, IStructEnumerator<TCollectionItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, SkipWhileEnumerable<TCollectionItem, TSkipInnerEnumerable, TSkipInnerEnumerator>, SkipWhileEnumerator<TCollectionItem, TSkipInnerEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, ReverseEnumerable<TCollectionItem, TSelectMany_ReverseEnumerable, TSelectMany_ReverseEnumerator>, ReverseEnumerator<TCollectionItem>> SelectMany<TOutItem, TCollectionItem, TSelectMany_ReverseEnumerable, TSelectMany_ReverseEnumerator>(this RangeEnumerable source, Func<int, ReverseEnumerable<TCollectionItem, TSelectMany_ReverseEnumerable, TSelectMany_ReverseEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TSelectMany_ReverseEnumerable : struct, IStructEnumerable<TCollectionItem, TSelectMany_ReverseEnumerator>
//        where TSelectMany_ReverseEnumerator : struct, IStructEnumerator<TCollectionItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, ReverseEnumerable<TCollectionItem, TSelectMany_ReverseEnumerable, TSelectMany_ReverseEnumerator>, ReverseEnumerator<TCollectionItem>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, DefaultIfEmptySpecificEnumerable<TCollectionItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>, DefaultIfEmptySpecificEnumerator<TCollectionItem, TDefaultIfEmptyInnerEnumerator>> SelectMany<TOutItem, TCollectionItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>(this RangeEnumerable source, Func<int, DefaultIfEmptySpecificEnumerable<TCollectionItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TDefaultIfEmptyInnerEnumerable : struct, IStructEnumerable<TCollectionItem, TDefaultIfEmptyInnerEnumerator>
//        where TDefaultIfEmptyInnerEnumerator : struct, IStructEnumerator<TCollectionItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, DefaultIfEmptySpecificEnumerable<TCollectionItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>, DefaultIfEmptySpecificEnumerator<TCollectionItem, TDefaultIfEmptyInnerEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, DefaultIfEmptyDefaultEnumerable<TCollectionItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>, DefaultIfEmptyDefaultEnumerator<TCollectionItem, TDefaultIfEmptyInnerEnumerator>> SelectMany<TOutItem, TCollectionItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>(this RangeEnumerable source, Func<int, DefaultIfEmptyDefaultEnumerable<TCollectionItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TDefaultIfEmptyInnerEnumerable : struct, IStructEnumerable<TCollectionItem, TDefaultIfEmptyInnerEnumerator>
//        where TDefaultIfEmptyInnerEnumerator : struct, IStructEnumerator<TCollectionItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, DefaultIfEmptyDefaultEnumerable<TCollectionItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>, DefaultIfEmptyDefaultEnumerator<TCollectionItem, TDefaultIfEmptyInnerEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, IdentityEnumerable<TCollectionItem, TIdentityBridgeType, TIdentityBridger, TIdentityEnumerator>, TIdentityEnumerator> SelectMany<TOutItem, TCollectionItem, TIdentityBridgeType, TIdentityBridger, TIdentityEnumerator>(this RangeEnumerable source, Func<int, IdentityEnumerable<TCollectionItem, TIdentityBridgeType, TIdentityBridger, TIdentityEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TIdentityBridgeType : class
//        where TIdentityEnumerator : struct, IStructEnumerator<TCollectionItem>
//        where TIdentityBridger : struct, IStructBridger<TCollectionItem, TIdentityBridgeType, TIdentityEnumerator>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, IdentityEnumerable<TCollectionItem, TIdentityBridgeType, TIdentityBridger, TIdentityEnumerator>, TIdentityEnumerator>(ref source, collectionSelector, resultSelector);

//        public static SelectManyIndexedEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, IntersectDefaultEnumerable<TOutItem, TSelectMany_IntersectFirstEnumerable, TSelectMany_IntersectFirstEnumerator, TSelectMany_IntersectSecondEnumerable, TSelectMany_IntersectSecondEnumerator>, IntersectDefaultEnumerator<TOutItem, TSelectMany_IntersectFirstEnumerator, TSelectMany_IntersectSecondEnumerator>> SelectMany<TOutItem, TSelectMany_IntersectFirstEnumerable, TSelectMany_IntersectFirstEnumerator, TSelectMany_IntersectSecondEnumerable, TSelectMany_IntersectSecondEnumerator>(this RangeEnumerable source, Func<int, int, IntersectDefaultEnumerable<TOutItem, TSelectMany_IntersectFirstEnumerable, TSelectMany_IntersectFirstEnumerator, TSelectMany_IntersectSecondEnumerable, TSelectMany_IntersectSecondEnumerator>> selector)
//        where TSelectMany_IntersectFirstEnumerable : struct, IStructEnumerable<TOutItem, TSelectMany_IntersectFirstEnumerator>
//        where TSelectMany_IntersectFirstEnumerator : struct, IStructEnumerator<TOutItem>
//        where TSelectMany_IntersectSecondEnumerable : struct, IStructEnumerable<TOutItem, TSelectMany_IntersectSecondEnumerator>
//        where TSelectMany_IntersectSecondEnumerator : struct, IStructEnumerator<TOutItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, IntersectDefaultEnumerable<TOutItem, TSelectMany_IntersectFirstEnumerable, TSelectMany_IntersectFirstEnumerator, TSelectMany_IntersectSecondEnumerable, TSelectMany_IntersectSecondEnumerator>, IntersectDefaultEnumerator<TOutItem, TSelectMany_IntersectFirstEnumerator, TSelectMany_IntersectSecondEnumerator>>(ref source, selector);

//        public static SelectManyIndexedEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, UnionDefaultEnumerable<TOutItem, TSelectMany_UnionFirstEnumerable, TSelectMany_UnionFirstEnumerator, TSelectMany_UnionSecondEnumerable, TSelectMany_UnionSecondEnumerator>, UnionDefaultEnumerator<TOutItem, TSelectMany_UnionFirstEnumerator, TSelectMany_UnionSecondEnumerator>> SelectMany<TOutItem, TSelectMany_UnionFirstEnumerable, TSelectMany_UnionFirstEnumerator, TSelectMany_UnionSecondEnumerable, TSelectMany_UnionSecondEnumerator>(this RangeEnumerable source, Func<int, int, UnionDefaultEnumerable<TOutItem, TSelectMany_UnionFirstEnumerable, TSelectMany_UnionFirstEnumerator, TSelectMany_UnionSecondEnumerable, TSelectMany_UnionSecondEnumerator>> selector)
//        where TSelectMany_UnionFirstEnumerable : struct, IStructEnumerable<TOutItem, TSelectMany_UnionFirstEnumerator>
//        where TSelectMany_UnionFirstEnumerator : struct, IStructEnumerator<TOutItem>
//        where TSelectMany_UnionSecondEnumerable : struct, IStructEnumerable<TOutItem, TSelectMany_UnionSecondEnumerator>
//        where TSelectMany_UnionSecondEnumerator : struct, IStructEnumerator<TOutItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, UnionDefaultEnumerable<TOutItem, TSelectMany_UnionFirstEnumerable, TSelectMany_UnionFirstEnumerator, TSelectMany_UnionSecondEnumerable, TSelectMany_UnionSecondEnumerator>, UnionDefaultEnumerator<TOutItem, TSelectMany_UnionFirstEnumerator, TSelectMany_UnionSecondEnumerator>>(ref source, selector);

//        public static SelectManyIndexedEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, UnionSpecificEnumerable<TOutItem, TSelectMany_UnionFirstEnumerable, TSelectMany_UnionFirstEnumerator, TSelectMany_UnionSecondEnumerable, TSelectMany_UnionSecondEnumerator>, UnionSpecificEnumerator<TOutItem, TSelectMany_UnionFirstEnumerator, TSelectMany_UnionSecondEnumerator>> SelectMany<TOutItem, TSelectMany_UnionFirstEnumerable, TSelectMany_UnionFirstEnumerator, TSelectMany_UnionSecondEnumerable, TSelectMany_UnionSecondEnumerator>(this RangeEnumerable source, Func<int, int, UnionSpecificEnumerable<TOutItem, TSelectMany_UnionFirstEnumerable, TSelectMany_UnionFirstEnumerator, TSelectMany_UnionSecondEnumerable, TSelectMany_UnionSecondEnumerator>> selector)
//        where TSelectMany_UnionFirstEnumerable : struct, IStructEnumerable<TOutItem, TSelectMany_UnionFirstEnumerator>
//        where TSelectMany_UnionFirstEnumerator : struct, IStructEnumerator<TOutItem>
//        where TSelectMany_UnionSecondEnumerable : struct, IStructEnumerable<TOutItem, TSelectMany_UnionSecondEnumerator>
//        where TSelectMany_UnionSecondEnumerator : struct, IStructEnumerator<TOutItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, UnionSpecificEnumerable<TOutItem, TSelectMany_UnionFirstEnumerable, TSelectMany_UnionFirstEnumerator, TSelectMany_UnionSecondEnumerable, TSelectMany_UnionSecondEnumerator>, UnionSpecificEnumerator<TOutItem, TSelectMany_UnionFirstEnumerator, TSelectMany_UnionSecondEnumerator>>(ref source, selector);

//        public static SelectManyIndexedEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, IntersectSpecificEnumerable<TOutItem, TSelectMany_IntersectFirstEnumerable, TSelectMany_IntersectFirstEnumerator, TSelectMany_IntersectSecondEnumerable, TSelectMany_IntersectSecondEnumerator>, IntersectSpecificEnumerator<TOutItem, TSelectMany_IntersectFirstEnumerator, TSelectMany_IntersectSecondEnumerator>> SelectMany<TOutItem, TSelectMany_IntersectFirstEnumerable, TSelectMany_IntersectFirstEnumerator, TSelectMany_IntersectSecondEnumerable, TSelectMany_IntersectSecondEnumerator>(this RangeEnumerable source, Func<int, int, IntersectSpecificEnumerable<TOutItem, TSelectMany_IntersectFirstEnumerable, TSelectMany_IntersectFirstEnumerator, TSelectMany_IntersectSecondEnumerable, TSelectMany_IntersectSecondEnumerator>> selector)
//        where TSelectMany_IntersectFirstEnumerable : struct, IStructEnumerable<TOutItem, TSelectMany_IntersectFirstEnumerator>
//        where TSelectMany_IntersectFirstEnumerator : struct, IStructEnumerator<TOutItem>
//        where TSelectMany_IntersectSecondEnumerable : struct, IStructEnumerable<TOutItem, TSelectMany_IntersectSecondEnumerator>
//        where TSelectMany_IntersectSecondEnumerator : struct, IStructEnumerator<TOutItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, IntersectSpecificEnumerable<TOutItem, TSelectMany_IntersectFirstEnumerable, TSelectMany_IntersectFirstEnumerator, TSelectMany_IntersectSecondEnumerable, TSelectMany_IntersectSecondEnumerator>, IntersectSpecificEnumerator<TOutItem, TSelectMany_IntersectFirstEnumerator, TSelectMany_IntersectSecondEnumerator>>(ref source, selector);

//        public static SelectManyEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, UnionSpecificEnumerable<TOutItem, TSelectMany_UnionFirstEnumerable, TSelectMany_UnionFirstEnumerator, TSelectMany_UnionSecondEnumerable, TSelectMany_UnionSecondEnumerator>, UnionSpecificEnumerator<TOutItem, TSelectMany_UnionFirstEnumerator, TSelectMany_UnionSecondEnumerator>> SelectMany<TOutItem, TSelectMany_UnionFirstEnumerable, TSelectMany_UnionFirstEnumerator, TSelectMany_UnionSecondEnumerable, TSelectMany_UnionSecondEnumerator>(this RangeEnumerable source, Func<int, UnionSpecificEnumerable<TOutItem, TSelectMany_UnionFirstEnumerable, TSelectMany_UnionFirstEnumerator, TSelectMany_UnionSecondEnumerable, TSelectMany_UnionSecondEnumerator>> selector)
//        where TSelectMany_UnionFirstEnumerable : struct, IStructEnumerable<TOutItem, TSelectMany_UnionFirstEnumerator>
//        where TSelectMany_UnionFirstEnumerator : struct, IStructEnumerator<TOutItem>
//        where TSelectMany_UnionSecondEnumerable : struct, IStructEnumerable<TOutItem, TSelectMany_UnionSecondEnumerator>
//        where TSelectMany_UnionSecondEnumerator : struct, IStructEnumerator<TOutItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, UnionSpecificEnumerable<TOutItem, TSelectMany_UnionFirstEnumerable, TSelectMany_UnionFirstEnumerator, TSelectMany_UnionSecondEnumerable, TSelectMany_UnionSecondEnumerator>, UnionSpecificEnumerator<TOutItem, TSelectMany_UnionFirstEnumerator, TSelectMany_UnionSecondEnumerator>>(ref source, selector);

//        public static SelectManyEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, ExceptDefaultEnumerable<TOutItem, TSelectMany_ExceptFirstEnumerable, TSelectMany_ExceptFirstEnumerator, TSelectMany_ExceptSecondEnumerable, TSelectMany_ExceptSecondEnumerator>, ExceptDefaultEnumerator<TOutItem, TSelectMany_ExceptFirstEnumerator, TSelectMany_ExceptSecondEnumerator>> SelectMany<TOutItem, TSelectMany_ExceptFirstEnumerable, TSelectMany_ExceptFirstEnumerator, TSelectMany_ExceptSecondEnumerable, TSelectMany_ExceptSecondEnumerator>(this RangeEnumerable source, Func<int, ExceptDefaultEnumerable<TOutItem, TSelectMany_ExceptFirstEnumerable, TSelectMany_ExceptFirstEnumerator, TSelectMany_ExceptSecondEnumerable, TSelectMany_ExceptSecondEnumerator>> selector)
//        where TSelectMany_ExceptFirstEnumerable : struct, IStructEnumerable<TOutItem, TSelectMany_ExceptFirstEnumerator>
//        where TSelectMany_ExceptFirstEnumerator : struct, IStructEnumerator<TOutItem>
//        where TSelectMany_ExceptSecondEnumerable : struct, IStructEnumerable<TOutItem, TSelectMany_ExceptSecondEnumerator>
//        where TSelectMany_ExceptSecondEnumerator : struct, IStructEnumerator<TOutItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, ExceptDefaultEnumerable<TOutItem, TSelectMany_ExceptFirstEnumerable, TSelectMany_ExceptFirstEnumerator, TSelectMany_ExceptSecondEnumerable, TSelectMany_ExceptSecondEnumerator>, ExceptDefaultEnumerator<TOutItem, TSelectMany_ExceptFirstEnumerator, TSelectMany_ExceptSecondEnumerator>>(ref source, selector);

//        public static SelectManyEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, ExceptSpecificEnumerable<TOutItem, TSelectMany_ExceptFirstEnumerable, TSelectMany_ExceptFirstEnumerator, TSelectMany_ExceptSecondEnumerable, TSelectMany_ExceptSecondEnumerator>, ExceptSpecificEnumerator<TOutItem, TSelectMany_ExceptFirstEnumerator, TSelectMany_ExceptSecondEnumerator>> SelectMany<TOutItem, TSelectMany_ExceptFirstEnumerable, TSelectMany_ExceptFirstEnumerator, TSelectMany_ExceptSecondEnumerable, TSelectMany_ExceptSecondEnumerator>(this RangeEnumerable source, Func<int, ExceptSpecificEnumerable<TOutItem, TSelectMany_ExceptFirstEnumerable, TSelectMany_ExceptFirstEnumerator, TSelectMany_ExceptSecondEnumerable, TSelectMany_ExceptSecondEnumerator>> selector)
//        where TSelectMany_ExceptFirstEnumerable : struct, IStructEnumerable<TOutItem, TSelectMany_ExceptFirstEnumerator>
//        where TSelectMany_ExceptFirstEnumerator : struct, IStructEnumerator<TOutItem>
//        where TSelectMany_ExceptSecondEnumerable : struct, IStructEnumerable<TOutItem, TSelectMany_ExceptSecondEnumerator>
//        where TSelectMany_ExceptSecondEnumerator : struct, IStructEnumerator<TOutItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, ExceptSpecificEnumerable<TOutItem, TSelectMany_ExceptFirstEnumerable, TSelectMany_ExceptFirstEnumerator, TSelectMany_ExceptSecondEnumerable, TSelectMany_ExceptSecondEnumerator>, ExceptSpecificEnumerator<TOutItem, TSelectMany_ExceptFirstEnumerator, TSelectMany_ExceptSecondEnumerator>>(ref source, selector);

//        public static SelectManyEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, IntersectDefaultEnumerable<TOutItem, TSelectMany_IntersectFirstEnumerable, TSelectMany_IntersectFirstEnumerator, TSelectMany_IntersectSecondEnumerable, TSelectMany_IntersectSecondEnumerator>, IntersectDefaultEnumerator<TOutItem, TSelectMany_IntersectFirstEnumerator, TSelectMany_IntersectSecondEnumerator>> SelectMany<TOutItem, TSelectMany_IntersectFirstEnumerable, TSelectMany_IntersectFirstEnumerator, TSelectMany_IntersectSecondEnumerable, TSelectMany_IntersectSecondEnumerator>(this RangeEnumerable source, Func<int, IntersectDefaultEnumerable<TOutItem, TSelectMany_IntersectFirstEnumerable, TSelectMany_IntersectFirstEnumerator, TSelectMany_IntersectSecondEnumerable, TSelectMany_IntersectSecondEnumerator>> selector)
//        where TSelectMany_IntersectFirstEnumerable : struct, IStructEnumerable<TOutItem, TSelectMany_IntersectFirstEnumerator>
//        where TSelectMany_IntersectFirstEnumerator : struct, IStructEnumerator<TOutItem>
//        where TSelectMany_IntersectSecondEnumerable : struct, IStructEnumerable<TOutItem, TSelectMany_IntersectSecondEnumerator>
//        where TSelectMany_IntersectSecondEnumerator : struct, IStructEnumerator<TOutItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, IntersectDefaultEnumerable<TOutItem, TSelectMany_IntersectFirstEnumerable, TSelectMany_IntersectFirstEnumerator, TSelectMany_IntersectSecondEnumerable, TSelectMany_IntersectSecondEnumerator>, IntersectDefaultEnumerator<TOutItem, TSelectMany_IntersectFirstEnumerator, TSelectMany_IntersectSecondEnumerator>>(ref source, selector);

//        public static SelectManyEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, UnionDefaultEnumerable<TOutItem, TSelectMany_UnionFirstEnumerable, TSelectMany_UnionFirstEnumerator, TSelectMany_UnionSecondEnumerable, TSelectMany_UnionSecondEnumerator>, UnionDefaultEnumerator<TOutItem, TSelectMany_UnionFirstEnumerator, TSelectMany_UnionSecondEnumerator>> SelectMany<TOutItem, TSelectMany_UnionFirstEnumerable, TSelectMany_UnionFirstEnumerator, TSelectMany_UnionSecondEnumerable, TSelectMany_UnionSecondEnumerator>(this RangeEnumerable source, Func<int, UnionDefaultEnumerable<TOutItem, TSelectMany_UnionFirstEnumerable, TSelectMany_UnionFirstEnumerator, TSelectMany_UnionSecondEnumerable, TSelectMany_UnionSecondEnumerator>> selector)
//        where TSelectMany_UnionFirstEnumerable : struct, IStructEnumerable<TOutItem, TSelectMany_UnionFirstEnumerator>
//        where TSelectMany_UnionFirstEnumerator : struct, IStructEnumerator<TOutItem>
//        where TSelectMany_UnionSecondEnumerable : struct, IStructEnumerable<TOutItem, TSelectMany_UnionSecondEnumerator>
//        where TSelectMany_UnionSecondEnumerator : struct, IStructEnumerator<TOutItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, UnionDefaultEnumerable<TOutItem, TSelectMany_UnionFirstEnumerable, TSelectMany_UnionFirstEnumerator, TSelectMany_UnionSecondEnumerable, TSelectMany_UnionSecondEnumerator>, UnionDefaultEnumerator<TOutItem, TSelectMany_UnionFirstEnumerator, TSelectMany_UnionSecondEnumerator>>(ref source, selector);

//        public static SelectManyEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, IntersectSpecificEnumerable<TOutItem, TSelectMany_IntersectFirstEnumerable, TSelectMany_IntersectFirstEnumerator, TSelectMany_IntersectSecondEnumerable, TSelectMany_IntersectSecondEnumerator>, IntersectSpecificEnumerator<TOutItem, TSelectMany_IntersectFirstEnumerator, TSelectMany_IntersectSecondEnumerator>> SelectMany<TOutItem, TSelectMany_IntersectFirstEnumerable, TSelectMany_IntersectFirstEnumerator, TSelectMany_IntersectSecondEnumerable, TSelectMany_IntersectSecondEnumerator>(this RangeEnumerable source, Func<int, IntersectSpecificEnumerable<TOutItem, TSelectMany_IntersectFirstEnumerable, TSelectMany_IntersectFirstEnumerator, TSelectMany_IntersectSecondEnumerable, TSelectMany_IntersectSecondEnumerator>> selector)
//        where TSelectMany_IntersectFirstEnumerable : struct, IStructEnumerable<TOutItem, TSelectMany_IntersectFirstEnumerator>
//        where TSelectMany_IntersectFirstEnumerator : struct, IStructEnumerator<TOutItem>
//        where TSelectMany_IntersectSecondEnumerable : struct, IStructEnumerable<TOutItem, TSelectMany_IntersectSecondEnumerator>
//        where TSelectMany_IntersectSecondEnumerator : struct, IStructEnumerator<TOutItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, IntersectSpecificEnumerable<TOutItem, TSelectMany_IntersectFirstEnumerable, TSelectMany_IntersectFirstEnumerator, TSelectMany_IntersectSecondEnumerable, TSelectMany_IntersectSecondEnumerator>, IntersectSpecificEnumerator<TOutItem, TSelectMany_IntersectFirstEnumerator, TSelectMany_IntersectSecondEnumerator>>(ref source, selector);

//        public static SelectManyIndexedEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, ConcatEnumerable<TOutItem, TConcatFirstEnumerable, TConcatFirstEnumerator, TConcatSecondEnumerable, TConcatSecondEnumerator>, ConcatEnumerator<TOutItem, TConcatFirstEnumerator, TConcatSecondEnumerator>> SelectMany<TOutItem, TConcatFirstEnumerable, TConcatFirstEnumerator, TConcatSecondEnumerable, TConcatSecondEnumerator>(this RangeEnumerable source, Func<int, int, ConcatEnumerable<TOutItem, TConcatFirstEnumerable, TConcatFirstEnumerator, TConcatSecondEnumerable, TConcatSecondEnumerator>> selector)
//        where TConcatFirstEnumerable : struct, IStructEnumerable<TOutItem, TConcatFirstEnumerator>
//        where TConcatFirstEnumerator : struct, IStructEnumerator<TOutItem>
//        where TConcatSecondEnumerable : struct, IStructEnumerable<TOutItem, TConcatSecondEnumerator>
//        where TConcatSecondEnumerator : struct, IStructEnumerator<TOutItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, ConcatEnumerable<TOutItem, TConcatFirstEnumerable, TConcatFirstEnumerator, TConcatSecondEnumerable, TConcatSecondEnumerator>, ConcatEnumerator<TOutItem, TConcatFirstEnumerator, TConcatSecondEnumerator>>(ref source, selector);

//        public static SelectManyEnumerable<int, GroupingEnumerable<TSelectMany_GroupByKey, TSelectMany_GroupByElement>, RangeEnumerable, RangeEnumerator, GroupByDefaultEnumerable<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TSelectMany_GroupByEnumerable, TSelectMany_GroupByEnumerator>, GroupByDefaultEnumerator<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TSelectMany_GroupByEnumerator>> SelectMany<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TSelectMany_GroupByEnumerable, TSelectMany_GroupByEnumerator>(this RangeEnumerable source, Func<int, GroupByDefaultEnumerable<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TSelectMany_GroupByEnumerable, TSelectMany_GroupByEnumerator>> selector)
//        where TSelectMany_GroupByEnumerable : struct, IStructEnumerable<TSelectMany_GroupByInItem, TSelectMany_GroupByEnumerator>
//        where TSelectMany_GroupByEnumerator : struct, IStructEnumerator<TSelectMany_GroupByInItem>
//        => CommonImplementation.SelectMany<int, GroupingEnumerable<TSelectMany_GroupByKey, TSelectMany_GroupByElement>, RangeEnumerable, RangeEnumerator, GroupByDefaultEnumerable<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TSelectMany_GroupByEnumerable, TSelectMany_GroupByEnumerator>, GroupByDefaultEnumerator<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TSelectMany_GroupByEnumerator>>(ref source, selector);

//        public static SelectManyEnumerable<int, GroupingEnumerable<TSelectMany_GroupByKey, TSelectMany_GroupByElement>, RangeEnumerable, RangeEnumerator, GroupBySpecificEnumerable<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TSelectMany_GroupByEnumerable, TSelectMany_GroupByEnumerator>, GroupBySpecificEnumerator<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TSelectMany_GroupByEnumerator>> SelectMany<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TSelectMany_GroupByEnumerable, TSelectMany_GroupByEnumerator>(this RangeEnumerable source, Func<int, GroupBySpecificEnumerable<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TSelectMany_GroupByEnumerable, TSelectMany_GroupByEnumerator>> selector)
//        where TSelectMany_GroupByEnumerable : struct, IStructEnumerable<TSelectMany_GroupByInItem, TSelectMany_GroupByEnumerator>
//        where TSelectMany_GroupByEnumerator : struct, IStructEnumerator<TSelectMany_GroupByInItem>
//        => CommonImplementation.SelectMany<int, GroupingEnumerable<TSelectMany_GroupByKey, TSelectMany_GroupByElement>, RangeEnumerable, RangeEnumerator, GroupBySpecificEnumerable<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TSelectMany_GroupByEnumerable, TSelectMany_GroupByEnumerator>, GroupBySpecificEnumerator<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TSelectMany_GroupByEnumerator>>(ref source, selector);

//        public static SelectManyIndexedEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, SelectSelectEnumerable<TOutItem, TSelectMany_SelectInnerItem, TSelectMany_SelectInnerEnumerable, TSelectMany_SelectInnerEnumerator, TSelectMany_SelectProjection>, SelectSelectEnumerator<TOutItem, TSelectMany_SelectInnerItem, TSelectMany_SelectInnerEnumerator, TSelectMany_SelectProjection>> SelectMany<TSelectMany_SelectInnerItem, TOutItem, TSelectMany_SelectInnerEnumerable, TSelectMany_SelectInnerEnumerator, TSelectMany_SelectProjection>(this RangeEnumerable source, Func<int, int, SelectSelectEnumerable<TOutItem, TSelectMany_SelectInnerItem, TSelectMany_SelectInnerEnumerable, TSelectMany_SelectInnerEnumerator, TSelectMany_SelectProjection>> selector)
//        where TSelectMany_SelectInnerEnumerable : struct, IStructEnumerable<TSelectMany_SelectInnerItem, TSelectMany_SelectInnerEnumerator>
//        where TSelectMany_SelectInnerEnumerator : struct, IStructEnumerator<TSelectMany_SelectInnerItem>
//        where TSelectMany_SelectProjection : struct, IStructProjection<TOutItem, TSelectMany_SelectInnerItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, SelectSelectEnumerable<TOutItem, TSelectMany_SelectInnerItem, TSelectMany_SelectInnerEnumerable, TSelectMany_SelectInnerEnumerator, TSelectMany_SelectProjection>, SelectSelectEnumerator<TOutItem, TSelectMany_SelectInnerItem, TSelectMany_SelectInnerEnumerator, TSelectMany_SelectProjection>>(ref source, selector);

//        public static SelectManyIndexedEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, ExceptDefaultEnumerable<TOutItem, TSelectMany_ExceptFirstEnumerable, TSelectMany_ExceptFirstEnumerator, TSelectMany_ExceptSecondEnumerable, TSelectMany_ExceptSecondEnumerator>, ExceptDefaultEnumerator<TOutItem, TSelectMany_ExceptFirstEnumerator, TSelectMany_ExceptSecondEnumerator>> SelectMany<TOutItem, TSelectMany_ExceptFirstEnumerable, TSelectMany_ExceptFirstEnumerator, TSelectMany_ExceptSecondEnumerable, TSelectMany_ExceptSecondEnumerator>(this RangeEnumerable source, Func<int, int, ExceptDefaultEnumerable<TOutItem, TSelectMany_ExceptFirstEnumerable, TSelectMany_ExceptFirstEnumerator, TSelectMany_ExceptSecondEnumerable, TSelectMany_ExceptSecondEnumerator>> selector)
//        where TSelectMany_ExceptFirstEnumerable : struct, IStructEnumerable<TOutItem, TSelectMany_ExceptFirstEnumerator>
//        where TSelectMany_ExceptFirstEnumerator : struct, IStructEnumerator<TOutItem>
//        where TSelectMany_ExceptSecondEnumerable : struct, IStructEnumerable<TOutItem, TSelectMany_ExceptSecondEnumerator>
//        where TSelectMany_ExceptSecondEnumerator : struct, IStructEnumerator<TOutItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, ExceptDefaultEnumerable<TOutItem, TSelectMany_ExceptFirstEnumerable, TSelectMany_ExceptFirstEnumerator, TSelectMany_ExceptSecondEnumerable, TSelectMany_ExceptSecondEnumerator>, ExceptDefaultEnumerator<TOutItem, TSelectMany_ExceptFirstEnumerator, TSelectMany_ExceptSecondEnumerator>>(ref source, selector);

//        public static SelectManyIndexedEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, ExceptSpecificEnumerable<TOutItem, TSelectMany_ExceptFirstEnumerable, TSelectMany_ExceptFirstEnumerator, TSelectMany_ExceptSecondEnumerable, TSelectMany_ExceptSecondEnumerator>, ExceptSpecificEnumerator<TOutItem, TSelectMany_ExceptFirstEnumerator, TSelectMany_ExceptSecondEnumerator>> SelectMany<TOutItem, TSelectMany_ExceptFirstEnumerable, TSelectMany_ExceptFirstEnumerator, TSelectMany_ExceptSecondEnumerable, TSelectMany_ExceptSecondEnumerator>(this RangeEnumerable source, Func<int, int, ExceptSpecificEnumerable<TOutItem, TSelectMany_ExceptFirstEnumerable, TSelectMany_ExceptFirstEnumerator, TSelectMany_ExceptSecondEnumerable, TSelectMany_ExceptSecondEnumerator>> selector)
//        where TSelectMany_ExceptFirstEnumerable : struct, IStructEnumerable<TOutItem, TSelectMany_ExceptFirstEnumerator>
//        where TSelectMany_ExceptFirstEnumerator : struct, IStructEnumerator<TOutItem>
//        where TSelectMany_ExceptSecondEnumerable : struct, IStructEnumerable<TOutItem, TSelectMany_ExceptSecondEnumerator>
//        where TSelectMany_ExceptSecondEnumerator : struct, IStructEnumerator<TOutItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, ExceptSpecificEnumerable<TOutItem, TSelectMany_ExceptFirstEnumerable, TSelectMany_ExceptFirstEnumerator, TSelectMany_ExceptSecondEnumerable, TSelectMany_ExceptSecondEnumerator>, ExceptSpecificEnumerator<TOutItem, TSelectMany_ExceptFirstEnumerator, TSelectMany_ExceptSecondEnumerator>>(ref source, selector);

//        public static SelectManyIndexedEnumerable<int, GroupingEnumerable<TSelectMany_GroupByKey, TSelectMany_GroupByElement>, RangeEnumerable, RangeEnumerator, GroupByDefaultEnumerable<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TSelectMany_GroupByEnumerable, TSelectMany_GroupByEnumerator>, GroupByDefaultEnumerator<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TSelectMany_GroupByEnumerator>> SelectMany<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TSelectMany_GroupByEnumerable, TSelectMany_GroupByEnumerator>(this RangeEnumerable source, Func<int, int, GroupByDefaultEnumerable<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TSelectMany_GroupByEnumerable, TSelectMany_GroupByEnumerator>> selector)
//        where TSelectMany_GroupByEnumerable : struct, IStructEnumerable<TSelectMany_GroupByInItem, TSelectMany_GroupByEnumerator>
//        where TSelectMany_GroupByEnumerator : struct, IStructEnumerator<TSelectMany_GroupByInItem>
//        => CommonImplementation.SelectMany<int, GroupingEnumerable<TSelectMany_GroupByKey, TSelectMany_GroupByElement>, RangeEnumerable, RangeEnumerator, GroupByDefaultEnumerable<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TSelectMany_GroupByEnumerable, TSelectMany_GroupByEnumerator>, GroupByDefaultEnumerator<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TSelectMany_GroupByEnumerator>>(ref source, selector);

//        public static SelectManyIndexedEnumerable<int, GroupingEnumerable<TSelectMany_GroupByKey, TSelectMany_GroupByElement>, RangeEnumerable, RangeEnumerator, GroupBySpecificEnumerable<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TSelectMany_GroupByEnumerable, TSelectMany_GroupByEnumerator>, GroupBySpecificEnumerator<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TSelectMany_GroupByEnumerator>> SelectMany<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TSelectMany_GroupByEnumerable, TSelectMany_GroupByEnumerator>(this RangeEnumerable source, Func<int, int, GroupBySpecificEnumerable<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TSelectMany_GroupByEnumerable, TSelectMany_GroupByEnumerator>> selector)
//        where TSelectMany_GroupByEnumerable : struct, IStructEnumerable<TSelectMany_GroupByInItem, TSelectMany_GroupByEnumerator>
//        where TSelectMany_GroupByEnumerator : struct, IStructEnumerator<TSelectMany_GroupByInItem>
//        => CommonImplementation.SelectMany<int, GroupingEnumerable<TSelectMany_GroupByKey, TSelectMany_GroupByElement>, RangeEnumerable, RangeEnumerator, GroupBySpecificEnumerable<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TSelectMany_GroupByEnumerable, TSelectMany_GroupByEnumerator>, GroupBySpecificEnumerator<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TSelectMany_GroupByEnumerator>>(ref source, selector);

//        public static SelectManyEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, SelectSelectEnumerable<TOutItem, TSelectMany_SelectInnerItem, TSelectMany_SelectInnerEnumerable, TSelectMany_SelectInnerEnumerator, TSelectMany_SelectProjection>, SelectSelectEnumerator<TOutItem, TSelectMany_SelectInnerItem, TSelectMany_SelectInnerEnumerator, TSelectMany_SelectProjection>> SelectMany<TSelectMany_SelectInnerItem, TOutItem, TSelectMany_SelectInnerEnumerable, TSelectMany_SelectInnerEnumerator, TSelectMany_SelectProjection>(this RangeEnumerable source, Func<int, SelectSelectEnumerable<TOutItem, TSelectMany_SelectInnerItem, TSelectMany_SelectInnerEnumerable, TSelectMany_SelectInnerEnumerator, TSelectMany_SelectProjection>> selector)
//        where TSelectMany_SelectInnerEnumerable : struct, IStructEnumerable<TSelectMany_SelectInnerItem, TSelectMany_SelectInnerEnumerator>
//        where TSelectMany_SelectInnerEnumerator : struct, IStructEnumerator<TSelectMany_SelectInnerItem>
//        where TSelectMany_SelectProjection : struct, IStructProjection<TOutItem, TSelectMany_SelectInnerItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, SelectSelectEnumerable<TOutItem, TSelectMany_SelectInnerItem, TSelectMany_SelectInnerEnumerable, TSelectMany_SelectInnerEnumerator, TSelectMany_SelectProjection>, SelectSelectEnumerator<TOutItem, TSelectMany_SelectInnerItem, TSelectMany_SelectInnerEnumerator, TSelectMany_SelectProjection>>(ref source, selector);

//        public static SelectManyEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, ConcatEnumerable<TOutItem, TConcatFirstEnumerable, TConcatFirstEnumerator, TConcatSecondEnumerable, TConcatSecondEnumerator>, ConcatEnumerator<TOutItem, TConcatFirstEnumerator, TConcatSecondEnumerator>> SelectMany<TOutItem, TConcatFirstEnumerable, TConcatFirstEnumerator, TConcatSecondEnumerable, TConcatSecondEnumerator>(this RangeEnumerable source, Func<int, ConcatEnumerable<TOutItem, TConcatFirstEnumerable, TConcatFirstEnumerator, TConcatSecondEnumerable, TConcatSecondEnumerator>> selector)
//        where TConcatFirstEnumerable : struct, IStructEnumerable<TOutItem, TConcatFirstEnumerator>
//        where TConcatFirstEnumerator : struct, IStructEnumerator<TOutItem>
//        where TConcatSecondEnumerable : struct, IStructEnumerable<TOutItem, TConcatSecondEnumerator>
//        where TConcatSecondEnumerator : struct, IStructEnumerator<TOutItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, ConcatEnumerable<TOutItem, TConcatFirstEnumerable, TConcatFirstEnumerator, TConcatSecondEnumerable, TConcatSecondEnumerator>, ConcatEnumerator<TOutItem, TConcatFirstEnumerator, TConcatSecondEnumerator>>(ref source, selector);

//        public static SelectManyCollectionEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, SelectIndexedEnumerable<TSelectInItem, TCollectionItem, TSelectInnerEnumerable, TSelectInnerEnumerator>, SelectIndexedEnumerator<TSelectInItem, TCollectionItem, TSelectInnerEnumerator>> SelectMany<TSelectInItem, TOutItem, TCollectionItem, TSelectInnerEnumerable, TSelectInnerEnumerator>(this RangeEnumerable source, Func<int, SelectIndexedEnumerable<TSelectInItem, TCollectionItem, TSelectInnerEnumerable, TSelectInnerEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TSelectInnerEnumerable : struct, IStructEnumerable<TSelectInItem, TSelectInnerEnumerator>
//        where TSelectInnerEnumerator : struct, IStructEnumerator<TSelectInItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, SelectIndexedEnumerable<TSelectInItem, TCollectionItem, TSelectInnerEnumerable, TSelectInnerEnumerator>, SelectIndexedEnumerator<TSelectInItem, TCollectionItem, TSelectInnerEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, SelectEnumerable<TSelectInItem, TCollectionItem, TSelectInnerEnumerable, TSelectInnerEnumerator>, SelectEnumerator<TSelectInItem, TCollectionItem, TSelectInnerEnumerator>> SelectMany<TSelectInItem, TOutItem, TCollectionItem, TSelectInnerEnumerable, TSelectInnerEnumerator>(this RangeEnumerable source, Func<int, SelectEnumerable<TSelectInItem, TCollectionItem, TSelectInnerEnumerable, TSelectInnerEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TSelectInnerEnumerable : struct, IStructEnumerable<TSelectInItem, TSelectInnerEnumerator>
//        where TSelectInnerEnumerator : struct, IStructEnumerator<TSelectInItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, SelectEnumerable<TSelectInItem, TCollectionItem, TSelectInnerEnumerable, TSelectInnerEnumerator>, SelectEnumerator<TSelectInItem, TCollectionItem, TSelectInnerEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, OrderByEnumerable<TCollectionItem, TSelectMany_OrderByKey, TSelectMany_OrderByInnerEnumerable, TSelectMany_OrderByInnerEnumerator, TSelectMany_OrderByComparer>, OrderByEnumerator<TCollectionItem, TSelectMany_OrderByKey, TSelectMany_OrderByInnerEnumerator, TSelectMany_OrderByComparer>> SelectMany<TOutItem, TCollectionItem, TSelectMany_OrderByKey, TSelectMany_OrderByInnerEnumerable, TSelectMany_OrderByInnerEnumerator, TSelectMany_OrderByComparer>(this RangeEnumerable source, Func<int, OrderByEnumerable<TCollectionItem, TSelectMany_OrderByKey, TSelectMany_OrderByInnerEnumerable, TSelectMany_OrderByInnerEnumerator, TSelectMany_OrderByComparer>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TSelectMany_OrderByInnerEnumerable : struct, IStructEnumerable<TCollectionItem, TSelectMany_OrderByInnerEnumerator>
//        where TSelectMany_OrderByInnerEnumerator : struct, IStructEnumerator<TCollectionItem>
//        where TSelectMany_OrderByComparer : struct, IStructComparer<TCollectionItem, TSelectMany_OrderByKey>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, OrderByEnumerable<TCollectionItem, TSelectMany_OrderByKey, TSelectMany_OrderByInnerEnumerable, TSelectMany_OrderByInnerEnumerator, TSelectMany_OrderByComparer>, OrderByEnumerator<TCollectionItem, TSelectMany_OrderByKey, TSelectMany_OrderByInnerEnumerator, TSelectMany_OrderByComparer>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, WhereWhereEnumerable<TCollectionItem, TSelectMany_WhereInnerEnumerable, TSelectMany_WhereInnerEnumerator, TSelectMany_WherePredicate>, WhereWhereEnumerator<TCollectionItem, TSelectMany_WhereInnerEnumerator, TSelectMany_WherePredicate>> SelectMany<TCollectionItem, TOutItem, TSelectMany_WhereInnerEnumerable, TSelectMany_WhereInnerEnumerator, TSelectMany_WherePredicate>(this RangeEnumerable source, Func<int, WhereWhereEnumerable<TCollectionItem, TSelectMany_WhereInnerEnumerable, TSelectMany_WhereInnerEnumerator, TSelectMany_WherePredicate>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TSelectMany_WhereInnerEnumerable : struct, IStructEnumerable<TCollectionItem, TSelectMany_WhereInnerEnumerator>
//        where TSelectMany_WhereInnerEnumerator : struct, IStructEnumerator<TCollectionItem>
//        where TSelectMany_WherePredicate : struct, IStructPredicate<TCollectionItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, WhereWhereEnumerable<TCollectionItem, TSelectMany_WhereInnerEnumerable, TSelectMany_WhereInnerEnumerator, TSelectMany_WherePredicate>, WhereWhereEnumerator<TCollectionItem, TSelectMany_WhereInnerEnumerator, TSelectMany_WherePredicate>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, OfTypeEnumerable<TOfTypeInItem, TCollectionItem, TOfTypeInnerEnumerable, TOfTypeInnerEnumerator>, OfTypeEnumerator<TOfTypeInItem, TCollectionItem, TOfTypeInnerEnumerator>> SelectMany<TOfTypeInItem, TOutItem, TCollectionItem, TOfTypeInnerEnumerable, TOfTypeInnerEnumerator>(this RangeEnumerable source, Func<int, OfTypeEnumerable<TOfTypeInItem, TCollectionItem, TOfTypeInnerEnumerable, TOfTypeInnerEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TOfTypeInnerEnumerable : struct, IStructEnumerable<TOfTypeInItem, TOfTypeInnerEnumerator>
//        where TOfTypeInnerEnumerator : struct, IStructEnumerator<TOfTypeInItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, OfTypeEnumerable<TOfTypeInItem, TCollectionItem, TOfTypeInnerEnumerable, TOfTypeInnerEnumerator>, OfTypeEnumerator<TOfTypeInItem, TCollectionItem, TOfTypeInnerEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionIndexedEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, OrderByEnumerable<TCollectionItem, TSelectMany_OrderByKey, TSelectMany_OrderByInnerEnumerable, TSelectMany_OrderByInnerEnumerator, TSelectMany_OrderByComparer>, OrderByEnumerator<TCollectionItem, TSelectMany_OrderByKey, TSelectMany_OrderByInnerEnumerator, TSelectMany_OrderByComparer>> SelectMany<TOutItem, TCollectionItem, TSelectMany_OrderByKey, TSelectMany_OrderByInnerEnumerable, TSelectMany_OrderByInnerEnumerator, TSelectMany_OrderByComparer>(this RangeEnumerable source, Func<int, int, OrderByEnumerable<TCollectionItem, TSelectMany_OrderByKey, TSelectMany_OrderByInnerEnumerable, TSelectMany_OrderByInnerEnumerator, TSelectMany_OrderByComparer>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TSelectMany_OrderByInnerEnumerable : struct, IStructEnumerable<TCollectionItem, TSelectMany_OrderByInnerEnumerator>
//        where TSelectMany_OrderByInnerEnumerator : struct, IStructEnumerator<TCollectionItem>
//        where TSelectMany_OrderByComparer : struct, IStructComparer<TCollectionItem, TSelectMany_OrderByKey>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, OrderByEnumerable<TCollectionItem, TSelectMany_OrderByKey, TSelectMany_OrderByInnerEnumerable, TSelectMany_OrderByInnerEnumerator, TSelectMany_OrderByComparer>, OrderByEnumerator<TCollectionItem, TSelectMany_OrderByKey, TSelectMany_OrderByInnerEnumerator, TSelectMany_OrderByComparer>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionIndexedEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, WhereWhereEnumerable<TCollectionItem, TSelectMany_WhereInnerEnumerable, TSelectMany_WhereInnerEnumerator, TSelectMany_WherePredicate>, WhereWhereEnumerator<TCollectionItem, TSelectMany_WhereInnerEnumerator, TSelectMany_WherePredicate>> SelectMany<TCollectionItem, TOutItem, TSelectMany_WhereInnerEnumerable, TSelectMany_WhereInnerEnumerator, TSelectMany_WherePredicate>(this RangeEnumerable source, Func<int, int, WhereWhereEnumerable<TCollectionItem, TSelectMany_WhereInnerEnumerable, TSelectMany_WhereInnerEnumerator, TSelectMany_WherePredicate>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TSelectMany_WhereInnerEnumerable : struct, IStructEnumerable<TCollectionItem, TSelectMany_WhereInnerEnumerator>
//        where TSelectMany_WhereInnerEnumerator : struct, IStructEnumerator<TCollectionItem>
//        where TSelectMany_WherePredicate : struct, IStructPredicate<TCollectionItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, WhereWhereEnumerable<TCollectionItem, TSelectMany_WhereInnerEnumerable, TSelectMany_WhereInnerEnumerator, TSelectMany_WherePredicate>, WhereWhereEnumerator<TCollectionItem, TSelectMany_WhereInnerEnumerator, TSelectMany_WherePredicate>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionIndexedEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, SelectEnumerable<TSelectInItem, TCollectionItem, TSelectInnerEnumerable, TSelectInnerEnumerator>, SelectEnumerator<TSelectInItem, TCollectionItem, TSelectInnerEnumerator>> SelectMany<TSelectInItem, TOutItem, TCollectionItem, TSelectInnerEnumerable, TSelectInnerEnumerator>(this RangeEnumerable source, Func<int, int, SelectEnumerable<TSelectInItem, TCollectionItem, TSelectInnerEnumerable, TSelectInnerEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TSelectInnerEnumerable : struct, IStructEnumerable<TSelectInItem, TSelectInnerEnumerator>
//        where TSelectInnerEnumerator : struct, IStructEnumerator<TSelectInItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, SelectEnumerable<TSelectInItem, TCollectionItem, TSelectInnerEnumerable, TSelectInnerEnumerator>, SelectEnumerator<TSelectInItem, TCollectionItem, TSelectInnerEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionIndexedEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, SelectIndexedEnumerable<TSelectInItem, TCollectionItem, TSelectInnerEnumerable, TSelectInnerEnumerator>, SelectIndexedEnumerator<TSelectInItem, TCollectionItem, TSelectInnerEnumerator>> SelectMany<TSelectInItem, TOutItem, TCollectionItem, TSelectInnerEnumerable, TSelectInnerEnumerator>(this RangeEnumerable source, Func<int, int, SelectIndexedEnumerable<TSelectInItem, TCollectionItem, TSelectInnerEnumerable, TSelectInnerEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TSelectInnerEnumerable : struct, IStructEnumerable<TSelectInItem, TSelectInnerEnumerator>
//        where TSelectInnerEnumerator : struct, IStructEnumerator<TSelectInItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, SelectIndexedEnumerable<TSelectInItem, TCollectionItem, TSelectInnerEnumerable, TSelectInnerEnumerator>, SelectIndexedEnumerator<TSelectInItem, TCollectionItem, TSelectInnerEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionIndexedEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, CastEnumerable<TCastInItem, TCollectionItem, TCastInnerEnumerable, TCastInnerEnumerator>, CastEnumerator<TCastInItem, TCollectionItem, TCastInnerEnumerator>> SelectMany<TCastInItem, TOutItem, TCollectionItem, TCastInnerEnumerable, TCastInnerEnumerator>(this RangeEnumerable source, Func<int, int, CastEnumerable<TCastInItem, TCollectionItem, TCastInnerEnumerable, TCastInnerEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TCastInnerEnumerable : struct, IStructEnumerable<TCastInItem, TCastInnerEnumerator>
//        where TCastInnerEnumerator : struct, IStructEnumerator<TCastInItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, CastEnumerable<TCastInItem, TCollectionItem, TCastInnerEnumerable, TCastInnerEnumerator>, CastEnumerator<TCastInItem, TCollectionItem, TCastInnerEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionIndexedEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, OfTypeEnumerable<TOfTypeInItem, TCollectionItem, TOfTypeInnerEnumerable, TOfTypeInnerEnumerator>, OfTypeEnumerator<TOfTypeInItem, TCollectionItem, TOfTypeInnerEnumerator>> SelectMany<TOfTypeInItem, TOutItem, TCollectionItem, TOfTypeInnerEnumerable, TOfTypeInnerEnumerator>(this RangeEnumerable source, Func<int, int, OfTypeEnumerable<TOfTypeInItem, TCollectionItem, TOfTypeInnerEnumerable, TOfTypeInnerEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TOfTypeInnerEnumerable : struct, IStructEnumerable<TOfTypeInItem, TOfTypeInnerEnumerator>
//        where TOfTypeInnerEnumerator : struct, IStructEnumerator<TOfTypeInItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, OfTypeEnumerable<TOfTypeInItem, TCollectionItem, TOfTypeInnerEnumerable, TOfTypeInnerEnumerator>, OfTypeEnumerator<TOfTypeInItem, TCollectionItem, TOfTypeInnerEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, CastEnumerable<TCastInItem, TCollectionItem, TCastInnerEnumerable, TCastInnerEnumerator>, CastEnumerator<TCastInItem, TCollectionItem, TCastInnerEnumerator>> SelectMany<TCastInItem, TOutItem, TCollectionItem, TCastInnerEnumerable, TCastInnerEnumerator>(this RangeEnumerable source, Func<int, CastEnumerable<TCastInItem, TCollectionItem, TCastInnerEnumerable, TCastInnerEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TCastInnerEnumerable : struct, IStructEnumerable<TCastInItem, TCastInnerEnumerator>
//        where TCastInnerEnumerator : struct, IStructEnumerator<TCastInItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, CastEnumerable<TCastInItem, TCollectionItem, TCastInnerEnumerable, TCastInnerEnumerator>, CastEnumerator<TCastInItem, TCollectionItem, TCastInnerEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, SelectManyIndexedEnumerable<TSelectInItem, TOutItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyInnerProjectedEnumerable, TSelectManyInnerProjectedEnumerator>, SelectManyIndexedEnumerator<TSelectInItem, TOutItem, TSelectManyInnerEnumerator, TSelectManyInnerProjectedEnumerable, TSelectManyInnerProjectedEnumerator>> SelectMany<TSelectInItem, TOutItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyInnerProjectedEnumerable, TSelectManyInnerProjectedEnumerator>(this RangeEnumerable source, Func<int, SelectManyIndexedEnumerable<TSelectInItem, TOutItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyInnerProjectedEnumerable, TSelectManyInnerProjectedEnumerator>> selector)
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectInItem>
//        where TSelectManyInnerProjectedEnumerable : struct, IStructEnumerable<TOutItem, TSelectManyInnerProjectedEnumerator>
//        where TSelectManyInnerProjectedEnumerator : struct, IStructEnumerator<TOutItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, SelectManyIndexedEnumerable<TSelectInItem, TOutItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyInnerProjectedEnumerable, TSelectManyInnerProjectedEnumerator>, SelectManyIndexedEnumerator<TSelectInItem, TOutItem, TSelectManyInnerEnumerator, TSelectManyInnerProjectedEnumerable, TSelectManyInnerProjectedEnumerator>>(ref source, selector);

//        public static SelectManyEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, SelectManyEnumerable<TSelectInItem, TOutItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyInnerProjectedEnumerable, TSelectManyInnerProjectedEnumerator>, SelectManyEnumerator<TSelectInItem, TOutItem, TSelectManyInnerEnumerator, TSelectManyInnerProjectedEnumerable, TSelectManyInnerProjectedEnumerator>> SelectMany<TSelectInItem, TOutItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyInnerProjectedEnumerable, TSelectManyInnerProjectedEnumerator>(this RangeEnumerable source, Func<int, SelectManyEnumerable<TSelectInItem, TOutItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyInnerProjectedEnumerable, TSelectManyInnerProjectedEnumerator>> selector)
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectInItem>
//        where TSelectManyInnerProjectedEnumerable : struct, IStructEnumerable<TOutItem, TSelectManyInnerProjectedEnumerator>
//        where TSelectManyInnerProjectedEnumerator : struct, IStructEnumerator<TOutItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, SelectManyEnumerable<TSelectInItem, TOutItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyInnerProjectedEnumerable, TSelectManyInnerProjectedEnumerator>, SelectManyEnumerator<TSelectInItem, TOutItem, TSelectManyInnerEnumerator, TSelectManyInnerProjectedEnumerable, TSelectManyInnerProjectedEnumerator>>(ref source, selector);

//        public static SelectManyEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, SelectManyIndexedBridgeEnumerable<TSelectInItem, TOutItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyIndexedBridgeEnumerator<TSelectInItem, TOutItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>> SelectMany<TSelectInItem, TOutItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>(this RangeEnumerable source, Func<int, SelectManyIndexedBridgeEnumerable<TSelectInItem, TOutItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>> selector)
//        where TSelectManyBridgeType : class
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectInItem>
//        where TSelectManyProjectedEnumerator : struct, IStructEnumerator<TOutItem>
//        where TSelectManyBridger : struct, IStructBridger<TOutItem, TSelectManyBridgeType, TSelectManyProjectedEnumerator>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, SelectManyIndexedBridgeEnumerable<TSelectInItem, TOutItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyIndexedBridgeEnumerator<TSelectInItem, TOutItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>>(ref source, selector);

//        public static SelectManyEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, SelectWhereEnumerable<TOutItem, TSelectMany_SelectInnerItem, TSelectMany_SelectInnerEnumerable, TSelectMany_SelectInnerEnumerator, TSelectMany_SelectProjection, TSelectMany_SelectPredicate>, SelectWhereEnumerator<TOutItem, TSelectMany_SelectInnerItem, TSelectMany_SelectInnerEnumerator, TSelectMany_SelectProjection, TSelectMany_SelectPredicate>> SelectMany<TSelectMany_SelectInnerItem, TOutItem, TSelectMany_SelectInnerEnumerable, TSelectMany_SelectInnerEnumerator, TSelectMany_SelectProjection, TSelectMany_SelectPredicate>(this RangeEnumerable source, Func<int, SelectWhereEnumerable<TOutItem, TSelectMany_SelectInnerItem, TSelectMany_SelectInnerEnumerable, TSelectMany_SelectInnerEnumerator, TSelectMany_SelectProjection, TSelectMany_SelectPredicate>> selector)
//        where TSelectMany_SelectInnerEnumerable : struct, IStructEnumerable<TSelectMany_SelectInnerItem, TSelectMany_SelectInnerEnumerator>
//        where TSelectMany_SelectInnerEnumerator : struct, IStructEnumerator<TSelectMany_SelectInnerItem>
//        where TSelectMany_SelectProjection : struct, IStructProjection<TOutItem, TSelectMany_SelectInnerItem>
//        where TSelectMany_SelectPredicate : struct, IStructPredicate<TOutItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, SelectWhereEnumerable<TOutItem, TSelectMany_SelectInnerItem, TSelectMany_SelectInnerEnumerable, TSelectMany_SelectInnerEnumerator, TSelectMany_SelectProjection, TSelectMany_SelectPredicate>, SelectWhereEnumerator<TOutItem, TSelectMany_SelectInnerItem, TSelectMany_SelectInnerEnumerator, TSelectMany_SelectProjection, TSelectMany_SelectPredicate>>(ref source, selector);

//        public static SelectManyEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, GroupByCollectionDefaultEnumerable<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TOutItem, TSelectMany_GroupByEnumerable, TSelectMany_GroupByEnumerator>, GroupByCollectionDefaultEnumerator<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TOutItem, TSelectMany_GroupByEnumerator>> SelectMany<TOutItem, TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TSelectMany_GroupByEnumerable, TSelectMany_GroupByEnumerator>(this RangeEnumerable source, Func<int, GroupByCollectionDefaultEnumerable<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TOutItem, TSelectMany_GroupByEnumerable, TSelectMany_GroupByEnumerator>> selector)
//        where TSelectMany_GroupByEnumerable : struct, IStructEnumerable<TSelectMany_GroupByInItem, TSelectMany_GroupByEnumerator>
//        where TSelectMany_GroupByEnumerator : struct, IStructEnumerator<TSelectMany_GroupByInItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, GroupByCollectionDefaultEnumerable<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TOutItem, TSelectMany_GroupByEnumerable, TSelectMany_GroupByEnumerator>, GroupByCollectionDefaultEnumerator<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TOutItem, TSelectMany_GroupByEnumerator>>(ref source, selector);

//        public static SelectManyIndexedEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, SelectWhereEnumerable<TOutItem, TSelectMany_SelectInnerItem, TSelectMany_SelectInnerEnumerable, TSelectMany_SelectInnerEnumerator, TSelectMany_SelectProjection, TSelectMany_SelectPredicate>, SelectWhereEnumerator<TOutItem, TSelectMany_SelectInnerItem, TSelectMany_SelectInnerEnumerator, TSelectMany_SelectProjection, TSelectMany_SelectPredicate>> SelectMany<TSelectMany_SelectInnerItem, TOutItem, TSelectMany_SelectInnerEnumerable, TSelectMany_SelectInnerEnumerator, TSelectMany_SelectProjection, TSelectMany_SelectPredicate>(this RangeEnumerable source, Func<int, int, SelectWhereEnumerable<TOutItem, TSelectMany_SelectInnerItem, TSelectMany_SelectInnerEnumerable, TSelectMany_SelectInnerEnumerator, TSelectMany_SelectProjection, TSelectMany_SelectPredicate>> selector)
//        where TSelectMany_SelectInnerEnumerable : struct, IStructEnumerable<TSelectMany_SelectInnerItem, TSelectMany_SelectInnerEnumerator>
//        where TSelectMany_SelectInnerEnumerator : struct, IStructEnumerator<TSelectMany_SelectInnerItem>
//        where TSelectMany_SelectProjection : struct, IStructProjection<TOutItem, TSelectMany_SelectInnerItem>
//        where TSelectMany_SelectPredicate : struct, IStructPredicate<TOutItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, SelectWhereEnumerable<TOutItem, TSelectMany_SelectInnerItem, TSelectMany_SelectInnerEnumerable, TSelectMany_SelectInnerEnumerator, TSelectMany_SelectProjection, TSelectMany_SelectPredicate>, SelectWhereEnumerator<TOutItem, TSelectMany_SelectInnerItem, TSelectMany_SelectInnerEnumerator, TSelectMany_SelectProjection, TSelectMany_SelectPredicate>>(ref source, selector);

//        public static SelectManyIndexedEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, SelectManyBridgeEnumerable<TSelectInItem, TOutItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyBridgeEnumerator<TSelectInItem, TOutItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>> SelectMany<TSelectInItem, TOutItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>(this RangeEnumerable source, Func<int, int, SelectManyBridgeEnumerable<TSelectInItem, TOutItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>> selector)
//        where TSelectManyBridgeType : class
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectInItem>
//        where TSelectManyProjectedEnumerator : struct, IStructEnumerator<TOutItem>
//        where TSelectManyBridger : struct, IStructBridger<TOutItem, TSelectManyBridgeType, TSelectManyProjectedEnumerator>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, SelectManyBridgeEnumerable<TSelectInItem, TOutItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyBridgeEnumerator<TSelectInItem, TOutItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>>(ref source, selector);

//        public static SelectManyIndexedEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, SelectManyIndexedBridgeEnumerable<TSelectInItem, TOutItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyIndexedBridgeEnumerator<TSelectInItem, TOutItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>> SelectMany<TSelectInItem, TOutItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>(this RangeEnumerable source, Func<int, int, SelectManyIndexedBridgeEnumerable<TSelectInItem, TOutItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>> selector)
//        where TSelectManyBridgeType : class
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectInItem>
//        where TSelectManyProjectedEnumerator : struct, IStructEnumerator<TOutItem>
//        where TSelectManyBridger : struct, IStructBridger<TOutItem, TSelectManyBridgeType, TSelectManyProjectedEnumerator>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, SelectManyIndexedBridgeEnumerable<TSelectInItem, TOutItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyIndexedBridgeEnumerator<TSelectInItem, TOutItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>>(ref source, selector);

//        public static SelectManyIndexedEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, SelectManyEnumerable<TSelectInItem, TOutItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyInnerProjectedEnumerable, TSelectManyInnerProjectedEnumerator>, SelectManyEnumerator<TSelectInItem, TOutItem, TSelectManyInnerEnumerator, TSelectManyInnerProjectedEnumerable, TSelectManyInnerProjectedEnumerator>> SelectMany<TSelectInItem, TOutItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyInnerProjectedEnumerable, TSelectManyInnerProjectedEnumerator>(this RangeEnumerable source, Func<int, int, SelectManyEnumerable<TSelectInItem, TOutItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyInnerProjectedEnumerable, TSelectManyInnerProjectedEnumerator>> selector)
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectInItem>
//        where TSelectManyInnerProjectedEnumerable : struct, IStructEnumerable<TOutItem, TSelectManyInnerProjectedEnumerator>
//        where TSelectManyInnerProjectedEnumerator : struct, IStructEnumerator<TOutItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, SelectManyEnumerable<TSelectInItem, TOutItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyInnerProjectedEnumerable, TSelectManyInnerProjectedEnumerator>, SelectManyEnumerator<TSelectInItem, TOutItem, TSelectManyInnerEnumerator, TSelectManyInnerProjectedEnumerable, TSelectManyInnerProjectedEnumerator>>(ref source, selector);

//        public static SelectManyIndexedEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, SelectManyIndexedEnumerable<TSelectInItem, TOutItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyInnerProjectedEnumerable, TSelectManyInnerProjectedEnumerator>, SelectManyIndexedEnumerator<TSelectInItem, TOutItem, TSelectManyInnerEnumerator, TSelectManyInnerProjectedEnumerable, TSelectManyInnerProjectedEnumerator>> SelectMany<TSelectInItem, TOutItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyInnerProjectedEnumerable, TSelectManyInnerProjectedEnumerator>(this RangeEnumerable source, Func<int, int, SelectManyIndexedEnumerable<TSelectInItem, TOutItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyInnerProjectedEnumerable, TSelectManyInnerProjectedEnumerator>> selector)
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectInItem>
//        where TSelectManyInnerProjectedEnumerable : struct, IStructEnumerable<TOutItem, TSelectManyInnerProjectedEnumerator>
//        where TSelectManyInnerProjectedEnumerator : struct, IStructEnumerator<TOutItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, SelectManyIndexedEnumerable<TSelectInItem, TOutItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyInnerProjectedEnumerable, TSelectManyInnerProjectedEnumerator>, SelectManyIndexedEnumerator<TSelectInItem, TOutItem, TSelectManyInnerEnumerator, TSelectManyInnerProjectedEnumerable, TSelectManyInnerProjectedEnumerator>>(ref source, selector);

//        public static SelectManyEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, GroupByCollectionSpecificEnumerable<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TOutItem, TSelectMany_GroupByEnumerable, TSelectMany_GroupByEnumerator>, GroupByCollectionSpecificEnumerator<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TOutItem, TSelectMany_GroupByEnumerator>> SelectMany<TOutItem, TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TSelectMany_GroupByEnumerable, TSelectMany_GroupByEnumerator>(this RangeEnumerable source, Func<int, GroupByCollectionSpecificEnumerable<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TOutItem, TSelectMany_GroupByEnumerable, TSelectMany_GroupByEnumerator>> selector)
//        where TSelectMany_GroupByEnumerable : struct, IStructEnumerable<TSelectMany_GroupByInItem, TSelectMany_GroupByEnumerator>
//        where TSelectMany_GroupByEnumerator : struct, IStructEnumerator<TSelectMany_GroupByInItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, GroupByCollectionSpecificEnumerable<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TOutItem, TSelectMany_GroupByEnumerable, TSelectMany_GroupByEnumerator>, GroupByCollectionSpecificEnumerator<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TOutItem, TSelectMany_GroupByEnumerator>>(ref source, selector);

//        public static SelectManyEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, WhereSelectEnumerable<TOutItem, TSelectMany_WhereInnerItem, TSelectMany_WhereInnerEnumerable, TSelectMany_WhereInnerEnumerator, TSelectMany_WherePredicate, TSelectMany_WhereProjection>, WhereSelectEnumerator<TOutItem, TSelectMany_WhereInnerItem, TSelectMany_WhereInnerEnumerator, TSelectMany_WherePredicate, TSelectMany_WhereProjection>> SelectMany<TSelectMany_WhereInnerItem, TOutItem, TSelectMany_WhereInnerEnumerable, TSelectMany_WhereInnerEnumerator, TSelectMany_WherePredicate, TSelectMany_WhereProjection>(this RangeEnumerable source, Func<int, WhereSelectEnumerable<TOutItem, TSelectMany_WhereInnerItem, TSelectMany_WhereInnerEnumerable, TSelectMany_WhereInnerEnumerator, TSelectMany_WherePredicate, TSelectMany_WhereProjection>> selector)
//        where TSelectMany_WhereInnerEnumerable : struct, IStructEnumerable<TSelectMany_WhereInnerItem, TSelectMany_WhereInnerEnumerator>
//        where TSelectMany_WhereInnerEnumerator : struct, IStructEnumerator<TSelectMany_WhereInnerItem>
//        where TSelectMany_WherePredicate : struct, IStructPredicate<TSelectMany_WhereInnerItem>
//        where TSelectMany_WhereProjection : struct, IStructProjection<TOutItem, TSelectMany_WhereInnerItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, WhereSelectEnumerable<TOutItem, TSelectMany_WhereInnerItem, TSelectMany_WhereInnerEnumerable, TSelectMany_WhereInnerEnumerator, TSelectMany_WherePredicate, TSelectMany_WhereProjection>, WhereSelectEnumerator<TOutItem, TSelectMany_WhereInnerItem, TSelectMany_WhereInnerEnumerator, TSelectMany_WherePredicate, TSelectMany_WhereProjection>>(ref source, selector);

//        public static SelectManyIndexedEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, GroupByCollectionDefaultEnumerable<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TOutItem, TSelectMany_GroupByEnumerable, TSelectMany_GroupByEnumerator>, GroupByCollectionDefaultEnumerator<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TOutItem, TSelectMany_GroupByEnumerator>> SelectMany<TOutItem, TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TSelectMany_GroupByEnumerable, TSelectMany_GroupByEnumerator>(this RangeEnumerable source, Func<int, int, GroupByCollectionDefaultEnumerable<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TOutItem, TSelectMany_GroupByEnumerable, TSelectMany_GroupByEnumerator>> selector)
//        where TSelectMany_GroupByEnumerable : struct, IStructEnumerable<TSelectMany_GroupByInItem, TSelectMany_GroupByEnumerator>
//        where TSelectMany_GroupByEnumerator : struct, IStructEnumerator<TSelectMany_GroupByInItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, GroupByCollectionDefaultEnumerable<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TOutItem, TSelectMany_GroupByEnumerable, TSelectMany_GroupByEnumerator>, GroupByCollectionDefaultEnumerator<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TOutItem, TSelectMany_GroupByEnumerator>>(ref source, selector);

//        public static SelectManyIndexedEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, GroupByCollectionSpecificEnumerable<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TOutItem, TSelectMany_GroupByEnumerable, TSelectMany_GroupByEnumerator>, GroupByCollectionSpecificEnumerator<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TOutItem, TSelectMany_GroupByEnumerator>> SelectMany<TOutItem, TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TSelectMany_GroupByEnumerable, TSelectMany_GroupByEnumerator>(this RangeEnumerable source, Func<int, int, GroupByCollectionSpecificEnumerable<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TOutItem, TSelectMany_GroupByEnumerable, TSelectMany_GroupByEnumerator>> selector)
//        where TSelectMany_GroupByEnumerable : struct, IStructEnumerable<TSelectMany_GroupByInItem, TSelectMany_GroupByEnumerator>
//        where TSelectMany_GroupByEnumerator : struct, IStructEnumerator<TSelectMany_GroupByInItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, GroupByCollectionSpecificEnumerable<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TOutItem, TSelectMany_GroupByEnumerable, TSelectMany_GroupByEnumerator>, GroupByCollectionSpecificEnumerator<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TOutItem, TSelectMany_GroupByEnumerator>>(ref source, selector);

//        public static SelectManyIndexedEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, WhereSelectEnumerable<TOutItem, TSelectMany_WhereInnerItem, TSelectMany_WhereInnerEnumerable, TSelectMany_WhereInnerEnumerator, TSelectMany_WherePredicate, TSelectMany_WhereProjection>, WhereSelectEnumerator<TOutItem, TSelectMany_WhereInnerItem, TSelectMany_WhereInnerEnumerator, TSelectMany_WherePredicate, TSelectMany_WhereProjection>> SelectMany<TSelectMany_WhereInnerItem, TOutItem, TSelectMany_WhereInnerEnumerable, TSelectMany_WhereInnerEnumerator, TSelectMany_WherePredicate, TSelectMany_WhereProjection>(this RangeEnumerable source, Func<int, int, WhereSelectEnumerable<TOutItem, TSelectMany_WhereInnerItem, TSelectMany_WhereInnerEnumerable, TSelectMany_WhereInnerEnumerator, TSelectMany_WherePredicate, TSelectMany_WhereProjection>> selector)
//        where TSelectMany_WhereInnerEnumerable : struct, IStructEnumerable<TSelectMany_WhereInnerItem, TSelectMany_WhereInnerEnumerator>
//        where TSelectMany_WhereInnerEnumerator : struct, IStructEnumerator<TSelectMany_WhereInnerItem>
//        where TSelectMany_WherePredicate : struct, IStructPredicate<TSelectMany_WhereInnerItem>
//        where TSelectMany_WhereProjection : struct, IStructProjection<TOutItem, TSelectMany_WhereInnerItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, WhereSelectEnumerable<TOutItem, TSelectMany_WhereInnerItem, TSelectMany_WhereInnerEnumerable, TSelectMany_WhereInnerEnumerator, TSelectMany_WherePredicate, TSelectMany_WhereProjection>, WhereSelectEnumerator<TOutItem, TSelectMany_WhereInnerItem, TSelectMany_WhereInnerEnumerator, TSelectMany_WherePredicate, TSelectMany_WhereProjection>>(ref source, selector);

//        public static SelectManyEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, SelectManyBridgeEnumerable<TSelectInItem, TOutItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyBridgeEnumerator<TSelectInItem, TOutItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>> SelectMany<TSelectInItem, TOutItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>(this RangeEnumerable source, Func<int, SelectManyBridgeEnumerable<TSelectInItem, TOutItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>> selector)
//        where TSelectManyBridgeType : class
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectInItem>
//        where TSelectManyProjectedEnumerator : struct, IStructEnumerator<TOutItem>
//        where TSelectManyBridger : struct, IStructBridger<TOutItem, TSelectManyBridgeType, TSelectManyProjectedEnumerator>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, SelectManyBridgeEnumerable<TSelectInItem, TOutItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyBridgeEnumerator<TSelectInItem, TOutItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>>(ref source, selector);

//        public static SelectManyCollectionIndexedEnumerable<int, TOutItem, GroupingEnumerable<TSelectMany_GroupByKey, TSelectMany_GroupByElement>, RangeEnumerable, RangeEnumerator, GroupBySpecificEnumerable<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TSelectMany_GroupByEnumerable, TSelectMany_GroupByEnumerator>, GroupBySpecificEnumerator<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TSelectMany_GroupByEnumerator>> SelectMany<TOutItem, TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TSelectMany_GroupByEnumerable, TSelectMany_GroupByEnumerator>(this RangeEnumerable source, Func<int, int, GroupBySpecificEnumerable<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TSelectMany_GroupByEnumerable, TSelectMany_GroupByEnumerator>> collectionSelector, Func<int, GroupingEnumerable<TSelectMany_GroupByKey, TSelectMany_GroupByElement>, TOutItem> resultSelector)
//        where TSelectMany_GroupByEnumerable : struct, IStructEnumerable<TSelectMany_GroupByInItem, TSelectMany_GroupByEnumerator>
//        where TSelectMany_GroupByEnumerator : struct, IStructEnumerator<TSelectMany_GroupByInItem>
//        => CommonImplementation.SelectMany<int, TOutItem, GroupingEnumerable<TSelectMany_GroupByKey, TSelectMany_GroupByElement>, RangeEnumerable, RangeEnumerator, GroupBySpecificEnumerable<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TSelectMany_GroupByEnumerable, TSelectMany_GroupByEnumerator>, GroupBySpecificEnumerator<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TSelectMany_GroupByEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, UnionSpecificEnumerable<TCollectionItem, TSelectMany_UnionFirstEnumerable, TSelectMany_UnionFirstEnumerator, TSelectMany_UnionSecondEnumerable, TSelectMany_UnionSecondEnumerator>, UnionSpecificEnumerator<TCollectionItem, TSelectMany_UnionFirstEnumerator, TSelectMany_UnionSecondEnumerator>> SelectMany<TCollectionItem, TOutItem, TSelectMany_UnionFirstEnumerable, TSelectMany_UnionFirstEnumerator, TSelectMany_UnionSecondEnumerable, TSelectMany_UnionSecondEnumerator>(this RangeEnumerable source, Func<int, UnionSpecificEnumerable<TCollectionItem, TSelectMany_UnionFirstEnumerable, TSelectMany_UnionFirstEnumerator, TSelectMany_UnionSecondEnumerable, TSelectMany_UnionSecondEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TSelectMany_UnionFirstEnumerable : struct, IStructEnumerable<TCollectionItem, TSelectMany_UnionFirstEnumerator>
//        where TSelectMany_UnionFirstEnumerator : struct, IStructEnumerator<TCollectionItem>
//        where TSelectMany_UnionSecondEnumerable : struct, IStructEnumerable<TCollectionItem, TSelectMany_UnionSecondEnumerator>
//        where TSelectMany_UnionSecondEnumerator : struct, IStructEnumerator<TCollectionItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, UnionSpecificEnumerable<TCollectionItem, TSelectMany_UnionFirstEnumerable, TSelectMany_UnionFirstEnumerator, TSelectMany_UnionSecondEnumerable, TSelectMany_UnionSecondEnumerator>, UnionSpecificEnumerator<TCollectionItem, TSelectMany_UnionFirstEnumerator, TSelectMany_UnionSecondEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionEnumerable<int, TOutItem, GroupingEnumerable<TSelectMany_GroupByKey, TSelectMany_GroupByElement>, RangeEnumerable, RangeEnumerator, GroupByDefaultEnumerable<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TSelectMany_GroupByEnumerable, TSelectMany_GroupByEnumerator>, GroupByDefaultEnumerator<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TSelectMany_GroupByEnumerator>> SelectMany<TOutItem, TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TSelectMany_GroupByEnumerable, TSelectMany_GroupByEnumerator>(this RangeEnumerable source, Func<int, GroupByDefaultEnumerable<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TSelectMany_GroupByEnumerable, TSelectMany_GroupByEnumerator>> collectionSelector, Func<int, GroupingEnumerable<TSelectMany_GroupByKey, TSelectMany_GroupByElement>, TOutItem> resultSelector)
//        where TSelectMany_GroupByEnumerable : struct, IStructEnumerable<TSelectMany_GroupByInItem, TSelectMany_GroupByEnumerator>
//        where TSelectMany_GroupByEnumerator : struct, IStructEnumerator<TSelectMany_GroupByInItem>
//        => CommonImplementation.SelectMany<int, TOutItem, GroupingEnumerable<TSelectMany_GroupByKey, TSelectMany_GroupByElement>, RangeEnumerable, RangeEnumerator, GroupByDefaultEnumerable<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TSelectMany_GroupByEnumerable, TSelectMany_GroupByEnumerator>, GroupByDefaultEnumerator<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TSelectMany_GroupByEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionEnumerable<int, TOutItem, GroupingEnumerable<TSelectMany_GroupByKey, TSelectMany_GroupByElement>, RangeEnumerable, RangeEnumerator, GroupBySpecificEnumerable<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TSelectMany_GroupByEnumerable, TSelectMany_GroupByEnumerator>, GroupBySpecificEnumerator<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TSelectMany_GroupByEnumerator>> SelectMany<TOutItem, TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TSelectMany_GroupByEnumerable, TSelectMany_GroupByEnumerator>(this RangeEnumerable source, Func<int, GroupBySpecificEnumerable<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TSelectMany_GroupByEnumerable, TSelectMany_GroupByEnumerator>> collectionSelector, Func<int, GroupingEnumerable<TSelectMany_GroupByKey, TSelectMany_GroupByElement>, TOutItem> resultSelector)
//        where TSelectMany_GroupByEnumerable : struct, IStructEnumerable<TSelectMany_GroupByInItem, TSelectMany_GroupByEnumerator>
//        where TSelectMany_GroupByEnumerator : struct, IStructEnumerator<TSelectMany_GroupByInItem>
//        => CommonImplementation.SelectMany<int, TOutItem, GroupingEnumerable<TSelectMany_GroupByKey, TSelectMany_GroupByElement>, RangeEnumerable, RangeEnumerator, GroupBySpecificEnumerable<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TSelectMany_GroupByEnumerable, TSelectMany_GroupByEnumerator>, GroupBySpecificEnumerator<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TSelectMany_GroupByEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionIndexedEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, ConcatEnumerable<TCollectionItem, TConcatFirstEnumerable, TConcatFirstEnumerator, TConcatSecondEnumerable, TConcatSecondEnumerator>, ConcatEnumerator<TCollectionItem, TConcatFirstEnumerator, TConcatSecondEnumerator>> SelectMany<TOutItem, TCollectionItem, TConcatFirstEnumerable, TConcatFirstEnumerator, TConcatSecondEnumerable, TConcatSecondEnumerator>(this RangeEnumerable source, Func<int, int, ConcatEnumerable<TCollectionItem, TConcatFirstEnumerable, TConcatFirstEnumerator, TConcatSecondEnumerable, TConcatSecondEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TConcatFirstEnumerable : struct, IStructEnumerable<TCollectionItem, TConcatFirstEnumerator>
//        where TConcatFirstEnumerator : struct, IStructEnumerator<TCollectionItem>
//        where TConcatSecondEnumerable : struct, IStructEnumerable<TCollectionItem, TConcatSecondEnumerator>
//        where TConcatSecondEnumerator : struct, IStructEnumerator<TCollectionItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, ConcatEnumerable<TCollectionItem, TConcatFirstEnumerable, TConcatFirstEnumerator, TConcatSecondEnumerable, TConcatSecondEnumerator>, ConcatEnumerator<TCollectionItem, TConcatFirstEnumerator, TConcatSecondEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, SelectSelectEnumerable<TCollectionItem, TSelectMany_SelectInnerItem, TSelectMany_SelectInnerEnumerable, TSelectMany_SelectInnerEnumerator, TSelectMany_SelectProjection>, SelectSelectEnumerator<TCollectionItem, TSelectMany_SelectInnerItem, TSelectMany_SelectInnerEnumerator, TSelectMany_SelectProjection>> SelectMany<TSelectMany_SelectInnerItem, TCollectionItem, TOutItem, TSelectMany_SelectInnerEnumerable, TSelectMany_SelectInnerEnumerator, TSelectMany_SelectProjection>(this RangeEnumerable source, Func<int, SelectSelectEnumerable<TCollectionItem, TSelectMany_SelectInnerItem, TSelectMany_SelectInnerEnumerable, TSelectMany_SelectInnerEnumerator, TSelectMany_SelectProjection>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TSelectMany_SelectInnerEnumerable : struct, IStructEnumerable<TSelectMany_SelectInnerItem, TSelectMany_SelectInnerEnumerator>
//        where TSelectMany_SelectInnerEnumerator : struct, IStructEnumerator<TSelectMany_SelectInnerItem>
//        where TSelectMany_SelectProjection : struct, IStructProjection<TCollectionItem, TSelectMany_SelectInnerItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, SelectSelectEnumerable<TCollectionItem, TSelectMany_SelectInnerItem, TSelectMany_SelectInnerEnumerable, TSelectMany_SelectInnerEnumerator, TSelectMany_SelectProjection>, SelectSelectEnumerator<TCollectionItem, TSelectMany_SelectInnerItem, TSelectMany_SelectInnerEnumerator, TSelectMany_SelectProjection>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, ExceptDefaultEnumerable<TCollectionItem, TSelectMany_ExceptFirstEnumerable, TSelectMany_ExceptionFirstEnumerator, TSelectMany_ExceptSecondEnumerable, TSelectMany_ExceptSecondEnumerator>, ExceptDefaultEnumerator<TCollectionItem, TSelectMany_ExceptionFirstEnumerator, TSelectMany_ExceptSecondEnumerator>> SelectMany<TCollectionItem, TOutItem, TSelectMany_ExceptFirstEnumerable, TSelectMany_ExceptionFirstEnumerator, TSelectMany_ExceptSecondEnumerable, TSelectMany_ExceptSecondEnumerator>(this RangeEnumerable source, Func<int, ExceptDefaultEnumerable<TCollectionItem, TSelectMany_ExceptFirstEnumerable, TSelectMany_ExceptionFirstEnumerator, TSelectMany_ExceptSecondEnumerable, TSelectMany_ExceptSecondEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TSelectMany_ExceptFirstEnumerable : struct, IStructEnumerable<TCollectionItem, TSelectMany_ExceptionFirstEnumerator>
//        where TSelectMany_ExceptionFirstEnumerator : struct, IStructEnumerator<TCollectionItem>
//        where TSelectMany_ExceptSecondEnumerable : struct, IStructEnumerable<TCollectionItem, TSelectMany_ExceptSecondEnumerator>
//        where TSelectMany_ExceptSecondEnumerator : struct, IStructEnumerator<TCollectionItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, ExceptDefaultEnumerable<TCollectionItem, TSelectMany_ExceptFirstEnumerable, TSelectMany_ExceptionFirstEnumerator, TSelectMany_ExceptSecondEnumerable, TSelectMany_ExceptSecondEnumerator>, ExceptDefaultEnumerator<TCollectionItem, TSelectMany_ExceptionFirstEnumerator, TSelectMany_ExceptSecondEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, ExceptSpecificEnumerable<TCollectionItem, TSelectMany_ExceptFirstEnumerable, TSelectMany_ExceptionFirstEnumerator, TSelectMany_ExceptSecondEnumerable, TSelectMany_ExceptSecondEnumerator>, ExceptSpecificEnumerator<TCollectionItem, TSelectMany_ExceptionFirstEnumerator, TSelectMany_ExceptSecondEnumerator>> SelectMany<TCollectionItem, TOutItem, TSelectMany_ExceptFirstEnumerable, TSelectMany_ExceptionFirstEnumerator, TSelectMany_ExceptSecondEnumerable, TSelectMany_ExceptSecondEnumerator>(this RangeEnumerable source, Func<int, ExceptSpecificEnumerable<TCollectionItem, TSelectMany_ExceptFirstEnumerable, TSelectMany_ExceptionFirstEnumerator, TSelectMany_ExceptSecondEnumerable, TSelectMany_ExceptSecondEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TSelectMany_ExceptFirstEnumerable : struct, IStructEnumerable<TCollectionItem, TSelectMany_ExceptionFirstEnumerator>
//        where TSelectMany_ExceptionFirstEnumerator : struct, IStructEnumerator<TCollectionItem>
//        where TSelectMany_ExceptSecondEnumerable : struct, IStructEnumerable<TCollectionItem, TSelectMany_ExceptSecondEnumerator>
//        where TSelectMany_ExceptSecondEnumerator : struct, IStructEnumerator<TCollectionItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, ExceptSpecificEnumerable<TCollectionItem, TSelectMany_ExceptFirstEnumerable, TSelectMany_ExceptionFirstEnumerator, TSelectMany_ExceptSecondEnumerable, TSelectMany_ExceptSecondEnumerator>, ExceptSpecificEnumerator<TCollectionItem, TSelectMany_ExceptionFirstEnumerator, TSelectMany_ExceptSecondEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, IntersectDefaultEnumerable<TCollectionItem, TSelectMany_IntersectFirstEnumerable, TSelectMany_IntersectFirstEnumerator, TSelectMany_IntersectSecondEnumerable, TSelectMany_IntersectSecondEnumerator>, IntersectDefaultEnumerator<TCollectionItem, TSelectMany_IntersectFirstEnumerator, TSelectMany_IntersectSecondEnumerator>> SelectMany<TCollectionItem, TOutItem, TSelectMany_IntersectFirstEnumerable, TSelectMany_IntersectFirstEnumerator, TSelectMany_IntersectSecondEnumerable, TSelectMany_IntersectSecondEnumerator>(this RangeEnumerable source, Func<int, IntersectDefaultEnumerable<TCollectionItem, TSelectMany_IntersectFirstEnumerable, TSelectMany_IntersectFirstEnumerator, TSelectMany_IntersectSecondEnumerable, TSelectMany_IntersectSecondEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TSelectMany_IntersectFirstEnumerable : struct, IStructEnumerable<TCollectionItem, TSelectMany_IntersectFirstEnumerator>
//        where TSelectMany_IntersectFirstEnumerator : struct, IStructEnumerator<TCollectionItem>
//        where TSelectMany_IntersectSecondEnumerable : struct, IStructEnumerable<TCollectionItem, TSelectMany_IntersectSecondEnumerator>
//        where TSelectMany_IntersectSecondEnumerator : struct, IStructEnumerator<TCollectionItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, IntersectDefaultEnumerable<TCollectionItem, TSelectMany_IntersectFirstEnumerable, TSelectMany_IntersectFirstEnumerator, TSelectMany_IntersectSecondEnumerable, TSelectMany_IntersectSecondEnumerator>, IntersectDefaultEnumerator<TCollectionItem, TSelectMany_IntersectFirstEnumerator, TSelectMany_IntersectSecondEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionIndexedEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, SelectSelectEnumerable<TCollectionItem, TSelectMany_SelectInnerItem, TSelectMany_SelectInnerEnumerable, TSelectMany_SelectInnerEnumerator, TSelectMany_SelectProjection>, SelectSelectEnumerator<TCollectionItem, TSelectMany_SelectInnerItem, TSelectMany_SelectInnerEnumerator, TSelectMany_SelectProjection>> SelectMany<TSelectMany_SelectInnerItem, TCollectionItem, TOutItem, TSelectMany_SelectInnerEnumerable, TSelectMany_SelectInnerEnumerator, TSelectMany_SelectProjection>(this RangeEnumerable source, Func<int, int, SelectSelectEnumerable<TCollectionItem, TSelectMany_SelectInnerItem, TSelectMany_SelectInnerEnumerable, TSelectMany_SelectInnerEnumerator, TSelectMany_SelectProjection>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TSelectMany_SelectInnerEnumerable : struct, IStructEnumerable<TSelectMany_SelectInnerItem, TSelectMany_SelectInnerEnumerator>
//        where TSelectMany_SelectInnerEnumerator : struct, IStructEnumerator<TSelectMany_SelectInnerItem>
//        where TSelectMany_SelectProjection : struct, IStructProjection<TCollectionItem, TSelectMany_SelectInnerItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, SelectSelectEnumerable<TCollectionItem, TSelectMany_SelectInnerItem, TSelectMany_SelectInnerEnumerable, TSelectMany_SelectInnerEnumerator, TSelectMany_SelectProjection>, SelectSelectEnumerator<TCollectionItem, TSelectMany_SelectInnerItem, TSelectMany_SelectInnerEnumerator, TSelectMany_SelectProjection>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, IntersectSpecificEnumerable<TCollectionItem, TSelectMany_IntersectFirstEnumerable, TSelectMany_IntersectFirstEnumerator, TSelectMany_IntersectSecondEnumerable, TSelectMany_IntersectSecondEnumerator>, IntersectSpecificEnumerator<TCollectionItem, TSelectMany_IntersectFirstEnumerator, TSelectMany_IntersectSecondEnumerator>> SelectMany<TCollectionItem, TOutItem, TSelectMany_IntersectFirstEnumerable, TSelectMany_IntersectFirstEnumerator, TSelectMany_IntersectSecondEnumerable, TSelectMany_IntersectSecondEnumerator>(this RangeEnumerable source, Func<int, IntersectSpecificEnumerable<TCollectionItem, TSelectMany_IntersectFirstEnumerable, TSelectMany_IntersectFirstEnumerator, TSelectMany_IntersectSecondEnumerable, TSelectMany_IntersectSecondEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TSelectMany_IntersectFirstEnumerable : struct, IStructEnumerable<TCollectionItem, TSelectMany_IntersectFirstEnumerator>
//        where TSelectMany_IntersectFirstEnumerator : struct, IStructEnumerator<TCollectionItem>
//        where TSelectMany_IntersectSecondEnumerable : struct, IStructEnumerable<TCollectionItem, TSelectMany_IntersectSecondEnumerator>
//        where TSelectMany_IntersectSecondEnumerator : struct, IStructEnumerator<TCollectionItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, IntersectSpecificEnumerable<TCollectionItem, TSelectMany_IntersectFirstEnumerable, TSelectMany_IntersectFirstEnumerator, TSelectMany_IntersectSecondEnumerable, TSelectMany_IntersectSecondEnumerator>, IntersectSpecificEnumerator<TCollectionItem, TSelectMany_IntersectFirstEnumerator, TSelectMany_IntersectSecondEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionIndexedEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, ExceptDefaultEnumerable<TCollectionItem, TSelectMany_ExceptFirstEnumerable, TSelectMany_ExceptionFirstEnumerator, TSelectMany_ExceptSecondEnumerable, TSelectMany_ExceptSecondEnumerator>, ExceptDefaultEnumerator<TCollectionItem, TSelectMany_ExceptionFirstEnumerator, TSelectMany_ExceptSecondEnumerator>> SelectMany<TCollectionItem, TOutItem, TSelectMany_ExceptFirstEnumerable, TSelectMany_ExceptionFirstEnumerator, TSelectMany_ExceptSecondEnumerable, TSelectMany_ExceptSecondEnumerator>(this RangeEnumerable source, Func<int, int, ExceptDefaultEnumerable<TCollectionItem, TSelectMany_ExceptFirstEnumerable, TSelectMany_ExceptionFirstEnumerator, TSelectMany_ExceptSecondEnumerable, TSelectMany_ExceptSecondEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TSelectMany_ExceptFirstEnumerable : struct, IStructEnumerable<TCollectionItem, TSelectMany_ExceptionFirstEnumerator>
//        where TSelectMany_ExceptionFirstEnumerator : struct, IStructEnumerator<TCollectionItem>
//        where TSelectMany_ExceptSecondEnumerable : struct, IStructEnumerable<TCollectionItem, TSelectMany_ExceptSecondEnumerator>
//        where TSelectMany_ExceptSecondEnumerator : struct, IStructEnumerator<TCollectionItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, ExceptDefaultEnumerable<TCollectionItem, TSelectMany_ExceptFirstEnumerable, TSelectMany_ExceptionFirstEnumerator, TSelectMany_ExceptSecondEnumerable, TSelectMany_ExceptSecondEnumerator>, ExceptDefaultEnumerator<TCollectionItem, TSelectMany_ExceptionFirstEnumerator, TSelectMany_ExceptSecondEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionIndexedEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, ExceptSpecificEnumerable<TCollectionItem, TSelectMany_ExceptFirstEnumerable, TSelectMany_ExceptionFirstEnumerator, TSelectMany_ExceptSecondEnumerable, TSelectMany_ExceptSecondEnumerator>, ExceptSpecificEnumerator<TCollectionItem, TSelectMany_ExceptionFirstEnumerator, TSelectMany_ExceptSecondEnumerator>> SelectMany<TCollectionItem, TOutItem, TSelectMany_ExceptFirstEnumerable, TSelectMany_ExceptionFirstEnumerator, TSelectMany_ExceptSecondEnumerable, TSelectMany_ExceptSecondEnumerator>(this RangeEnumerable source, Func<int, int, ExceptSpecificEnumerable<TCollectionItem, TSelectMany_ExceptFirstEnumerable, TSelectMany_ExceptionFirstEnumerator, TSelectMany_ExceptSecondEnumerable, TSelectMany_ExceptSecondEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TSelectMany_ExceptFirstEnumerable : struct, IStructEnumerable<TCollectionItem, TSelectMany_ExceptionFirstEnumerator>
//        where TSelectMany_ExceptionFirstEnumerator : struct, IStructEnumerator<TCollectionItem>
//        where TSelectMany_ExceptSecondEnumerable : struct, IStructEnumerable<TCollectionItem, TSelectMany_ExceptSecondEnumerator>
//        where TSelectMany_ExceptSecondEnumerator : struct, IStructEnumerator<TCollectionItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, ExceptSpecificEnumerable<TCollectionItem, TSelectMany_ExceptFirstEnumerable, TSelectMany_ExceptionFirstEnumerator, TSelectMany_ExceptSecondEnumerable, TSelectMany_ExceptSecondEnumerator>, ExceptSpecificEnumerator<TCollectionItem, TSelectMany_ExceptionFirstEnumerator, TSelectMany_ExceptSecondEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionIndexedEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, IntersectDefaultEnumerable<TCollectionItem, TSelectMany_IntersectFirstEnumerable, TSelectMany_IntersectFirstEnumerator, TSelectMany_IntersectSecondEnumerable, TSelectMany_IntersectSecondEnumerator>, IntersectDefaultEnumerator<TCollectionItem, TSelectMany_IntersectFirstEnumerator, TSelectMany_IntersectSecondEnumerator>> SelectMany<TCollectionItem, TOutItem, TSelectMany_IntersectFirstEnumerable, TSelectMany_IntersectFirstEnumerator, TSelectMany_IntersectSecondEnumerable, TSelectMany_IntersectSecondEnumerator>(this RangeEnumerable source, Func<int, int, IntersectDefaultEnumerable<TCollectionItem, TSelectMany_IntersectFirstEnumerable, TSelectMany_IntersectFirstEnumerator, TSelectMany_IntersectSecondEnumerable, TSelectMany_IntersectSecondEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TSelectMany_IntersectFirstEnumerable : struct, IStructEnumerable<TCollectionItem, TSelectMany_IntersectFirstEnumerator>
//        where TSelectMany_IntersectFirstEnumerator : struct, IStructEnumerator<TCollectionItem>
//        where TSelectMany_IntersectSecondEnumerable : struct, IStructEnumerable<TCollectionItem, TSelectMany_IntersectSecondEnumerator>
//        where TSelectMany_IntersectSecondEnumerator : struct, IStructEnumerator<TCollectionItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, IntersectDefaultEnumerable<TCollectionItem, TSelectMany_IntersectFirstEnumerable, TSelectMany_IntersectFirstEnumerator, TSelectMany_IntersectSecondEnumerable, TSelectMany_IntersectSecondEnumerator>, IntersectDefaultEnumerator<TCollectionItem, TSelectMany_IntersectFirstEnumerator, TSelectMany_IntersectSecondEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionIndexedEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, UnionDefaultEnumerable<TCollectionItem, TSelectMany_UnionFirstEnumerable, TSelectMany_UnionFirstEnumerator, TSelectMany_UnionSecondEnumerable, TSelectMany_UnionSecondEnumerator>, UnionDefaultEnumerator<TCollectionItem, TSelectMany_UnionFirstEnumerator, TSelectMany_UnionSecondEnumerator>> SelectMany<TCollectionItem, TOutItem, TSelectMany_UnionFirstEnumerable, TSelectMany_UnionFirstEnumerator, TSelectMany_UnionSecondEnumerable, TSelectMany_UnionSecondEnumerator>(this RangeEnumerable source, Func<int, int, UnionDefaultEnumerable<TCollectionItem, TSelectMany_UnionFirstEnumerable, TSelectMany_UnionFirstEnumerator, TSelectMany_UnionSecondEnumerable, TSelectMany_UnionSecondEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TSelectMany_UnionFirstEnumerable : struct, IStructEnumerable<TCollectionItem, TSelectMany_UnionFirstEnumerator>
//        where TSelectMany_UnionFirstEnumerator : struct, IStructEnumerator<TCollectionItem>
//        where TSelectMany_UnionSecondEnumerable : struct, IStructEnumerable<TCollectionItem, TSelectMany_UnionSecondEnumerator>
//        where TSelectMany_UnionSecondEnumerator : struct, IStructEnumerator<TCollectionItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, UnionDefaultEnumerable<TCollectionItem, TSelectMany_UnionFirstEnumerable, TSelectMany_UnionFirstEnumerator, TSelectMany_UnionSecondEnumerable, TSelectMany_UnionSecondEnumerator>, UnionDefaultEnumerator<TCollectionItem, TSelectMany_UnionFirstEnumerator, TSelectMany_UnionSecondEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionIndexedEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, UnionSpecificEnumerable<TCollectionItem, TSelectMany_UnionFirstEnumerable, TSelectMany_UnionFirstEnumerator, TSelectMany_UnionSecondEnumerable, TSelectMany_UnionSecondEnumerator>, UnionSpecificEnumerator<TCollectionItem, TSelectMany_UnionFirstEnumerator, TSelectMany_UnionSecondEnumerator>> SelectMany<TCollectionItem, TOutItem, TSelectMany_UnionFirstEnumerable, TSelectMany_UnionFirstEnumerator, TSelectMany_UnionSecondEnumerable, TSelectMany_UnionSecondEnumerator>(this RangeEnumerable source, Func<int, int, UnionSpecificEnumerable<TCollectionItem, TSelectMany_UnionFirstEnumerable, TSelectMany_UnionFirstEnumerator, TSelectMany_UnionSecondEnumerable, TSelectMany_UnionSecondEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TSelectMany_UnionFirstEnumerable : struct, IStructEnumerable<TCollectionItem, TSelectMany_UnionFirstEnumerator>
//        where TSelectMany_UnionFirstEnumerator : struct, IStructEnumerator<TCollectionItem>
//        where TSelectMany_UnionSecondEnumerable : struct, IStructEnumerable<TCollectionItem, TSelectMany_UnionSecondEnumerator>
//        where TSelectMany_UnionSecondEnumerator : struct, IStructEnumerator<TCollectionItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, UnionSpecificEnumerable<TCollectionItem, TSelectMany_UnionFirstEnumerable, TSelectMany_UnionFirstEnumerator, TSelectMany_UnionSecondEnumerable, TSelectMany_UnionSecondEnumerator>, UnionSpecificEnumerator<TCollectionItem, TSelectMany_UnionFirstEnumerator, TSelectMany_UnionSecondEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionIndexedEnumerable<int, TOutItem, GroupingEnumerable<TSelectMany_GroupByKey, TSelectMany_GroupByElement>, RangeEnumerable, RangeEnumerator, GroupByDefaultEnumerable<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TSelectMany_GroupByEnumerable, TSelectMany_GroupByEnumerator>, GroupByDefaultEnumerator<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TSelectMany_GroupByEnumerator>> SelectMany<TOutItem, TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TSelectMany_GroupByEnumerable, TSelectMany_GroupByEnumerator>(this RangeEnumerable source, Func<int, int, GroupByDefaultEnumerable<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TSelectMany_GroupByEnumerable, TSelectMany_GroupByEnumerator>> collectionSelector, Func<int, GroupingEnumerable<TSelectMany_GroupByKey, TSelectMany_GroupByElement>, TOutItem> resultSelector)
//        where TSelectMany_GroupByEnumerable : struct, IStructEnumerable<TSelectMany_GroupByInItem, TSelectMany_GroupByEnumerator>
//        where TSelectMany_GroupByEnumerator : struct, IStructEnumerator<TSelectMany_GroupByInItem>
//        => CommonImplementation.SelectMany<int, TOutItem, GroupingEnumerable<TSelectMany_GroupByKey, TSelectMany_GroupByElement>, RangeEnumerable, RangeEnumerator, GroupByDefaultEnumerable<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TSelectMany_GroupByEnumerable, TSelectMany_GroupByEnumerator>, GroupByDefaultEnumerator<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TSelectMany_GroupByEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionIndexedEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, IntersectSpecificEnumerable<TCollectionItem, TSelectMany_IntersectFirstEnumerable, TSelectMany_IntersectFirstEnumerator, TSelectMany_IntersectSecondEnumerable, TSelectMany_IntersectSecondEnumerator>, IntersectSpecificEnumerator<TCollectionItem, TSelectMany_IntersectFirstEnumerator, TSelectMany_IntersectSecondEnumerator>> SelectMany<TCollectionItem, TOutItem, TSelectMany_IntersectFirstEnumerable, TSelectMany_IntersectFirstEnumerator, TSelectMany_IntersectSecondEnumerable, TSelectMany_IntersectSecondEnumerator>(this RangeEnumerable source, Func<int, int, IntersectSpecificEnumerable<TCollectionItem, TSelectMany_IntersectFirstEnumerable, TSelectMany_IntersectFirstEnumerator, TSelectMany_IntersectSecondEnumerable, TSelectMany_IntersectSecondEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TSelectMany_IntersectFirstEnumerable : struct, IStructEnumerable<TCollectionItem, TSelectMany_IntersectFirstEnumerator>
//        where TSelectMany_IntersectFirstEnumerator : struct, IStructEnumerator<TCollectionItem>
//        where TSelectMany_IntersectSecondEnumerable : struct, IStructEnumerable<TCollectionItem, TSelectMany_IntersectSecondEnumerator>
//        where TSelectMany_IntersectSecondEnumerator : struct, IStructEnumerator<TCollectionItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, IntersectSpecificEnumerable<TCollectionItem, TSelectMany_IntersectFirstEnumerable, TSelectMany_IntersectFirstEnumerator, TSelectMany_IntersectSecondEnumerable, TSelectMany_IntersectSecondEnumerator>, IntersectSpecificEnumerator<TCollectionItem, TSelectMany_IntersectFirstEnumerator, TSelectMany_IntersectSecondEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, UnionDefaultEnumerable<TCollectionItem, TSelectMany_UnionFirstEnumerable, TSelectMany_UnionFirstEnumerator, TSelectMany_UnionSecondEnumerable, TSelectMany_UnionSecondEnumerator>, UnionDefaultEnumerator<TCollectionItem, TSelectMany_UnionFirstEnumerator, TSelectMany_UnionSecondEnumerator>> SelectMany<TCollectionItem, TOutItem, TSelectMany_UnionFirstEnumerable, TSelectMany_UnionFirstEnumerator, TSelectMany_UnionSecondEnumerable, TSelectMany_UnionSecondEnumerator>(this RangeEnumerable source, Func<int, UnionDefaultEnumerable<TCollectionItem, TSelectMany_UnionFirstEnumerable, TSelectMany_UnionFirstEnumerator, TSelectMany_UnionSecondEnumerable, TSelectMany_UnionSecondEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TSelectMany_UnionFirstEnumerable : struct, IStructEnumerable<TCollectionItem, TSelectMany_UnionFirstEnumerator>
//        where TSelectMany_UnionFirstEnumerator : struct, IStructEnumerator<TCollectionItem>
//        where TSelectMany_UnionSecondEnumerable : struct, IStructEnumerable<TCollectionItem, TSelectMany_UnionSecondEnumerator>
//        where TSelectMany_UnionSecondEnumerator : struct, IStructEnumerator<TCollectionItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, UnionDefaultEnumerable<TCollectionItem, TSelectMany_UnionFirstEnumerable, TSelectMany_UnionFirstEnumerator, TSelectMany_UnionSecondEnumerable, TSelectMany_UnionSecondEnumerator>, UnionDefaultEnumerator<TCollectionItem, TSelectMany_UnionFirstEnumerator, TSelectMany_UnionSecondEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, ConcatEnumerable<TCollectionItem, TConcatFirstEnumerable, TConcatFirstEnumerator, TConcatSecondEnumerable, TConcatSecondEnumerator>, ConcatEnumerator<TCollectionItem, TConcatFirstEnumerator, TConcatSecondEnumerator>> SelectMany<TOutItem, TCollectionItem, TConcatFirstEnumerable, TConcatFirstEnumerator, TConcatSecondEnumerable, TConcatSecondEnumerator>(this RangeEnumerable source, Func<int, ConcatEnumerable<TCollectionItem, TConcatFirstEnumerable, TConcatFirstEnumerator, TConcatSecondEnumerable, TConcatSecondEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TConcatFirstEnumerable : struct, IStructEnumerable<TCollectionItem, TConcatFirstEnumerator>
//        where TConcatFirstEnumerator : struct, IStructEnumerator<TCollectionItem>
//        where TConcatSecondEnumerable : struct, IStructEnumerable<TCollectionItem, TConcatSecondEnumerator>
//        where TConcatSecondEnumerator : struct, IStructEnumerator<TCollectionItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, ConcatEnumerable<TCollectionItem, TConcatFirstEnumerable, TConcatFirstEnumerator, TConcatSecondEnumerable, TConcatSecondEnumerator>, ConcatEnumerator<TCollectionItem, TConcatFirstEnumerator, TConcatSecondEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, SelectManyCollectionEnumerable<TSelectManyInItem, TOutItem, TSelectManyCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>, SelectManyCollectionEnumerator<TSelectManyInItem, TOutItem, TSelectManyCollectionItem, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>> SelectMany<TSelectManyInItem, TOutItem, TSelectManyCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>(this RangeEnumerable source, Func<int, SelectManyCollectionEnumerable<TSelectManyInItem, TOutItem, TSelectManyCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>> selector)
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectManyInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectManyInItem>
//        where TSelectManyProjectedEnumerable : struct, IStructEnumerable<TSelectManyCollectionItem, TSelectManyProjectedEnumerator>
//        where TSelectManyProjectedEnumerator : struct, IStructEnumerator<TSelectManyCollectionItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, SelectManyCollectionEnumerable<TSelectManyInItem, TOutItem, TSelectManyCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>, SelectManyCollectionEnumerator<TSelectManyInItem, TOutItem, TSelectManyCollectionItem, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>>(ref source, selector);

//        public static SelectManyEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, SelectManyCollectionIndexedEnumerable<TSelectManyInItem, TOutItem, TSelectManyCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>, SelectManyCollectionIndexedEnumerator<TSelectManyInItem, TOutItem, TSelectManyCollectionItem, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>> SelectMany<TSelectManyInItem, TOutItem, TSelectManyCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>(this RangeEnumerable source, Func<int, SelectManyCollectionIndexedEnumerable<TSelectManyInItem, TOutItem, TSelectManyCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>> selector)
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectManyInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectManyInItem>
//        where TSelectManyProjectedEnumerable : struct, IStructEnumerable<TSelectManyCollectionItem, TSelectManyProjectedEnumerator>
//        where TSelectManyProjectedEnumerator : struct, IStructEnumerator<TSelectManyCollectionItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, SelectManyCollectionIndexedEnumerable<TSelectManyInItem, TOutItem, TSelectManyCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>, SelectManyCollectionIndexedEnumerator<TSelectManyInItem, TOutItem, TSelectManyCollectionItem, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>>(ref source, selector);

//        public static SelectManyIndexedEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, ZipEnumerable<TOutItem, TZipFirstItem, TZipSecondItem, TZipFirstEnumerable, TZipFirstEnumerator, TZipSecondEnumerable, TZipSecondEnumerator>, ZipEnumerator<TOutItem, TZipFirstItem, TZipSecondItem, TZipFirstEnumerator, TZipSecondEnumerator>> SelectMany<TZipFirstItem, TZipSecondItem, TOutItem, TZipFirstEnumerable, TZipFirstEnumerator, TZipSecondEnumerable, TZipSecondEnumerator>(this RangeEnumerable source, Func<int, int, ZipEnumerable<TOutItem, TZipFirstItem, TZipSecondItem, TZipFirstEnumerable, TZipFirstEnumerator, TZipSecondEnumerable, TZipSecondEnumerator>> selector)
//        where TZipFirstEnumerable : struct, IStructEnumerable<TZipFirstItem, TZipFirstEnumerator>
//        where TZipFirstEnumerator : struct, IStructEnumerator<TZipFirstItem>
//        where TZipSecondEnumerable : struct, IStructEnumerable<TZipSecondItem, TZipSecondEnumerator>
//        where TZipSecondEnumerator : struct, IStructEnumerator<TZipSecondItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, ZipEnumerable<TOutItem, TZipFirstItem, TZipSecondItem, TZipFirstEnumerable, TZipFirstEnumerator, TZipSecondEnumerable, TZipSecondEnumerator>, ZipEnumerator<TOutItem, TZipFirstItem, TZipSecondItem, TZipFirstEnumerator, TZipSecondEnumerator>>(ref source, selector);

//        public static SelectManyIndexedEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, SelectManyCollectionBridgeEnumerable<TSelectManyInItem, TOutItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyCollectionBridgeEnumerator<TSelectManyInItem, TOutItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>> SelectMany<TSelectManyInItem, TOutItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>(this RangeEnumerable source, Func<int, int, SelectManyCollectionBridgeEnumerable<TSelectManyInItem, TOutItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>> selector)
//        where TSelectManyBridgeType : class
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectManyInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectManyInItem>
//        where TSelectManyProjectedEnumerator : struct, IStructEnumerator<TSelectManyCollectionItem>
//        where TSelectManyBridger : struct, IStructBridger<TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyProjectedEnumerator>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, SelectManyCollectionBridgeEnumerable<TSelectManyInItem, TOutItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyCollectionBridgeEnumerator<TSelectManyInItem, TOutItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>>(ref source, selector);

//        public static SelectManyIndexedEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, SelectManyCollectionIndexedBridgeEnumerable<TSelectManyInItem, TOutItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyCollectionIndexedBridgeEnumerator<TSelectManyInItem, TOutItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>> SelectMany<TSelectManyInItem, TOutItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>(this RangeEnumerable source, Func<int, int, SelectManyCollectionIndexedBridgeEnumerable<TSelectManyInItem, TOutItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>> selector)
//        where TSelectManyBridgeType : class
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectManyInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectManyInItem>
//        where TSelectManyProjectedEnumerator : struct, IStructEnumerator<TSelectManyCollectionItem>
//        where TSelectManyBridger : struct, IStructBridger<TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyProjectedEnumerator>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, SelectManyCollectionIndexedBridgeEnumerable<TSelectManyInItem, TOutItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyCollectionIndexedBridgeEnumerator<TSelectManyInItem, TOutItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>>(ref source, selector);

//        public static SelectManyIndexedEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, SelectManyCollectionEnumerable<TSelectManyInItem, TOutItem, TSelectManyCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>, SelectManyCollectionEnumerator<TSelectManyInItem, TOutItem, TSelectManyCollectionItem, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>> SelectMany<TSelectManyInItem, TOutItem, TSelectManyCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>(this RangeEnumerable source, Func<int, int, SelectManyCollectionEnumerable<TSelectManyInItem, TOutItem, TSelectManyCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>> selector)
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectManyInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectManyInItem>
//        where TSelectManyProjectedEnumerable : struct, IStructEnumerable<TSelectManyCollectionItem, TSelectManyProjectedEnumerator>
//        where TSelectManyProjectedEnumerator : struct, IStructEnumerator<TSelectManyCollectionItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, SelectManyCollectionEnumerable<TSelectManyInItem, TOutItem, TSelectManyCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>, SelectManyCollectionEnumerator<TSelectManyInItem, TOutItem, TSelectManyCollectionItem, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>>(ref source, selector);

//        public static SelectManyIndexedEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, SelectManyCollectionIndexedEnumerable<TSelectManyInItem, TOutItem, TSelectManyCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>, SelectManyCollectionIndexedEnumerator<TSelectManyInItem, TOutItem, TSelectManyCollectionItem, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>> SelectMany<TSelectManyInItem, TOutItem, TSelectManyCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>(this RangeEnumerable source, Func<int, int, SelectManyCollectionIndexedEnumerable<TSelectManyInItem, TOutItem, TSelectManyCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>> selector)
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectManyInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectManyInItem>
//        where TSelectManyProjectedEnumerable : struct, IStructEnumerable<TSelectManyCollectionItem, TSelectManyProjectedEnumerator>
//        where TSelectManyProjectedEnumerator : struct, IStructEnumerator<TSelectManyCollectionItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, SelectManyCollectionIndexedEnumerable<TSelectManyInItem, TOutItem, TSelectManyCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>, SelectManyCollectionIndexedEnumerator<TSelectManyInItem, TOutItem, TSelectManyCollectionItem, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>>(ref source, selector);

//        public static SelectManyEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, SelectManyCollectionIndexedBridgeEnumerable<TSelectManyInItem, TOutItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyCollectionIndexedBridgeEnumerator<TSelectManyInItem, TOutItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>> SelectMany<TSelectManyInItem, TOutItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>(this RangeEnumerable source, Func<int, SelectManyCollectionIndexedBridgeEnumerable<TSelectManyInItem, TOutItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>> selector)
//        where TSelectManyBridgeType : class
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectManyInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectManyInItem>
//        where TSelectManyProjectedEnumerator : struct, IStructEnumerator<TSelectManyCollectionItem>
//        where TSelectManyBridger : struct, IStructBridger<TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyProjectedEnumerator>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, SelectManyCollectionIndexedBridgeEnumerable<TSelectManyInItem, TOutItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyCollectionIndexedBridgeEnumerator<TSelectManyInItem, TOutItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>>(ref source, selector);

//        public static SelectManyEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, SelectManyCollectionBridgeEnumerable<TSelectManyInItem, TOutItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyCollectionBridgeEnumerator<TSelectManyInItem, TOutItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>> SelectMany<TSelectManyInItem, TOutItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>(this RangeEnumerable source, Func<int, SelectManyCollectionBridgeEnumerable<TSelectManyInItem, TOutItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>> selector)
//        where TSelectManyBridgeType : class
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectManyInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectManyInItem>
//        where TSelectManyProjectedEnumerator : struct, IStructEnumerator<TSelectManyCollectionItem>
//        where TSelectManyBridger : struct, IStructBridger<TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyProjectedEnumerator>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, SelectManyCollectionBridgeEnumerable<TSelectManyInItem, TOutItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyCollectionBridgeEnumerator<TSelectManyInItem, TOutItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>>(ref source, selector);

//        public static SelectManyEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, ZipEnumerable<TOutItem, TZipFirstItem, TZipSecondItem, TZipFirstEnumerable, TZipFirstEnumerator, TZipSecondEnumerable, TZipSecondEnumerator>, ZipEnumerator<TOutItem, TZipFirstItem, TZipSecondItem, TZipFirstEnumerator, TZipSecondEnumerator>> SelectMany<TZipFirstItem, TZipSecondItem, TOutItem, TZipFirstEnumerable, TZipFirstEnumerator, TZipSecondEnumerable, TZipSecondEnumerator>(this RangeEnumerable source, Func<int, ZipEnumerable<TOutItem, TZipFirstItem, TZipSecondItem, TZipFirstEnumerable, TZipFirstEnumerator, TZipSecondEnumerable, TZipSecondEnumerator>> selector)
//        where TZipFirstEnumerable : struct, IStructEnumerable<TZipFirstItem, TZipFirstEnumerator>
//        where TZipFirstEnumerator : struct, IStructEnumerator<TZipFirstItem>
//        where TZipSecondEnumerable : struct, IStructEnumerable<TZipSecondItem, TZipSecondEnumerator>
//        where TZipSecondEnumerator : struct, IStructEnumerator<TZipSecondItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, ZipEnumerable<TOutItem, TZipFirstItem, TZipSecondItem, TZipFirstEnumerable, TZipFirstEnumerator, TZipSecondEnumerable, TZipSecondEnumerator>, ZipEnumerator<TOutItem, TZipFirstItem, TZipSecondItem, TZipFirstEnumerator, TZipSecondEnumerator>>(ref source, selector);

//        public static SelectManyCollectionEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, GroupByCollectionDefaultEnumerable<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TCollectionItem, TSelectMany_GroupByEnumerable, TSelectMany_GroupByEnumerator>, GroupByCollectionDefaultEnumerator<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TCollectionItem, TSelectMany_GroupByEnumerator>> SelectMany<TOutItem, TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TCollectionItem, TSelectMany_GroupByEnumerable, TSelectMany_GroupByEnumerator>(this RangeEnumerable source, Func<int, GroupByCollectionDefaultEnumerable<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TCollectionItem, TSelectMany_GroupByEnumerable, TSelectMany_GroupByEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TSelectMany_GroupByEnumerable : struct, IStructEnumerable<TSelectMany_GroupByInItem, TSelectMany_GroupByEnumerator>
//        where TSelectMany_GroupByEnumerator : struct, IStructEnumerator<TSelectMany_GroupByInItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, GroupByCollectionDefaultEnumerable<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TCollectionItem, TSelectMany_GroupByEnumerable, TSelectMany_GroupByEnumerator>, GroupByCollectionDefaultEnumerator<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TCollectionItem, TSelectMany_GroupByEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, GroupByCollectionSpecificEnumerable<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TCollectionItem, TSelectMany_GroupByEnumerable, TSelectMany_GroupByEnumerator>, GroupByCollectionSpecificEnumerator<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TCollectionItem, TSelectMany_GroupByEnumerator>> SelectMany<TOutItem, TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TCollectionItem, TSelectMany_GroupByEnumerable, TSelectMany_GroupByEnumerator>(this RangeEnumerable source, Func<int, GroupByCollectionSpecificEnumerable<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TCollectionItem, TSelectMany_GroupByEnumerable, TSelectMany_GroupByEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TSelectMany_GroupByEnumerable : struct, IStructEnumerable<TSelectMany_GroupByInItem, TSelectMany_GroupByEnumerator>
//        where TSelectMany_GroupByEnumerator : struct, IStructEnumerator<TSelectMany_GroupByInItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, GroupByCollectionSpecificEnumerable<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TCollectionItem, TSelectMany_GroupByEnumerable, TSelectMany_GroupByEnumerator>, GroupByCollectionSpecificEnumerator<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TCollectionItem, TSelectMany_GroupByEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, WhereSelectEnumerable<TCollectionItem, TSelectMany_WhereInnerItem, TSelectMany_WhereInnerEnumerable, TSelectMany_WhereInnerEnumerator, TSelectMany_WherePredicate, TSelectMany_WhereProjection>, WhereSelectEnumerator<TCollectionItem, TSelectMany_WhereInnerItem, TSelectMany_WhereInnerEnumerator, TSelectMany_WherePredicate, TSelectMany_WhereProjection>> SelectMany<TCollectionItem, TOutItem, TSelectMany_WhereInnerItem, TSelectMany_WhereInnerEnumerable, TSelectMany_WhereInnerEnumerator, TSelectMany_WherePredicate, TSelectMany_WhereProjection>(this RangeEnumerable source, Func<int, WhereSelectEnumerable<TCollectionItem, TSelectMany_WhereInnerItem, TSelectMany_WhereInnerEnumerable, TSelectMany_WhereInnerEnumerator, TSelectMany_WherePredicate, TSelectMany_WhereProjection>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TSelectMany_WhereInnerEnumerable : struct, IStructEnumerable<TSelectMany_WhereInnerItem, TSelectMany_WhereInnerEnumerator>
//        where TSelectMany_WhereInnerEnumerator : struct, IStructEnumerator<TSelectMany_WhereInnerItem>
//        where TSelectMany_WherePredicate : struct, IStructPredicate<TSelectMany_WhereInnerItem>
//        where TSelectMany_WhereProjection : struct, IStructProjection<TCollectionItem, TSelectMany_WhereInnerItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, WhereSelectEnumerable<TCollectionItem, TSelectMany_WhereInnerItem, TSelectMany_WhereInnerEnumerable, TSelectMany_WhereInnerEnumerator, TSelectMany_WherePredicate, TSelectMany_WhereProjection>, WhereSelectEnumerator<TCollectionItem, TSelectMany_WhereInnerItem, TSelectMany_WhereInnerEnumerator, TSelectMany_WherePredicate, TSelectMany_WhereProjection>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionIndexedEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, GroupByCollectionDefaultEnumerable<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TCollectionItem, TSelectMany_GroupByEnumerable, TSelectMany_GroupByEnumerator>, GroupByCollectionDefaultEnumerator<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TCollectionItem, TSelectMany_GroupByEnumerator>> SelectMany<TOutItem, TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TCollectionItem, TSelectMany_GroupByEnumerable, TSelectMany_GroupByEnumerator>(this RangeEnumerable source, Func<int, int, GroupByCollectionDefaultEnumerable<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TCollectionItem, TSelectMany_GroupByEnumerable, TSelectMany_GroupByEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TSelectMany_GroupByEnumerable : struct, IStructEnumerable<TSelectMany_GroupByInItem, TSelectMany_GroupByEnumerator>
//        where TSelectMany_GroupByEnumerator : struct, IStructEnumerator<TSelectMany_GroupByInItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, GroupByCollectionDefaultEnumerable<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TCollectionItem, TSelectMany_GroupByEnumerable, TSelectMany_GroupByEnumerator>, GroupByCollectionDefaultEnumerator<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TCollectionItem, TSelectMany_GroupByEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionIndexedEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, GroupByCollectionSpecificEnumerable<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TCollectionItem, TSelectMany_GroupByEnumerable, TSelectMany_GroupByEnumerator>, GroupByCollectionSpecificEnumerator<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TCollectionItem, TSelectMany_GroupByEnumerator>> SelectMany<TOutItem, TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TCollectionItem, TSelectMany_GroupByEnumerable, TSelectMany_GroupByEnumerator>(this RangeEnumerable source, Func<int, int, GroupByCollectionSpecificEnumerable<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TCollectionItem, TSelectMany_GroupByEnumerable, TSelectMany_GroupByEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TSelectMany_GroupByEnumerable : struct, IStructEnumerable<TSelectMany_GroupByInItem, TSelectMany_GroupByEnumerator>
//        where TSelectMany_GroupByEnumerator : struct, IStructEnumerator<TSelectMany_GroupByInItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, GroupByCollectionSpecificEnumerable<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TCollectionItem, TSelectMany_GroupByEnumerable, TSelectMany_GroupByEnumerator>, GroupByCollectionSpecificEnumerator<TSelectMany_GroupByInItem, TSelectMany_GroupByKey, TSelectMany_GroupByElement, TCollectionItem, TSelectMany_GroupByEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionIndexedEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, WhereSelectEnumerable<TCollectionItem, TSelectMany_WhereInnerItem, TSelectMany_WhereInnerEnumerable, TSelectMany_WhereInnerEnumerator, TSelectMany_WherePredicate, TSelectMany_WhereProjection>, WhereSelectEnumerator<TCollectionItem, TSelectMany_WhereInnerItem, TSelectMany_WhereInnerEnumerator, TSelectMany_WherePredicate, TSelectMany_WhereProjection>> SelectMany<TCollectionItem, TOutItem, TSelectMany_WhereInnerItem, TSelectMany_WhereInnerEnumerable, TSelectMany_WhereInnerEnumerator, TSelectMany_WherePredicate, TSelectMany_WhereProjection>(this RangeEnumerable source, Func<int, int, WhereSelectEnumerable<TCollectionItem, TSelectMany_WhereInnerItem, TSelectMany_WhereInnerEnumerable, TSelectMany_WhereInnerEnumerator, TSelectMany_WherePredicate, TSelectMany_WhereProjection>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TSelectMany_WhereInnerEnumerable : struct, IStructEnumerable<TSelectMany_WhereInnerItem, TSelectMany_WhereInnerEnumerator>
//        where TSelectMany_WhereInnerEnumerator : struct, IStructEnumerator<TSelectMany_WhereInnerItem>
//        where TSelectMany_WherePredicate : struct, IStructPredicate<TSelectMany_WhereInnerItem>
//        where TSelectMany_WhereProjection : struct, IStructProjection<TCollectionItem, TSelectMany_WhereInnerItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, WhereSelectEnumerable<TCollectionItem, TSelectMany_WhereInnerItem, TSelectMany_WhereInnerEnumerable, TSelectMany_WhereInnerEnumerator, TSelectMany_WherePredicate, TSelectMany_WhereProjection>, WhereSelectEnumerator<TCollectionItem, TSelectMany_WhereInnerItem, TSelectMany_WhereInnerEnumerator, TSelectMany_WherePredicate, TSelectMany_WhereProjection>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionIndexedEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, SelectWhereEnumerable<TCollectionItem, TSelectMany_SelectInnerItem, TSelectMany_SelectInnerEnumerable, TSelectMany_SelectInnerEnumerator, TSelectMany_SelectProjection, TSelectMany_SelectPredicate>, SelectWhereEnumerator<TCollectionItem, TSelectMany_SelectInnerItem, TSelectMany_SelectInnerEnumerator, TSelectMany_SelectProjection, TSelectMany_SelectPredicate>> SelectMany<TSelectMany_SelectInnerItem, TCollectionItem, TOutItem, TSelectMany_SelectInnerEnumerable, TSelectMany_SelectInnerEnumerator, TSelectMany_SelectProjection, TSelectMany_SelectPredicate>(this RangeEnumerable source, Func<int, int, SelectWhereEnumerable<TCollectionItem, TSelectMany_SelectInnerItem, TSelectMany_SelectInnerEnumerable, TSelectMany_SelectInnerEnumerator, TSelectMany_SelectProjection, TSelectMany_SelectPredicate>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TSelectMany_SelectInnerEnumerable : struct, IStructEnumerable<TSelectMany_SelectInnerItem, TSelectMany_SelectInnerEnumerator>
//        where TSelectMany_SelectInnerEnumerator : struct, IStructEnumerator<TSelectMany_SelectInnerItem>
//        where TSelectMany_SelectProjection : struct, IStructProjection<TCollectionItem, TSelectMany_SelectInnerItem>
//        where TSelectMany_SelectPredicate : struct, IStructPredicate<TCollectionItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, SelectWhereEnumerable<TCollectionItem, TSelectMany_SelectInnerItem, TSelectMany_SelectInnerEnumerable, TSelectMany_SelectInnerEnumerator, TSelectMany_SelectProjection, TSelectMany_SelectPredicate>, SelectWhereEnumerator<TCollectionItem, TSelectMany_SelectInnerItem, TSelectMany_SelectInnerEnumerator, TSelectMany_SelectProjection, TSelectMany_SelectPredicate>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionIndexedEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, SelectManyBridgeEnumerable<TSelectInItem, TCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyBridgeEnumerator<TSelectInItem, TCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>> SelectMany<TSelectInItem, TOutItem, TCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>(this RangeEnumerable source, Func<int, int, SelectManyBridgeEnumerable<TSelectInItem, TCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TSelectManyBridgeType : class
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectInItem>
//        where TSelectManyProjectedEnumerator : struct, IStructEnumerator<TCollectionItem>
//        where TSelectManyBridger : struct, IStructBridger<TCollectionItem, TSelectManyBridgeType, TSelectManyProjectedEnumerator>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, SelectManyBridgeEnumerable<TSelectInItem, TCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyBridgeEnumerator<TSelectInItem, TCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionIndexedEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, SelectManyIndexedBridgeEnumerable<TSelectInItem, TCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyIndexedBridgeEnumerator<TSelectInItem, TCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>> SelectMany<TSelectInItem, TOutItem, TCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>(this RangeEnumerable source, Func<int, int, SelectManyIndexedBridgeEnumerable<TSelectInItem, TCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TSelectManyBridgeType : class
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectInItem>
//        where TSelectManyProjectedEnumerator : struct, IStructEnumerator<TCollectionItem>
//        where TSelectManyBridger : struct, IStructBridger<TCollectionItem, TSelectManyBridgeType, TSelectManyProjectedEnumerator>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, SelectManyIndexedBridgeEnumerable<TSelectInItem, TCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyIndexedBridgeEnumerator<TSelectInItem, TCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionIndexedEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, SelectManyEnumerable<TSelectInItem, TCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyInnerProjectedEnumerable, TSelectManyInnerProjectedEnumerator>, SelectManyEnumerator<TSelectInItem, TCollectionItem, TSelectManyInnerEnumerator, TSelectManyInnerProjectedEnumerable, TSelectManyInnerProjectedEnumerator>> SelectMany<TSelectInItem, TOutItem, TCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyInnerProjectedEnumerable, TSelectManyInnerProjectedEnumerator>(this RangeEnumerable source, Func<int, int, SelectManyEnumerable<TSelectInItem, TCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyInnerProjectedEnumerable, TSelectManyInnerProjectedEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectInItem>
//        where TSelectManyInnerProjectedEnumerable : struct, IStructEnumerable<TCollectionItem, TSelectManyInnerProjectedEnumerator>
//        where TSelectManyInnerProjectedEnumerator : struct, IStructEnumerator<TCollectionItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, SelectManyEnumerable<TSelectInItem, TCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyInnerProjectedEnumerable, TSelectManyInnerProjectedEnumerator>, SelectManyEnumerator<TSelectInItem, TCollectionItem, TSelectManyInnerEnumerator, TSelectManyInnerProjectedEnumerable, TSelectManyInnerProjectedEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionIndexedEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, SelectManyIndexedEnumerable<TSelectInItem, TCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyInnerProjectedEnumerable, TSelectManyInnerProjectedEnumerator>, SelectManyIndexedEnumerator<TSelectInItem, TCollectionItem, TSelectManyInnerEnumerator, TSelectManyInnerProjectedEnumerable, TSelectManyInnerProjectedEnumerator>> SelectMany<TSelectInItem, TOutItem, TCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyInnerProjectedEnumerable, TSelectManyInnerProjectedEnumerator>(this RangeEnumerable source, Func<int, int, SelectManyIndexedEnumerable<TSelectInItem, TCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyInnerProjectedEnumerable, TSelectManyInnerProjectedEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectInItem>
//        where TSelectManyInnerProjectedEnumerable : struct, IStructEnumerable<TCollectionItem, TSelectManyInnerProjectedEnumerator>
//        where TSelectManyInnerProjectedEnumerator : struct, IStructEnumerator<TCollectionItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, SelectManyIndexedEnumerable<TSelectInItem, TCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyInnerProjectedEnumerable, TSelectManyInnerProjectedEnumerator>, SelectManyIndexedEnumerator<TSelectInItem, TCollectionItem, TSelectManyInnerEnumerator, TSelectManyInnerProjectedEnumerable, TSelectManyInnerProjectedEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, SelectManyIndexedEnumerable<TSelectInItem, TCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyInnerProjectedEnumerable, TSelectManyInnerProjectedEnumerator>, SelectManyIndexedEnumerator<TSelectInItem, TCollectionItem, TSelectManyInnerEnumerator, TSelectManyInnerProjectedEnumerable, TSelectManyInnerProjectedEnumerator>> SelectMany<TSelectInItem, TOutItem, TCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyInnerProjectedEnumerable, TSelectManyInnerProjectedEnumerator>(this RangeEnumerable source, Func<int, SelectManyIndexedEnumerable<TSelectInItem, TCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyInnerProjectedEnumerable, TSelectManyInnerProjectedEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectInItem>
//        where TSelectManyInnerProjectedEnumerable : struct, IStructEnumerable<TCollectionItem, TSelectManyInnerProjectedEnumerator>
//        where TSelectManyInnerProjectedEnumerator : struct, IStructEnumerator<TCollectionItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, SelectManyIndexedEnumerable<TSelectInItem, TCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyInnerProjectedEnumerable, TSelectManyInnerProjectedEnumerator>, SelectManyIndexedEnumerator<TSelectInItem, TCollectionItem, TSelectManyInnerEnumerator, TSelectManyInnerProjectedEnumerable, TSelectManyInnerProjectedEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, SelectManyIndexedBridgeEnumerable<TSelectInItem, TCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyIndexedBridgeEnumerator<TSelectInItem, TCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>> SelectMany<TSelectInItem, TOutItem, TSelectManyBridgeType, TSelectManyBridger, TCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>(this RangeEnumerable source, Func<int, SelectManyIndexedBridgeEnumerable<TSelectInItem, TCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TSelectManyBridgeType : class
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectInItem>
//        where TSelectManyProjectedEnumerator : struct, IStructEnumerator<TCollectionItem>
//        where TSelectManyBridger : struct, IStructBridger<TCollectionItem, TSelectManyBridgeType, TSelectManyProjectedEnumerator>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, SelectManyIndexedBridgeEnumerable<TSelectInItem, TCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyIndexedBridgeEnumerator<TSelectInItem, TCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, SelectWhereEnumerable<TCollectionItem, TSelectMany_SelectInnerItem, TSelectMany_SelectInnerEnumerable, TSelectMany_SelectInnerEnumerator, TSelectMany_SelectProjection, TSelectMany_SelectPredicate>, SelectWhereEnumerator<TCollectionItem, TSelectMany_SelectInnerItem, TSelectMany_SelectInnerEnumerator, TSelectMany_SelectProjection, TSelectMany_SelectPredicate>> SelectMany<TSelectMany_SelectInnerItem, TCollectionItem, TOutItem, TSelectMany_SelectInnerEnumerable, TSelectMany_SelectInnerEnumerator, TSelectMany_SelectProjection, TSelectMany_SelectPredicate>(this RangeEnumerable source, Func<int, SelectWhereEnumerable<TCollectionItem, TSelectMany_SelectInnerItem, TSelectMany_SelectInnerEnumerable, TSelectMany_SelectInnerEnumerator, TSelectMany_SelectProjection, TSelectMany_SelectPredicate>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TSelectMany_SelectInnerEnumerable : struct, IStructEnumerable<TSelectMany_SelectInnerItem, TSelectMany_SelectInnerEnumerator>
//        where TSelectMany_SelectInnerEnumerator : struct, IStructEnumerator<TSelectMany_SelectInnerItem>
//        where TSelectMany_SelectProjection : struct, IStructProjection<TCollectionItem, TSelectMany_SelectInnerItem>
//        where TSelectMany_SelectPredicate : struct, IStructPredicate<TCollectionItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, SelectWhereEnumerable<TCollectionItem, TSelectMany_SelectInnerItem, TSelectMany_SelectInnerEnumerable, TSelectMany_SelectInnerEnumerator, TSelectMany_SelectProjection, TSelectMany_SelectPredicate>, SelectWhereEnumerator<TCollectionItem, TSelectMany_SelectInnerItem, TSelectMany_SelectInnerEnumerator, TSelectMany_SelectProjection, TSelectMany_SelectPredicate>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, SelectManyEnumerable<TSelectInItem, TCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyInnerProjectedEnumerable, TSelectManyInnerProjectedEnumerator>, SelectManyEnumerator<TSelectInItem, TCollectionItem, TSelectManyInnerEnumerator, TSelectManyInnerProjectedEnumerable, TSelectManyInnerProjectedEnumerator>> SelectMany<TSelectInItem, TOutItem, TCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyInnerProjectedEnumerable, TSelectManyInnerProjectedEnumerator>(this RangeEnumerable source, Func<int, SelectManyEnumerable<TSelectInItem, TCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyInnerProjectedEnumerable, TSelectManyInnerProjectedEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectInItem>
//        where TSelectManyInnerProjectedEnumerable : struct, IStructEnumerable<TCollectionItem, TSelectManyInnerProjectedEnumerator>
//        where TSelectManyInnerProjectedEnumerator : struct, IStructEnumerator<TCollectionItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, SelectManyEnumerable<TSelectInItem, TCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyInnerProjectedEnumerable, TSelectManyInnerProjectedEnumerator>, SelectManyEnumerator<TSelectInItem, TCollectionItem, TSelectManyInnerEnumerator, TSelectManyInnerProjectedEnumerable, TSelectManyInnerProjectedEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, SelectManyBridgeEnumerable<TSelectInItem, TCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyBridgeEnumerator<TSelectInItem, TCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>> SelectMany<TSelectInItem, TOutItem, TCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>(this RangeEnumerable source, Func<int, SelectManyBridgeEnumerable<TSelectInItem, TCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TSelectManyBridgeType : class
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectInItem>
//        where TSelectManyProjectedEnumerator : struct, IStructEnumerator<TCollectionItem>
//        where TSelectManyBridger : struct, IStructBridger<TCollectionItem, TSelectManyBridgeType, TSelectManyProjectedEnumerator>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, SelectManyBridgeEnumerable<TSelectInItem, TCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyBridgeEnumerator<TSelectInItem, TCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyIndexedEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, GroupJoinDefaultEnumerable<TOutItem, TSelectMany_GroupJoinKey, TSelectMany_GroupJoinLeftItem, TSelectMany_GroupJoinLeftEnumerable, TSelectMany_GroupJoinLeftEnumerator, TSelectMany_GroupJoinRightItem, TSelectMany_GroupJoinRightEnumerable, TSelectMany_GroupJoinRightEnumerator>, GroupJoinDefaultEnumerator<TOutItem, TSelectMany_GroupJoinKey, TSelectMany_GroupJoinLeftItem, TSelectMany_GroupJoinLeftEnumerator, TSelectMany_GroupJoinRightItem, TSelectMany_GroupJoinRightEnumerator>> SelectMany<TOutItem, TSelectMany_GroupJoinKey, TSelectMany_GroupJoinLeftItem, TSelectMany_GroupJoinLeftEnumerable, TSelectMany_GroupJoinLeftEnumerator, TSelectMany_GroupJoinRightItem, TSelectMany_GroupJoinRightEnumerable, TSelectMany_GroupJoinRightEnumerator>(this RangeEnumerable source, Func<int, int, GroupJoinDefaultEnumerable<TOutItem, TSelectMany_GroupJoinKey, TSelectMany_GroupJoinLeftItem, TSelectMany_GroupJoinLeftEnumerable, TSelectMany_GroupJoinLeftEnumerator, TSelectMany_GroupJoinRightItem, TSelectMany_GroupJoinRightEnumerable, TSelectMany_GroupJoinRightEnumerator>> selector)
//        where TSelectMany_GroupJoinLeftEnumerable : struct, IStructEnumerable<TSelectMany_GroupJoinLeftItem, TSelectMany_GroupJoinLeftEnumerator>
//        where TSelectMany_GroupJoinLeftEnumerator : struct, IStructEnumerator<TSelectMany_GroupJoinLeftItem>
//        where TSelectMany_GroupJoinRightEnumerable : struct, IStructEnumerable<TSelectMany_GroupJoinRightItem, TSelectMany_GroupJoinRightEnumerator>
//        where TSelectMany_GroupJoinRightEnumerator : struct, IStructEnumerator<TSelectMany_GroupJoinRightItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, GroupJoinDefaultEnumerable<TOutItem, TSelectMany_GroupJoinKey, TSelectMany_GroupJoinLeftItem, TSelectMany_GroupJoinLeftEnumerable, TSelectMany_GroupJoinLeftEnumerator, TSelectMany_GroupJoinRightItem, TSelectMany_GroupJoinRightEnumerable, TSelectMany_GroupJoinRightEnumerator>, GroupJoinDefaultEnumerator<TOutItem, TSelectMany_GroupJoinKey, TSelectMany_GroupJoinLeftItem, TSelectMany_GroupJoinLeftEnumerator, TSelectMany_GroupJoinRightItem, TSelectMany_GroupJoinRightEnumerator>>(ref source, selector);

//        public static SelectManyIndexedEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, JoinDefaultEnumerable<TOutItem, TSelectMany_JoinKeyItem, TSelectMany_JoinLeftItem, TSelectMany_JoinLeftEnumerable, TSelectMany_JoinLeftEnumerator, TSelectMany_JoinRightItem, TSelectMany_JoinRightEnumerable, TSelectMany_JoinRightEnumerator>, JoinDefaultEnumerator<TOutItem, TSelectMany_JoinKeyItem, TSelectMany_JoinLeftItem, TSelectMany_JoinLeftEnumerator, TSelectMany_JoinRightItem, TSelectMany_JoinRightEnumerator>> SelectMany<TOutItem, TSelectMany_JoinKeyItem, TSelectMany_JoinLeftItem, TSelectMany_JoinLeftEnumerable, TSelectMany_JoinLeftEnumerator, TSelectMany_JoinRightItem, TSelectMany_JoinRightEnumerable, TSelectMany_JoinRightEnumerator>(this RangeEnumerable source, Func<int, int, JoinDefaultEnumerable<TOutItem, TSelectMany_JoinKeyItem, TSelectMany_JoinLeftItem, TSelectMany_JoinLeftEnumerable, TSelectMany_JoinLeftEnumerator, TSelectMany_JoinRightItem, TSelectMany_JoinRightEnumerable, TSelectMany_JoinRightEnumerator>> selector)
//        where TSelectMany_JoinLeftEnumerable : struct, IStructEnumerable<TSelectMany_JoinLeftItem, TSelectMany_JoinLeftEnumerator>
//        where TSelectMany_JoinLeftEnumerator : struct, IStructEnumerator<TSelectMany_JoinLeftItem>
//        where TSelectMany_JoinRightEnumerable : struct, IStructEnumerable<TSelectMany_JoinRightItem, TSelectMany_JoinRightEnumerator>
//        where TSelectMany_JoinRightEnumerator : struct, IStructEnumerator<TSelectMany_JoinRightItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, JoinDefaultEnumerable<TOutItem, TSelectMany_JoinKeyItem, TSelectMany_JoinLeftItem, TSelectMany_JoinLeftEnumerable, TSelectMany_JoinLeftEnumerator, TSelectMany_JoinRightItem, TSelectMany_JoinRightEnumerable, TSelectMany_JoinRightEnumerator>, JoinDefaultEnumerator<TOutItem, TSelectMany_JoinKeyItem, TSelectMany_JoinLeftItem, TSelectMany_JoinLeftEnumerator, TSelectMany_JoinRightItem, TSelectMany_JoinRightEnumerator>>(ref source, selector);

//        public static SelectManyIndexedEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, JoinSpecificEnumerable<TOutItem, TSelectMany_JoinKeyItem, TSelectMany_JoinLeftItem, TSelectMany_JoinLeftEnumerable, TSelectMany_JoinLeftEnumerator, TSelectMany_JoinRightItem, TSelectMany_JoinRightEnumerable, TSelectMany_JoinRightEnumerator>, JoinSpecificEnumerator<TOutItem, TSelectMany_JoinKeyItem, TSelectMany_JoinLeftItem, TSelectMany_JoinLeftEnumerator, TSelectMany_JoinRightItem, TSelectMany_JoinRightEnumerator>> SelectMany<TOutItem, TSelectMany_JoinKeyItem, TSelectMany_JoinLeftItem, TSelectMany_JoinLeftEnumerable, TSelectMany_JoinLeftEnumerator, TSelectMany_JoinRightItem, TSelectMany_JoinRightEnumerable, TSelectMany_JoinRightEnumerator>(this RangeEnumerable source, Func<int, int, JoinSpecificEnumerable<TOutItem, TSelectMany_JoinKeyItem, TSelectMany_JoinLeftItem, TSelectMany_JoinLeftEnumerable, TSelectMany_JoinLeftEnumerator, TSelectMany_JoinRightItem, TSelectMany_JoinRightEnumerable, TSelectMany_JoinRightEnumerator>> selector)
//        where TSelectMany_JoinLeftEnumerable : struct, IStructEnumerable<TSelectMany_JoinLeftItem, TSelectMany_JoinLeftEnumerator>
//        where TSelectMany_JoinLeftEnumerator : struct, IStructEnumerator<TSelectMany_JoinLeftItem>
//        where TSelectMany_JoinRightEnumerable : struct, IStructEnumerable<TSelectMany_JoinRightItem, TSelectMany_JoinRightEnumerator>
//        where TSelectMany_JoinRightEnumerator : struct, IStructEnumerator<TSelectMany_JoinRightItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, JoinSpecificEnumerable<TOutItem, TSelectMany_JoinKeyItem, TSelectMany_JoinLeftItem, TSelectMany_JoinLeftEnumerable, TSelectMany_JoinLeftEnumerator, TSelectMany_JoinRightItem, TSelectMany_JoinRightEnumerable, TSelectMany_JoinRightEnumerator>, JoinSpecificEnumerator<TOutItem, TSelectMany_JoinKeyItem, TSelectMany_JoinLeftItem, TSelectMany_JoinLeftEnumerator, TSelectMany_JoinRightItem, TSelectMany_JoinRightEnumerator>>(ref source, selector);

//        public static SelectManyIndexedEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, GroupJoinSpecificEnumerable<TOutItem, TSelectMany_GroupJoinKey, TSelectMany_GroupJoinLeftItem, TSelectMany_GroupJoinLeftEnumerable, TSelectMany_GroupJoinLeftEnumerator, TSelectMany_GroupJoinRightItem, TSelectMany_GroupJoinRightEnumerable, TSelectMany_GroupJoinRightEnumerator>, GroupJoinSpecificEnumerator<TOutItem, TSelectMany_GroupJoinKey, TSelectMany_GroupJoinLeftItem, TSelectMany_GroupJoinLeftEnumerator, TSelectMany_GroupJoinRightItem, TSelectMany_GroupJoinRightEnumerator>> SelectMany<TOutItem, TSelectMany_GroupJoinKey, TSelectMany_GroupJoinLeftItem, TSelectMany_GroupJoinLeftEnumerable, TSelectMany_GroupJoinLeftEnumerator, TSelectMany_GroupJoinRightItem, TSelectMany_GroupJoinRightEnumerable, TSelectMany_GroupJoinRightEnumerator>(this RangeEnumerable source, Func<int, int, GroupJoinSpecificEnumerable<TOutItem, TSelectMany_GroupJoinKey, TSelectMany_GroupJoinLeftItem, TSelectMany_GroupJoinLeftEnumerable, TSelectMany_GroupJoinLeftEnumerator, TSelectMany_GroupJoinRightItem, TSelectMany_GroupJoinRightEnumerable, TSelectMany_GroupJoinRightEnumerator>> selector)
//        where TSelectMany_GroupJoinLeftEnumerable : struct, IStructEnumerable<TSelectMany_GroupJoinLeftItem, TSelectMany_GroupJoinLeftEnumerator>
//        where TSelectMany_GroupJoinLeftEnumerator : struct, IStructEnumerator<TSelectMany_GroupJoinLeftItem>
//        where TSelectMany_GroupJoinRightEnumerable : struct, IStructEnumerable<TSelectMany_GroupJoinRightItem, TSelectMany_GroupJoinRightEnumerator>
//        where TSelectMany_GroupJoinRightEnumerator : struct, IStructEnumerator<TSelectMany_GroupJoinRightItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, GroupJoinSpecificEnumerable<TOutItem, TSelectMany_GroupJoinKey, TSelectMany_GroupJoinLeftItem, TSelectMany_GroupJoinLeftEnumerable, TSelectMany_GroupJoinLeftEnumerator, TSelectMany_GroupJoinRightItem, TSelectMany_GroupJoinRightEnumerable, TSelectMany_GroupJoinRightEnumerator>, GroupJoinSpecificEnumerator<TOutItem, TSelectMany_GroupJoinKey, TSelectMany_GroupJoinLeftItem, TSelectMany_GroupJoinLeftEnumerator, TSelectMany_GroupJoinRightItem, TSelectMany_GroupJoinRightEnumerator>>(ref source, selector);

//        public static SelectManyEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, JoinDefaultEnumerable<TOutItem, TSelectMany_JoinKeyItem, TSelectMany_JoinLeftItem, TSelectMany_JoinLeftEnumerable, TSelectMany_JoinLeftEnumerator, TSelectMany_JoinRightItem, TSelectMany_JoinRightEnumerable, TSelectMany_JoinRightEnumerator>, JoinDefaultEnumerator<TOutItem, TSelectMany_JoinKeyItem, TSelectMany_JoinLeftItem, TSelectMany_JoinLeftEnumerator, TSelectMany_JoinRightItem, TSelectMany_JoinRightEnumerator>> SelectMany<TOutItem, TSelectMany_JoinKeyItem, TSelectMany_JoinLeftItem, TSelectMany_JoinLeftEnumerable, TSelectMany_JoinLeftEnumerator, TSelectMany_JoinRightItem, TSelectMany_JoinRightEnumerable, TSelectMany_JoinRightEnumerator>(this RangeEnumerable source, Func<int, JoinDefaultEnumerable<TOutItem, TSelectMany_JoinKeyItem, TSelectMany_JoinLeftItem, TSelectMany_JoinLeftEnumerable, TSelectMany_JoinLeftEnumerator, TSelectMany_JoinRightItem, TSelectMany_JoinRightEnumerable, TSelectMany_JoinRightEnumerator>> selector)
//        where TSelectMany_JoinLeftEnumerable : struct, IStructEnumerable<TSelectMany_JoinLeftItem, TSelectMany_JoinLeftEnumerator>
//        where TSelectMany_JoinLeftEnumerator : struct, IStructEnumerator<TSelectMany_JoinLeftItem>
//        where TSelectMany_JoinRightEnumerable : struct, IStructEnumerable<TSelectMany_JoinRightItem, TSelectMany_JoinRightEnumerator>
//        where TSelectMany_JoinRightEnumerator : struct, IStructEnumerator<TSelectMany_JoinRightItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, JoinDefaultEnumerable<TOutItem, TSelectMany_JoinKeyItem, TSelectMany_JoinLeftItem, TSelectMany_JoinLeftEnumerable, TSelectMany_JoinLeftEnumerator, TSelectMany_JoinRightItem, TSelectMany_JoinRightEnumerable, TSelectMany_JoinRightEnumerator>, JoinDefaultEnumerator<TOutItem, TSelectMany_JoinKeyItem, TSelectMany_JoinLeftItem, TSelectMany_JoinLeftEnumerator, TSelectMany_JoinRightItem, TSelectMany_JoinRightEnumerator>>(ref source, selector);

//        public static SelectManyEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, JoinSpecificEnumerable<TOutItem, TSelectMany_JoinKeyItem, TSelectMany_JoinLeftItem, TSelectMany_JoinLeftEnumerable, TSelectMany_JoinLeftEnumerator, TSelectMany_JoinRightItem, TSelectMany_JoinRightEnumerable, TSelectMany_JoinRightEnumerator>, JoinSpecificEnumerator<TOutItem, TSelectMany_JoinKeyItem, TSelectMany_JoinLeftItem, TSelectMany_JoinLeftEnumerator, TSelectMany_JoinRightItem, TSelectMany_JoinRightEnumerator>> SelectMany<TOutItem, TSelectMany_JoinKeyItem, TSelectMany_JoinLeftItem, TSelectMany_JoinLeftEnumerable, TSelectMany_JoinLeftEnumerator, TSelectMany_JoinRightItem, TSelectMany_JoinRightEnumerable, TSelectMany_JoinRightEnumerator>(this RangeEnumerable source, Func<int, JoinSpecificEnumerable<TOutItem, TSelectMany_JoinKeyItem, TSelectMany_JoinLeftItem, TSelectMany_JoinLeftEnumerable, TSelectMany_JoinLeftEnumerator, TSelectMany_JoinRightItem, TSelectMany_JoinRightEnumerable, TSelectMany_JoinRightEnumerator>> selector)
//        where TSelectMany_JoinLeftEnumerable : struct, IStructEnumerable<TSelectMany_JoinLeftItem, TSelectMany_JoinLeftEnumerator>
//        where TSelectMany_JoinLeftEnumerator : struct, IStructEnumerator<TSelectMany_JoinLeftItem>
//        where TSelectMany_JoinRightEnumerable : struct, IStructEnumerable<TSelectMany_JoinRightItem, TSelectMany_JoinRightEnumerator>
//        where TSelectMany_JoinRightEnumerator : struct, IStructEnumerator<TSelectMany_JoinRightItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, JoinSpecificEnumerable<TOutItem, TSelectMany_JoinKeyItem, TSelectMany_JoinLeftItem, TSelectMany_JoinLeftEnumerable, TSelectMany_JoinLeftEnumerator, TSelectMany_JoinRightItem, TSelectMany_JoinRightEnumerable, TSelectMany_JoinRightEnumerator>, JoinSpecificEnumerator<TOutItem, TSelectMany_JoinKeyItem, TSelectMany_JoinLeftItem, TSelectMany_JoinLeftEnumerator, TSelectMany_JoinRightItem, TSelectMany_JoinRightEnumerator>>(ref source, selector);

//        public static SelectManyEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, GroupJoinSpecificEnumerable<TOutItem, TSelectMany_GroupJoinKey, TSelectMany_GroupJoinLeftItem, TSelectMany_GroupJoinLeftEnumerable, TSelectMany_GroupJoinLeftEnumerator, TSelectMany_GroupJoinRightItem, TSelectMany_GroupJoinRightEnumerable, TSelectMany_GroupJoinRightEnumerator>, GroupJoinSpecificEnumerator<TOutItem, TSelectMany_GroupJoinKey, TSelectMany_GroupJoinLeftItem, TSelectMany_GroupJoinLeftEnumerator, TSelectMany_GroupJoinRightItem, TSelectMany_GroupJoinRightEnumerator>> SelectMany<TOutItem, TSelectMany_GroupJoinKey, TSelectMany_GroupJoinLeftItem, TSelectMany_GroupJoinLeftEnumerable, TSelectMany_GroupJoinLeftEnumerator, TSelectMany_GroupJoinRightItem, TSelectMany_GroupJoinRightEnumerable, TSelectMany_GroupJoinRightEnumerator>(this RangeEnumerable source, Func<int, GroupJoinSpecificEnumerable<TOutItem, TSelectMany_GroupJoinKey, TSelectMany_GroupJoinLeftItem, TSelectMany_GroupJoinLeftEnumerable, TSelectMany_GroupJoinLeftEnumerator, TSelectMany_GroupJoinRightItem, TSelectMany_GroupJoinRightEnumerable, TSelectMany_GroupJoinRightEnumerator>> selector)
//        where TSelectMany_GroupJoinLeftEnumerable : struct, IStructEnumerable<TSelectMany_GroupJoinLeftItem, TSelectMany_GroupJoinLeftEnumerator>
//        where TSelectMany_GroupJoinLeftEnumerator : struct, IStructEnumerator<TSelectMany_GroupJoinLeftItem>
//        where TSelectMany_GroupJoinRightEnumerable : struct, IStructEnumerable<TSelectMany_GroupJoinRightItem, TSelectMany_GroupJoinRightEnumerator>
//        where TSelectMany_GroupJoinRightEnumerator : struct, IStructEnumerator<TSelectMany_GroupJoinRightItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, GroupJoinSpecificEnumerable<TOutItem, TSelectMany_GroupJoinKey, TSelectMany_GroupJoinLeftItem, TSelectMany_GroupJoinLeftEnumerable, TSelectMany_GroupJoinLeftEnumerator, TSelectMany_GroupJoinRightItem, TSelectMany_GroupJoinRightEnumerable, TSelectMany_GroupJoinRightEnumerator>, GroupJoinSpecificEnumerator<TOutItem, TSelectMany_GroupJoinKey, TSelectMany_GroupJoinLeftItem, TSelectMany_GroupJoinLeftEnumerator, TSelectMany_GroupJoinRightItem, TSelectMany_GroupJoinRightEnumerator>>(ref source, selector);

//        public static SelectManyEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, GroupJoinDefaultEnumerable<TOutItem, TSelectMany_GroupJoinKey, TSelectMany_GroupJoinLeftItem, TSelectMany_GroupJoinLeftEnumerable, TSelectMany_GroupJoinLeftEnumerator, TSelectMany_GroupJoinRightItem, TSelectMany_GroupJoinRightEnumerable, TSelectMany_GroupJoinRightEnumerator>, GroupJoinDefaultEnumerator<TOutItem, TSelectMany_GroupJoinKey, TSelectMany_GroupJoinLeftItem, TSelectMany_GroupJoinLeftEnumerator, TSelectMany_GroupJoinRightItem, TSelectMany_GroupJoinRightEnumerator>> SelectMany<TOutItem, TSelectMany_GroupJoinKey, TSelectMany_GroupJoinLeftItem, TSelectMany_GroupJoinLeftEnumerable, TSelectMany_GroupJoinLeftEnumerator, TSelectMany_GroupJoinRightItem, TSelectMany_GroupJoinRightEnumerable, TSelectMany_GroupJoinRightEnumerator>(this RangeEnumerable source, Func<int, GroupJoinDefaultEnumerable<TOutItem, TSelectMany_GroupJoinKey, TSelectMany_GroupJoinLeftItem, TSelectMany_GroupJoinLeftEnumerable, TSelectMany_GroupJoinLeftEnumerator, TSelectMany_GroupJoinRightItem, TSelectMany_GroupJoinRightEnumerable, TSelectMany_GroupJoinRightEnumerator>> selector)
//        where TSelectMany_GroupJoinLeftEnumerable : struct, IStructEnumerable<TSelectMany_GroupJoinLeftItem, TSelectMany_GroupJoinLeftEnumerator>
//        where TSelectMany_GroupJoinLeftEnumerator : struct, IStructEnumerator<TSelectMany_GroupJoinLeftItem>
//        where TSelectMany_GroupJoinRightEnumerable : struct, IStructEnumerable<TSelectMany_GroupJoinRightItem, TSelectMany_GroupJoinRightEnumerator>
//        where TSelectMany_GroupJoinRightEnumerator : struct, IStructEnumerator<TSelectMany_GroupJoinRightItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, GroupJoinDefaultEnumerable<TOutItem, TSelectMany_GroupJoinKey, TSelectMany_GroupJoinLeftItem, TSelectMany_GroupJoinLeftEnumerable, TSelectMany_GroupJoinLeftEnumerator, TSelectMany_GroupJoinRightItem, TSelectMany_GroupJoinRightEnumerable, TSelectMany_GroupJoinRightEnumerator>, GroupJoinDefaultEnumerator<TOutItem, TSelectMany_GroupJoinKey, TSelectMany_GroupJoinLeftItem, TSelectMany_GroupJoinLeftEnumerator, TSelectMany_GroupJoinRightItem, TSelectMany_GroupJoinRightEnumerator>>(ref source, selector);

//        public static SelectManyCollectionEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, SelectManyCollectionIndexedEnumerable<TSelectManyInItem, TCollectionItem, TSelectManyCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>, SelectManyCollectionIndexedEnumerator<TSelectManyInItem, TCollectionItem, TSelectManyCollectionItem, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>> SelectMany<TSelectManyInItem, TOutItem, TCollectionItem, TSelectManyCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>(this RangeEnumerable source, Func<int, SelectManyCollectionIndexedEnumerable<TSelectManyInItem, TCollectionItem, TSelectManyCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectManyInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectManyInItem>
//        where TSelectManyProjectedEnumerable : struct, IStructEnumerable<TSelectManyCollectionItem, TSelectManyProjectedEnumerator>
//        where TSelectManyProjectedEnumerator : struct, IStructEnumerator<TSelectManyCollectionItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, SelectManyCollectionIndexedEnumerable<TSelectManyInItem, TCollectionItem, TSelectManyCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>, SelectManyCollectionIndexedEnumerator<TSelectManyInItem, TCollectionItem, TSelectManyCollectionItem, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionIndexedEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, SelectManyCollectionBridgeEnumerable<TSelectManyInItem, TCollectionItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyCollectionBridgeEnumerator<TSelectManyInItem, TCollectionItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>> SelectMany<TSelectManyInItem, TOutItem, TCollectionItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>(this RangeEnumerable source, Func<int, int, SelectManyCollectionBridgeEnumerable<TSelectManyInItem, TCollectionItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TSelectManyBridgeType : class
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectManyInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectManyInItem>
//        where TSelectManyProjectedEnumerator : struct, IStructEnumerator<TSelectManyCollectionItem>
//        where TSelectManyBridger : struct, IStructBridger<TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyProjectedEnumerator>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, SelectManyCollectionBridgeEnumerable<TSelectManyInItem, TCollectionItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyCollectionBridgeEnumerator<TSelectManyInItem, TCollectionItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionIndexedEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, SelectManyCollectionIndexedBridgeEnumerable<TSelectManyInItem, TCollectionItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyCollectionIndexedBridgeEnumerator<TSelectManyInItem, TCollectionItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>> SelectMany<TSelectManyInItem, TOutItem, TCollectionItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>(this RangeEnumerable source, Func<int, int, SelectManyCollectionIndexedBridgeEnumerable<TSelectManyInItem, TCollectionItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TSelectManyBridgeType : class
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectManyInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectManyInItem>
//        where TSelectManyProjectedEnumerator : struct, IStructEnumerator<TSelectManyCollectionItem>
//        where TSelectManyBridger : struct, IStructBridger<TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyProjectedEnumerator>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, SelectManyCollectionIndexedBridgeEnumerable<TSelectManyInItem, TCollectionItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyCollectionIndexedBridgeEnumerator<TSelectManyInItem, TCollectionItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionIndexedEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, SelectManyCollectionEnumerable<TSelectManyInItem, TCollectionItem, TSelectManyCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>, SelectManyCollectionEnumerator<TSelectManyInItem, TCollectionItem, TSelectManyCollectionItem, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>> SelectMany<TSelectManyInItem, TOutItem, TCollectionItem, TSelectManyCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>(this RangeEnumerable source, Func<int, int, SelectManyCollectionEnumerable<TSelectManyInItem, TCollectionItem, TSelectManyCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectManyInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectManyInItem>
//        where TSelectManyProjectedEnumerable : struct, IStructEnumerable<TSelectManyCollectionItem, TSelectManyProjectedEnumerator>
//        where TSelectManyProjectedEnumerator : struct, IStructEnumerator<TSelectManyCollectionItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, SelectManyCollectionEnumerable<TSelectManyInItem, TCollectionItem, TSelectManyCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>, SelectManyCollectionEnumerator<TSelectManyInItem, TCollectionItem, TSelectManyCollectionItem, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionIndexedEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, SelectManyCollectionIndexedEnumerable<TSelectManyInItem, TCollectionItem, TSelectManyCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>, SelectManyCollectionIndexedEnumerator<TSelectManyInItem, TCollectionItem, TSelectManyCollectionItem, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>> SelectMany<TSelectManyInItem, TOutItem, TCollectionItem, TSelectManyCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>(this RangeEnumerable source, Func<int, int, SelectManyCollectionIndexedEnumerable<TSelectManyInItem, TCollectionItem, TSelectManyCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectManyInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectManyInItem>
//        where TSelectManyProjectedEnumerable : struct, IStructEnumerable<TSelectManyCollectionItem, TSelectManyProjectedEnumerator>
//        where TSelectManyProjectedEnumerator : struct, IStructEnumerator<TSelectManyCollectionItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, SelectManyCollectionIndexedEnumerable<TSelectManyInItem, TCollectionItem, TSelectManyCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>, SelectManyCollectionIndexedEnumerator<TSelectManyInItem, TCollectionItem, TSelectManyCollectionItem, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionIndexedEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, ZipEnumerable<TCollectionItem, TZipFirstItem, TZipSecondItem, TZipFirstEnumerable, TZipFirstEnumerator, TZipSecondEnumerable, TZipSecondEnumerator>, ZipEnumerator<TCollectionItem, TZipFirstItem, TZipSecondItem, TZipFirstEnumerator, TZipSecondEnumerator>> SelectMany<TZipFirstItem, TZipSecondItem, TOutItem, TCollectionItem, TZipFirstEnumerable, TZipFirstEnumerator, TZipSecondEnumerable, TZipSecondEnumerator>(this RangeEnumerable source, Func<int, int, ZipEnumerable<TCollectionItem, TZipFirstItem, TZipSecondItem, TZipFirstEnumerable, TZipFirstEnumerator, TZipSecondEnumerable, TZipSecondEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TZipFirstEnumerable : struct, IStructEnumerable<TZipFirstItem, TZipFirstEnumerator>
//        where TZipFirstEnumerator : struct, IStructEnumerator<TZipFirstItem>
//        where TZipSecondEnumerable : struct, IStructEnumerable<TZipSecondItem, TZipSecondEnumerator>
//        where TZipSecondEnumerator : struct, IStructEnumerator<TZipSecondItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, ZipEnumerable<TCollectionItem, TZipFirstItem, TZipSecondItem, TZipFirstEnumerable, TZipFirstEnumerator, TZipSecondEnumerable, TZipSecondEnumerator>, ZipEnumerator<TCollectionItem, TZipFirstItem, TZipSecondItem, TZipFirstEnumerator, TZipSecondEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, ZipEnumerable<TCollectionItem, TZipFirstItem, TZipSecondItem, TZipFirstEnumerable, TZipFirstEnumerator, TZipSecondEnumerable, TZipSecondEnumerator>, ZipEnumerator<TCollectionItem, TZipFirstItem, TZipSecondItem, TZipFirstEnumerator, TZipSecondEnumerator>> SelectMany<TZipFirstItem, TZipSecondItem, TOutItem, TCollectionItem, TZipFirstEnumerable, TZipFirstEnumerator, TZipSecondEnumerable, TZipSecondEnumerator>(this RangeEnumerable source, Func<int, ZipEnumerable<TCollectionItem, TZipFirstItem, TZipSecondItem, TZipFirstEnumerable, TZipFirstEnumerator, TZipSecondEnumerable, TZipSecondEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TZipFirstEnumerable : struct, IStructEnumerable<TZipFirstItem, TZipFirstEnumerator>
//        where TZipFirstEnumerator : struct, IStructEnumerator<TZipFirstItem>
//        where TZipSecondEnumerable : struct, IStructEnumerable<TZipSecondItem, TZipSecondEnumerator>
//        where TZipSecondEnumerator : struct, IStructEnumerator<TZipSecondItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, ZipEnumerable<TCollectionItem, TZipFirstItem, TZipSecondItem, TZipFirstEnumerable, TZipFirstEnumerator, TZipSecondEnumerable, TZipSecondEnumerator>, ZipEnumerator<TCollectionItem, TZipFirstItem, TZipSecondItem, TZipFirstEnumerator, TZipSecondEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, SelectManyCollectionEnumerable<TSelectManyInItem, TCollectionItem, TSelectManyCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>, SelectManyCollectionEnumerator<TSelectManyInItem, TCollectionItem, TSelectManyCollectionItem, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>> SelectMany<TSelectManyInItem, TOutItem, TCollectionItem, TSelectManyCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>(this RangeEnumerable source, Func<int, SelectManyCollectionEnumerable<TSelectManyInItem, TCollectionItem, TSelectManyCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectManyInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectManyInItem>
//        where TSelectManyProjectedEnumerable : struct, IStructEnumerable<TSelectManyCollectionItem, TSelectManyProjectedEnumerator>
//        where TSelectManyProjectedEnumerator : struct, IStructEnumerator<TSelectManyCollectionItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, SelectManyCollectionEnumerable<TSelectManyInItem, TCollectionItem, TSelectManyCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>, SelectManyCollectionEnumerator<TSelectManyInItem, TCollectionItem, TSelectManyCollectionItem, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, SelectManyCollectionIndexedBridgeEnumerable<TSelectManyInItem, TCollectionItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyCollectionIndexedBridgeEnumerator<TSelectManyInItem, TCollectionItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>> SelectMany<TSelectManyInItem, TOutItem, TCollectionItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>(this RangeEnumerable source, Func<int, SelectManyCollectionIndexedBridgeEnumerable<TSelectManyInItem, TCollectionItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TSelectManyBridgeType : class
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectManyInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectManyInItem>
//        where TSelectManyProjectedEnumerator : struct, IStructEnumerator<TSelectManyCollectionItem>
//        where TSelectManyBridger : struct, IStructBridger<TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyProjectedEnumerator>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, SelectManyCollectionIndexedBridgeEnumerable<TSelectManyInItem, TCollectionItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyCollectionIndexedBridgeEnumerator<TSelectManyInItem, TCollectionItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, SelectManyCollectionBridgeEnumerable<TSelectManyInItem, TCollectionItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyCollectionBridgeEnumerator<TSelectManyInItem, TCollectionItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>> SelectMany<TSelectManyInItem, TOutItem, TCollectionItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>(this RangeEnumerable source, Func<int, SelectManyCollectionBridgeEnumerable<TSelectManyInItem, TCollectionItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TSelectManyBridgeType : class
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectManyInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectManyInItem>
//        where TSelectManyProjectedEnumerator : struct, IStructEnumerator<TSelectManyCollectionItem>
//        where TSelectManyBridger : struct, IStructBridger<TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyProjectedEnumerator>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, SelectManyCollectionBridgeEnumerable<TSelectManyInItem, TCollectionItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyCollectionBridgeEnumerator<TSelectManyInItem, TCollectionItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionIndexedEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, GroupJoinSpecificEnumerable<TCollectionItem, TSelectMany_GroupJoinKeyItem, TSelectMany_GroupJoinLeftItem, TSelectMany_GroupJoinLeftEnumerable, TSelectMany_GroupJoinLeftEnumerator, TSelectMany_GroupJoinRightItem, TSelectMany_GroupJoinRightEnumerable, TSelectMany_GroupJoinRightEnumerator>, GroupJoinSpecificEnumerator<TCollectionItem, TSelectMany_GroupJoinKeyItem, TSelectMany_GroupJoinLeftItem, TSelectMany_GroupJoinLeftEnumerator, TSelectMany_GroupJoinRightItem, TSelectMany_GroupJoinRightEnumerator>> SelectMany<TOutItem, TCollectionItem, TSelectMany_GroupJoinKeyItem, TSelectMany_GroupJoinLeftItem, TSelectMany_GroupJoinLeftEnumerable, TSelectMany_GroupJoinLeftEnumerator, TSelectMany_GroupJoinRightItem, TSelectMany_GroupJoinRightEnumerable, TSelectMany_GroupJoinRightEnumerator>(this RangeEnumerable source, Func<int, int, GroupJoinSpecificEnumerable<TCollectionItem, TSelectMany_GroupJoinKeyItem, TSelectMany_GroupJoinLeftItem, TSelectMany_GroupJoinLeftEnumerable, TSelectMany_GroupJoinLeftEnumerator, TSelectMany_GroupJoinRightItem, TSelectMany_GroupJoinRightEnumerable, TSelectMany_GroupJoinRightEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TSelectMany_GroupJoinLeftEnumerable : struct, IStructEnumerable<TSelectMany_GroupJoinLeftItem, TSelectMany_GroupJoinLeftEnumerator>
//        where TSelectMany_GroupJoinLeftEnumerator : struct, IStructEnumerator<TSelectMany_GroupJoinLeftItem>
//        where TSelectMany_GroupJoinRightEnumerable : struct, IStructEnumerable<TSelectMany_GroupJoinRightItem, TSelectMany_GroupJoinRightEnumerator>
//        where TSelectMany_GroupJoinRightEnumerator : struct, IStructEnumerator<TSelectMany_GroupJoinRightItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, GroupJoinSpecificEnumerable<TCollectionItem, TSelectMany_GroupJoinKeyItem, TSelectMany_GroupJoinLeftItem, TSelectMany_GroupJoinLeftEnumerable, TSelectMany_GroupJoinLeftEnumerator, TSelectMany_GroupJoinRightItem, TSelectMany_GroupJoinRightEnumerable, TSelectMany_GroupJoinRightEnumerator>, GroupJoinSpecificEnumerator<TCollectionItem, TSelectMany_GroupJoinKeyItem, TSelectMany_GroupJoinLeftItem, TSelectMany_GroupJoinLeftEnumerator, TSelectMany_GroupJoinRightItem, TSelectMany_GroupJoinRightEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionIndexedEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, JoinDefaultEnumerable<TCollectionItem, TSelectMany_JoinKeyItem, TSelectMany_JoinLeftItem, TSelectMany_JoinLeftEnumerable, TSelectMany_JoinLeftEnumerator, TSelectMany_JoinRightItem, TSelectMany_JoinRightEnumerable, TSelectMany_JoinRightEnumerator>, JoinDefaultEnumerator<TCollectionItem, TSelectMany_JoinKeyItem, TSelectMany_JoinLeftItem, TSelectMany_JoinLeftEnumerator, TSelectMany_JoinRightItem, TSelectMany_JoinRightEnumerator>> SelectMany<TOutItem, TCollectionItem, TSelectMany_JoinKeyItem, TSelectMany_JoinLeftItem, TSelectMany_JoinLeftEnumerable, TSelectMany_JoinLeftEnumerator, TSelectMany_JoinRightItem, TSelectMany_JoinRightEnumerable, TSelectMany_JoinRightEnumerator>(this RangeEnumerable source, Func<int, int, JoinDefaultEnumerable<TCollectionItem, TSelectMany_JoinKeyItem, TSelectMany_JoinLeftItem, TSelectMany_JoinLeftEnumerable, TSelectMany_JoinLeftEnumerator, TSelectMany_JoinRightItem, TSelectMany_JoinRightEnumerable, TSelectMany_JoinRightEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TSelectMany_JoinLeftEnumerable : struct, IStructEnumerable<TSelectMany_JoinLeftItem, TSelectMany_JoinLeftEnumerator>
//        where TSelectMany_JoinLeftEnumerator : struct, IStructEnumerator<TSelectMany_JoinLeftItem>
//        where TSelectMany_JoinRightEnumerable : struct, IStructEnumerable<TSelectMany_JoinRightItem, TSelectMany_JoinRightEnumerator>
//        where TSelectMany_JoinRightEnumerator : struct, IStructEnumerator<TSelectMany_JoinRightItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, JoinDefaultEnumerable<TCollectionItem, TSelectMany_JoinKeyItem, TSelectMany_JoinLeftItem, TSelectMany_JoinLeftEnumerable, TSelectMany_JoinLeftEnumerator, TSelectMany_JoinRightItem, TSelectMany_JoinRightEnumerable, TSelectMany_JoinRightEnumerator>, JoinDefaultEnumerator<TCollectionItem, TSelectMany_JoinKeyItem, TSelectMany_JoinLeftItem, TSelectMany_JoinLeftEnumerator, TSelectMany_JoinRightItem, TSelectMany_JoinRightEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionIndexedEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, JoinSpecificEnumerable<TCollectionItem, TSelectMany_JoinKeyItem, TSelectMany_JoinLeftItem, TSelectMany_JoinLeftEnumerable, TSelectMany_JoinLeftEnumerator, TSelectMany_JoinRightItem, TSelectMany_JoinRightEnumerable, TSelectMany_JoinRightEnumerator>, JoinSpecificEnumerator<TCollectionItem, TSelectMany_JoinKeyItem, TSelectMany_JoinLeftItem, TSelectMany_JoinLeftEnumerator, TSelectMany_JoinRightItem, TSelectMany_JoinRightEnumerator>> SelectMany<TOutItem, TCollectionItem, TSelectMany_JoinKeyItem, TSelectMany_JoinLeftItem, TSelectMany_JoinLeftEnumerable, TSelectMany_JoinLeftEnumerator, TSelectMany_JoinRightItem, TSelectMany_JoinRightEnumerable, TSelectMany_JoinRightEnumerator>(this RangeEnumerable source, Func<int, int, JoinSpecificEnumerable<TCollectionItem, TSelectMany_JoinKeyItem, TSelectMany_JoinLeftItem, TSelectMany_JoinLeftEnumerable, TSelectMany_JoinLeftEnumerator, TSelectMany_JoinRightItem, TSelectMany_JoinRightEnumerable, TSelectMany_JoinRightEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TSelectMany_JoinLeftEnumerable : struct, IStructEnumerable<TSelectMany_JoinLeftItem, TSelectMany_JoinLeftEnumerator>
//        where TSelectMany_JoinLeftEnumerator : struct, IStructEnumerator<TSelectMany_JoinLeftItem>
//        where TSelectMany_JoinRightEnumerable : struct, IStructEnumerable<TSelectMany_JoinRightItem, TSelectMany_JoinRightEnumerator>
//        where TSelectMany_JoinRightEnumerator : struct, IStructEnumerator<TSelectMany_JoinRightItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, JoinSpecificEnumerable<TCollectionItem, TSelectMany_JoinKeyItem, TSelectMany_JoinLeftItem, TSelectMany_JoinLeftEnumerable, TSelectMany_JoinLeftEnumerator, TSelectMany_JoinRightItem, TSelectMany_JoinRightEnumerable, TSelectMany_JoinRightEnumerator>, JoinSpecificEnumerator<TCollectionItem, TSelectMany_JoinKeyItem, TSelectMany_JoinLeftItem, TSelectMany_JoinLeftEnumerator, TSelectMany_JoinRightItem, TSelectMany_JoinRightEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, JoinDefaultEnumerable<TCollectionItem, TSelectMany_JoinKeyItem, TSelectMany_JoinLeftItem, TSelectMany_JoinLeftEnumerable, TSelectMany_JoinLeftEnumerator, TSelectMany_JoinRightItem, TSelectMany_JoinRightEnumerable, TSelectMany_JoinRightEnumerator>, JoinDefaultEnumerator<TCollectionItem, TSelectMany_JoinKeyItem, TSelectMany_JoinLeftItem, TSelectMany_JoinLeftEnumerator, TSelectMany_JoinRightItem, TSelectMany_JoinRightEnumerator>> SelectMany<TOutItem, TCollectionItem, TSelectMany_JoinKeyItem, TSelectMany_JoinLeftItem, TSelectMany_JoinLeftEnumerable, TSelectMany_JoinLeftEnumerator, TSelectMany_JoinRightItem, TSelectMany_JoinRightEnumerable, TSelectMany_JoinRightEnumerator>(this RangeEnumerable source, Func<int, JoinDefaultEnumerable<TCollectionItem, TSelectMany_JoinKeyItem, TSelectMany_JoinLeftItem, TSelectMany_JoinLeftEnumerable, TSelectMany_JoinLeftEnumerator, TSelectMany_JoinRightItem, TSelectMany_JoinRightEnumerable, TSelectMany_JoinRightEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TSelectMany_JoinLeftEnumerable : struct, IStructEnumerable<TSelectMany_JoinLeftItem, TSelectMany_JoinLeftEnumerator>
//        where TSelectMany_JoinLeftEnumerator : struct, IStructEnumerator<TSelectMany_JoinLeftItem>
//        where TSelectMany_JoinRightEnumerable : struct, IStructEnumerable<TSelectMany_JoinRightItem, TSelectMany_JoinRightEnumerator>
//        where TSelectMany_JoinRightEnumerator : struct, IStructEnumerator<TSelectMany_JoinRightItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, JoinDefaultEnumerable<TCollectionItem, TSelectMany_JoinKeyItem, TSelectMany_JoinLeftItem, TSelectMany_JoinLeftEnumerable, TSelectMany_JoinLeftEnumerator, TSelectMany_JoinRightItem, TSelectMany_JoinRightEnumerable, TSelectMany_JoinRightEnumerator>, JoinDefaultEnumerator<TCollectionItem, TSelectMany_JoinKeyItem, TSelectMany_JoinLeftItem, TSelectMany_JoinLeftEnumerator, TSelectMany_JoinRightItem, TSelectMany_JoinRightEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionIndexedEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, GroupJoinDefaultEnumerable<TCollectionItem, TSelectMany_GroupJoinKeyItem, TSelectMany_GroupJoinLeftItem, TSelectMany_GroupJoinLeftEnumerable, TSelectMany_GroupJoinLeftEnumerator, TSelectMany_GroupJoinRightItem, TSelectMany_GroupJoinRightEnumerable, TSelectMany_GroupJoinRightEnumerator>, GroupJoinDefaultEnumerator<TCollectionItem, TSelectMany_GroupJoinKeyItem, TSelectMany_GroupJoinLeftItem, TSelectMany_GroupJoinLeftEnumerator, TSelectMany_GroupJoinRightItem, TSelectMany_GroupJoinRightEnumerator>> SelectMany<TOutItem, TCollectionItem, TSelectMany_GroupJoinKeyItem, TSelectMany_GroupJoinLeftItem, TSelectMany_GroupJoinLeftEnumerable, TSelectMany_GroupJoinLeftEnumerator, TSelectMany_GroupJoinRightItem, TSelectMany_GroupJoinRightEnumerable, TSelectMany_GroupJoinRightEnumerator>(this RangeEnumerable source, Func<int, int, GroupJoinDefaultEnumerable<TCollectionItem, TSelectMany_GroupJoinKeyItem, TSelectMany_GroupJoinLeftItem, TSelectMany_GroupJoinLeftEnumerable, TSelectMany_GroupJoinLeftEnumerator, TSelectMany_GroupJoinRightItem, TSelectMany_GroupJoinRightEnumerable, TSelectMany_GroupJoinRightEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TSelectMany_GroupJoinLeftEnumerable : struct, IStructEnumerable<TSelectMany_GroupJoinLeftItem, TSelectMany_GroupJoinLeftEnumerator>
//        where TSelectMany_GroupJoinLeftEnumerator : struct, IStructEnumerator<TSelectMany_GroupJoinLeftItem>
//        where TSelectMany_GroupJoinRightEnumerable : struct, IStructEnumerable<TSelectMany_GroupJoinRightItem, TSelectMany_GroupJoinRightEnumerator>
//        where TSelectMany_GroupJoinRightEnumerator : struct, IStructEnumerator<TSelectMany_GroupJoinRightItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, GroupJoinDefaultEnumerable<TCollectionItem, TSelectMany_GroupJoinKeyItem, TSelectMany_GroupJoinLeftItem, TSelectMany_GroupJoinLeftEnumerable, TSelectMany_GroupJoinLeftEnumerator, TSelectMany_GroupJoinRightItem, TSelectMany_GroupJoinRightEnumerable, TSelectMany_GroupJoinRightEnumerator>, GroupJoinDefaultEnumerator<TCollectionItem, TSelectMany_GroupJoinKeyItem, TSelectMany_GroupJoinLeftItem, TSelectMany_GroupJoinLeftEnumerator, TSelectMany_GroupJoinRightItem, TSelectMany_GroupJoinRightEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, JoinSpecificEnumerable<TCollectionItem, TSelectMany_JoinKeyItem, TSelectMany_JoinLeftItem, TSelectMany_JoinLeftEnumerable, TSelectMany_JoinLeftEnumerator, TSelectMany_JoinRightItem, TSelectMany_JoinRightEnumerable, TSelectMany_JoinRightEnumerator>, JoinSpecificEnumerator<TCollectionItem, TSelectMany_JoinKeyItem, TSelectMany_JoinLeftItem, TSelectMany_JoinLeftEnumerator, TSelectMany_JoinRightItem, TSelectMany_JoinRightEnumerator>> SelectMany<TOutItem, TCollectionItem, TSelectMany_JoinKeyItem, TSelectMany_JoinLeftItem, TSelectMany_JoinLeftEnumerable, TSelectMany_JoinLeftEnumerator, TSelectMany_JoinRightItem, TSelectMany_JoinRightEnumerable, TSelectMany_JoinRightEnumerator>(this RangeEnumerable source, Func<int, JoinSpecificEnumerable<TCollectionItem, TSelectMany_JoinKeyItem, TSelectMany_JoinLeftItem, TSelectMany_JoinLeftEnumerable, TSelectMany_JoinLeftEnumerator, TSelectMany_JoinRightItem, TSelectMany_JoinRightEnumerable, TSelectMany_JoinRightEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TSelectMany_JoinLeftEnumerable : struct, IStructEnumerable<TSelectMany_JoinLeftItem, TSelectMany_JoinLeftEnumerator>
//        where TSelectMany_JoinLeftEnumerator : struct, IStructEnumerator<TSelectMany_JoinLeftItem>
//        where TSelectMany_JoinRightEnumerable : struct, IStructEnumerable<TSelectMany_JoinRightItem, TSelectMany_JoinRightEnumerator>
//        where TSelectMany_JoinRightEnumerator : struct, IStructEnumerator<TSelectMany_JoinRightItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, JoinSpecificEnumerable<TCollectionItem, TSelectMany_JoinKeyItem, TSelectMany_JoinLeftItem, TSelectMany_JoinLeftEnumerable, TSelectMany_JoinLeftEnumerator, TSelectMany_JoinRightItem, TSelectMany_JoinRightEnumerable, TSelectMany_JoinRightEnumerator>, JoinSpecificEnumerator<TCollectionItem, TSelectMany_JoinKeyItem, TSelectMany_JoinLeftItem, TSelectMany_JoinLeftEnumerator, TSelectMany_JoinRightItem, TSelectMany_JoinRightEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, GroupJoinSpecificEnumerable<TCollectionItem, TSelectMany_GroupJoinKeyItem, TSelectMany_GroupJoinLeftItem, TSelectMany_GroupJoinLeftEnumerable, TSelectMany_GroupJoinLeftEnumerator, TSelectMany_GroupJoinRightItem, TSelectMany_GroupJoinRightEnumerable, TSelectMany_GroupJoinRightEnumerator>, GroupJoinSpecificEnumerator<TCollectionItem, TSelectMany_GroupJoinKeyItem, TSelectMany_GroupJoinLeftItem, TSelectMany_GroupJoinLeftEnumerator, TSelectMany_GroupJoinRightItem, TSelectMany_GroupJoinRightEnumerator>> SelectMany<TOutItem, TCollectionItem, TSelectMany_GroupJoinKeyItem, TSelectMany_GroupJoinLeftItem, TSelectMany_GroupJoinLeftEnumerable, TSelectMany_GroupJoinLeftEnumerator, TSelectMany_GroupJoinRightItem, TSelectMany_GroupJoinRightEnumerable, TSelectMany_GroupJoinRightEnumerator>(this RangeEnumerable source, Func<int, GroupJoinSpecificEnumerable<TCollectionItem, TSelectMany_GroupJoinKeyItem, TSelectMany_GroupJoinLeftItem, TSelectMany_GroupJoinLeftEnumerable, TSelectMany_GroupJoinLeftEnumerator, TSelectMany_GroupJoinRightItem, TSelectMany_GroupJoinRightEnumerable, TSelectMany_GroupJoinRightEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TSelectMany_GroupJoinLeftEnumerable : struct, IStructEnumerable<TSelectMany_GroupJoinLeftItem, TSelectMany_GroupJoinLeftEnumerator>
//        where TSelectMany_GroupJoinLeftEnumerator : struct, IStructEnumerator<TSelectMany_GroupJoinLeftItem>
//        where TSelectMany_GroupJoinRightEnumerable : struct, IStructEnumerable<TSelectMany_GroupJoinRightItem, TSelectMany_GroupJoinRightEnumerator>
//        where TSelectMany_GroupJoinRightEnumerator : struct, IStructEnumerator<TSelectMany_GroupJoinRightItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, GroupJoinSpecificEnumerable<TCollectionItem, TSelectMany_GroupJoinKeyItem, TSelectMany_GroupJoinLeftItem, TSelectMany_GroupJoinLeftEnumerable, TSelectMany_GroupJoinLeftEnumerator, TSelectMany_GroupJoinRightItem, TSelectMany_GroupJoinRightEnumerable, TSelectMany_GroupJoinRightEnumerator>, GroupJoinSpecificEnumerator<TCollectionItem, TSelectMany_GroupJoinKeyItem, TSelectMany_GroupJoinLeftItem, TSelectMany_GroupJoinLeftEnumerator, TSelectMany_GroupJoinRightItem, TSelectMany_GroupJoinRightEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, GroupJoinDefaultEnumerable<TCollectionItem, TSelectMany_GroupJoinKeyItem, TSelectMany_GroupJoinLeftItem, TSelectMany_GroupJoinLeftEnumerable, TSelectMany_GroupJoinLeftEnumerator, TSelectMany_GroupJoinRightItem, TSelectMany_GroupJoinRightEnumerable, TSelectMany_GroupJoinRightEnumerator>, GroupJoinDefaultEnumerator<TCollectionItem, TSelectMany_GroupJoinKeyItem, TSelectMany_GroupJoinLeftItem, TSelectMany_GroupJoinLeftEnumerator, TSelectMany_GroupJoinRightItem, TSelectMany_GroupJoinRightEnumerator>> SelectMany<TOutItem, TCollectionItem, TSelectMany_GroupJoinKeyItem, TSelectMany_GroupJoinLeftItem, TSelectMany_GroupJoinLeftEnumerable, TSelectMany_GroupJoinLeftEnumerator, TSelectMany_GroupJoinRightItem, TSelectMany_GroupJoinRightEnumerable, TSelectMany_GroupJoinRightEnumerator>(this RangeEnumerable source, Func<int, GroupJoinDefaultEnumerable<TCollectionItem, TSelectMany_GroupJoinKeyItem, TSelectMany_GroupJoinLeftItem, TSelectMany_GroupJoinLeftEnumerable, TSelectMany_GroupJoinLeftEnumerator, TSelectMany_GroupJoinRightItem, TSelectMany_GroupJoinRightEnumerable, TSelectMany_GroupJoinRightEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TSelectMany_GroupJoinLeftEnumerable : struct, IStructEnumerable<TSelectMany_GroupJoinLeftItem, TSelectMany_GroupJoinLeftEnumerator>
//        where TSelectMany_GroupJoinLeftEnumerator : struct, IStructEnumerator<TSelectMany_GroupJoinLeftItem>
//        where TSelectMany_GroupJoinRightEnumerable : struct, IStructEnumerable<TSelectMany_GroupJoinRightItem, TSelectMany_GroupJoinRightEnumerator>
//        where TSelectMany_GroupJoinRightEnumerator : struct, IStructEnumerator<TSelectMany_GroupJoinRightItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, GroupJoinDefaultEnumerable<TCollectionItem, TSelectMany_GroupJoinKeyItem, TSelectMany_GroupJoinLeftItem, TSelectMany_GroupJoinLeftEnumerable, TSelectMany_GroupJoinLeftEnumerator, TSelectMany_GroupJoinRightItem, TSelectMany_GroupJoinRightEnumerable, TSelectMany_GroupJoinRightEnumerator>, GroupJoinDefaultEnumerator<TCollectionItem, TSelectMany_GroupJoinKeyItem, TSelectMany_GroupJoinLeftItem, TSelectMany_GroupJoinLeftEnumerator, TSelectMany_GroupJoinRightItem, TSelectMany_GroupJoinRightEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, OneItemDefaultEnumerable<TOutItem>, OneItemDefaultEnumerator<TOutItem>> SelectMany<TOutItem>(this RangeEnumerable source, Func<int, OneItemDefaultEnumerable<TOutItem>> selector)
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, OneItemDefaultEnumerable<TOutItem>, OneItemDefaultEnumerator<TOutItem>>(ref source, selector);

//        public static SelectManyEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, OneItemSpecificEnumerable<TOutItem>, OneItemSpecificEnumerator<TOutItem>> SelectMany<TOutItem>(this RangeEnumerable source, Func<int, OneItemSpecificEnumerable<TOutItem>> selector)
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, OneItemSpecificEnumerable<TOutItem>, OneItemSpecificEnumerator<TOutItem>>(ref source, selector);

//        public static SelectManyIndexedEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, OneItemDefaultEnumerable<TOutItem>, OneItemDefaultEnumerator<TOutItem>> SelectMany<TOutItem>(this RangeEnumerable source, Func<int, int, OneItemDefaultEnumerable<TOutItem>> selector)
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, OneItemDefaultEnumerable<TOutItem>, OneItemDefaultEnumerator<TOutItem>>(ref source, selector);

//        public static SelectManyIndexedEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, OneItemSpecificEnumerable<TOutItem>, OneItemSpecificEnumerator<TOutItem>> SelectMany<TOutItem>(this RangeEnumerable source, Func<int, int, OneItemSpecificEnumerable<TOutItem>> selector)
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, OneItemSpecificEnumerable<TOutItem>, OneItemSpecificEnumerator<TOutItem>>(ref source, selector);

//        public static SelectManyCollectionEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, OneItemDefaultEnumerable<TCollectionItem>, OneItemDefaultEnumerator<TCollectionItem>> SelectMany<TOutItem, TCollectionItem>(this RangeEnumerable source, Func<int, OneItemDefaultEnumerable<TCollectionItem>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, OneItemDefaultEnumerable<TCollectionItem>, OneItemDefaultEnumerator<TCollectionItem>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, OneItemSpecificEnumerable<TCollectionItem>, OneItemSpecificEnumerator<TCollectionItem>> SelectMany<TOutItem, TCollectionItem>(this RangeEnumerable source, Func<int, OneItemSpecificEnumerable<TCollectionItem>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, OneItemSpecificEnumerable<TCollectionItem>, OneItemSpecificEnumerator<TCollectionItem>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionIndexedEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, OneItemDefaultEnumerable<TCollectionItem>, OneItemDefaultEnumerator<TCollectionItem>> SelectMany<TOutItem, TCollectionItem>(this RangeEnumerable source, Func<int, int, OneItemDefaultEnumerable<TCollectionItem>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, OneItemDefaultEnumerable<TCollectionItem>, OneItemDefaultEnumerator<TCollectionItem>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionIndexedEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, OneItemSpecificEnumerable<TCollectionItem>, OneItemSpecificEnumerator<TCollectionItem>> SelectMany<TOutItem, TCollectionItem>(this RangeEnumerable source, Func<int, int, OneItemSpecificEnumerable<TCollectionItem>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, OneItemSpecificEnumerable<TCollectionItem>, OneItemSpecificEnumerator<TCollectionItem>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, OneItemDefaultOrderedEnumerable<TOutItem>, OneItemDefaultOrderedEnumerator<TOutItem>> SelectMany<TOutItem>(this RangeEnumerable source, Func<int, OneItemDefaultOrderedEnumerable<TOutItem>> selector)
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, OneItemDefaultOrderedEnumerable<TOutItem>, OneItemDefaultOrderedEnumerator<TOutItem>>(ref source, selector);

//        public static SelectManyEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, OneItemSpecificOrderedEnumerable<TOutItem>, OneItemSpecificOrderedEnumerator<TOutItem>> SelectMany<TOutItem>(this RangeEnumerable source, Func<int, OneItemSpecificOrderedEnumerable<TOutItem>> selector)
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, OneItemSpecificOrderedEnumerable<TOutItem>, OneItemSpecificOrderedEnumerator<TOutItem>>(ref source, selector);

//        public static SelectManyIndexedEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, OneItemDefaultOrderedEnumerable<TOutItem>, OneItemDefaultOrderedEnumerator<TOutItem>> SelectMany<TOutItem>(this RangeEnumerable source, Func<int, int, OneItemDefaultOrderedEnumerable<TOutItem>> selector)
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, OneItemDefaultOrderedEnumerable<TOutItem>, OneItemDefaultOrderedEnumerator<TOutItem>>(ref source, selector);

//        public static SelectManyIndexedEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, OneItemSpecificOrderedEnumerable<TOutItem>, OneItemSpecificOrderedEnumerator<TOutItem>> SelectMany<TOutItem>(this RangeEnumerable source, Func<int, int, OneItemSpecificOrderedEnumerable<TOutItem>> selector)
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, OneItemSpecificOrderedEnumerable<TOutItem>, OneItemSpecificOrderedEnumerator<TOutItem>>(ref source, selector);

//        public static SelectManyCollectionEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, OneItemDefaultOrderedEnumerable<TCollectionItem>, OneItemDefaultOrderedEnumerator<TCollectionItem>> SelectMany<TOutItem, TCollectionItem>(this RangeEnumerable source, Func<int, OneItemDefaultOrderedEnumerable<TCollectionItem>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, OneItemDefaultOrderedEnumerable<TCollectionItem>, OneItemDefaultOrderedEnumerator<TCollectionItem>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, OneItemSpecificOrderedEnumerable<TCollectionItem>, OneItemSpecificOrderedEnumerator<TCollectionItem>> SelectMany<TOutItem, TCollectionItem>(this RangeEnumerable source, Func<int, OneItemSpecificOrderedEnumerable<TCollectionItem>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, OneItemSpecificOrderedEnumerable<TCollectionItem>, OneItemSpecificOrderedEnumerator<TCollectionItem>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionIndexedEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, OneItemDefaultOrderedEnumerable<TCollectionItem>, OneItemDefaultOrderedEnumerator<TCollectionItem>> SelectMany<TOutItem, TCollectionItem>(this RangeEnumerable source, Func<int, int, OneItemDefaultOrderedEnumerable<TCollectionItem>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, OneItemDefaultOrderedEnumerable<TCollectionItem>, OneItemDefaultOrderedEnumerator<TCollectionItem>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionIndexedEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, OneItemSpecificOrderedEnumerable<TCollectionItem>, OneItemSpecificOrderedEnumerator<TCollectionItem>> SelectMany<TOutItem, TCollectionItem>(this RangeEnumerable source, Func<int, int, OneItemSpecificOrderedEnumerable<TCollectionItem>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, OneItemSpecificOrderedEnumerable<TCollectionItem>, OneItemSpecificOrderedEnumerator<TCollectionItem>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, SkipLastEnumerable<TOutItem, TSelectMany_SkipEnumerable, TSelectMany_SkipEnumerator>, SkipLastEnumerator<TOutItem, TSelectMany_SkipEnumerator>> SelectMany<TOutItem, TSelectMany_SkipEnumerable, TSelectMany_SkipEnumerator>(this RangeEnumerable source, Func<int, SkipLastEnumerable<TOutItem, TSelectMany_SkipEnumerable, TSelectMany_SkipEnumerator>> selector)
//        where TSelectMany_SkipEnumerable : struct, IStructEnumerable<TOutItem, TSelectMany_SkipEnumerator>
//        where TSelectMany_SkipEnumerator : struct, IStructEnumerator<TOutItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, SkipLastEnumerable<TOutItem, TSelectMany_SkipEnumerable, TSelectMany_SkipEnumerator>, SkipLastEnumerator<TOutItem, TSelectMany_SkipEnumerator>>(ref source, selector);

//        public static SelectManyEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, TakeLastEnumerable<TOutItem, TSelectMany_TakeEnumerable, TSelectMany_TakeEnumerator>, TakeLastEnumerator<TOutItem, TSelectMany_TakeEnumerator>> SelectMany<TOutItem, TSelectMany_TakeEnumerable, TSelectMany_TakeEnumerator>(this RangeEnumerable source, Func<int, TakeLastEnumerable<TOutItem, TSelectMany_TakeEnumerable, TSelectMany_TakeEnumerator>> selector)
//        where TSelectMany_TakeEnumerable : struct, IStructEnumerable<TOutItem, TSelectMany_TakeEnumerator>
//        where TSelectMany_TakeEnumerator : struct, IStructEnumerator<TOutItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, TakeLastEnumerable<TOutItem, TSelectMany_TakeEnumerable, TSelectMany_TakeEnumerator>, TakeLastEnumerator<TOutItem, TSelectMany_TakeEnumerator>>(ref source, selector);

//        public static SelectManyIndexedEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, SkipLastEnumerable<TOutItem, TSelectMany_SkipEnumerable, TSelectMany_SkipEnumerator>, SkipLastEnumerator<TOutItem, TSelectMany_SkipEnumerator>> SelectMany<TOutItem, TSelectMany_SkipEnumerable, TSelectMany_SkipEnumerator>(this RangeEnumerable source, Func<int, int, SkipLastEnumerable<TOutItem, TSelectMany_SkipEnumerable, TSelectMany_SkipEnumerator>> selector)
//        where TSelectMany_SkipEnumerable : struct, IStructEnumerable<TOutItem, TSelectMany_SkipEnumerator>
//        where TSelectMany_SkipEnumerator : struct, IStructEnumerator<TOutItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, SkipLastEnumerable<TOutItem, TSelectMany_SkipEnumerable, TSelectMany_SkipEnumerator>, SkipLastEnumerator<TOutItem, TSelectMany_SkipEnumerator>>(ref source, selector);

//        public static SelectManyIndexedEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, TakeLastEnumerable<TOutItem, TSelectMany_TakeEnumerable, TSelectMany_TakeEnumerator>, TakeLastEnumerator<TOutItem, TSelectMany_TakeEnumerator>> SelectMany<TOutItem, TSelectMany_TakeEnumerable, TSelectMany_TakeEnumerator>(this RangeEnumerable source, Func<int, int, TakeLastEnumerable<TOutItem, TSelectMany_TakeEnumerable, TSelectMany_TakeEnumerator>> selector)
//        where TSelectMany_TakeEnumerable : struct, IStructEnumerable<TOutItem, TSelectMany_TakeEnumerator>
//        where TSelectMany_TakeEnumerator : struct, IStructEnumerator<TOutItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, TakeLastEnumerable<TOutItem, TSelectMany_TakeEnumerable, TSelectMany_TakeEnumerator>, TakeLastEnumerator<TOutItem, TSelectMany_TakeEnumerator>>(ref source, selector);

//        public static SelectManyCollectionEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, SkipLastEnumerable<TCollectionItem, TSelectMany_SkipEnumerable, TSelectMany_SkipEnumerator>, SkipLastEnumerator<TCollectionItem, TSelectMany_SkipEnumerator>> SelectMany<TOutItem, TCollectionItem, TSelectMany_SkipEnumerable, TSelectMany_SkipEnumerator>(this RangeEnumerable source, Func<int, SkipLastEnumerable<TCollectionItem, TSelectMany_SkipEnumerable, TSelectMany_SkipEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TSelectMany_SkipEnumerable : struct, IStructEnumerable<TCollectionItem, TSelectMany_SkipEnumerator>
//        where TSelectMany_SkipEnumerator : struct, IStructEnumerator<TCollectionItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, SkipLastEnumerable<TCollectionItem, TSelectMany_SkipEnumerable, TSelectMany_SkipEnumerator>, SkipLastEnumerator<TCollectionItem, TSelectMany_SkipEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, TakeLastEnumerable<TCollectionItem, TSelectMany_TakeEnumerable, TSelectMany_TakeEnumerator>, TakeLastEnumerator<TCollectionItem, TSelectMany_TakeEnumerator>> SelectMany<TOutItem, TCollectionItem, TSelectMany_TakeEnumerable, TSelectMany_TakeEnumerator>(this RangeEnumerable source, Func<int, TakeLastEnumerable<TCollectionItem, TSelectMany_TakeEnumerable, TSelectMany_TakeEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TSelectMany_TakeEnumerable : struct, IStructEnumerable<TCollectionItem, TSelectMany_TakeEnumerator>
//        where TSelectMany_TakeEnumerator : struct, IStructEnumerator<TCollectionItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, TakeLastEnumerable<TCollectionItem, TSelectMany_TakeEnumerable, TSelectMany_TakeEnumerator>, TakeLastEnumerator<TCollectionItem, TSelectMany_TakeEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionIndexedEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, SkipLastEnumerable<TCollectionItem, TSelectMany_SkipEnumerable, TSelectMany_SkipEnumerator>, SkipLastEnumerator<TCollectionItem, TSelectMany_SkipEnumerator>> SelectMany<TOutItem, TCollectionItem, TSelectMany_SkipEnumerable, TSelectMany_SkipEnumerator>(this RangeEnumerable source, Func<int, int, SkipLastEnumerable<TCollectionItem, TSelectMany_SkipEnumerable, TSelectMany_SkipEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TSelectMany_SkipEnumerable : struct, IStructEnumerable<TCollectionItem, TSelectMany_SkipEnumerator>
//        where TSelectMany_SkipEnumerator : struct, IStructEnumerator<TCollectionItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, SkipLastEnumerable<TCollectionItem, TSelectMany_SkipEnumerable, TSelectMany_SkipEnumerator>, SkipLastEnumerator<TCollectionItem, TSelectMany_SkipEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionIndexedEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, TakeLastEnumerable<TCollectionItem, TSelectMany_TakeEnumerable, TSelectMany_TakeEnumerator>, TakeLastEnumerator<TCollectionItem, TSelectMany_TakeEnumerator>> SelectMany<TOutItem, TCollectionItem, TSelectMany_TakeEnumerable, TSelectMany_TakeEnumerator>(this RangeEnumerable source, Func<int, int, TakeLastEnumerable<TCollectionItem, TSelectMany_TakeEnumerable, TSelectMany_TakeEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TSelectMany_TakeEnumerable : struct, IStructEnumerable<TCollectionItem, TSelectMany_TakeEnumerator>
//        where TSelectMany_TakeEnumerator : struct, IStructEnumerator<TCollectionItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, TakeLastEnumerable<TCollectionItem, TSelectMany_TakeEnumerable, TSelectMany_TakeEnumerator>, TakeLastEnumerator<TCollectionItem, TSelectMany_TakeEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, AppendEnumerable<TOutItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>, AppendEnumerator<TOutItem, TDefaultIfEmptyInnerEnumerator>> SelectMany<TOutItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>(this RangeEnumerable source, Func<int, AppendEnumerable<TOutItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>> selector)
//        where TDefaultIfEmptyInnerEnumerable : struct, IStructEnumerable<TOutItem, TDefaultIfEmptyInnerEnumerator>
//        where TDefaultIfEmptyInnerEnumerator : struct, IStructEnumerator<TOutItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, AppendEnumerable<TOutItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>, AppendEnumerator<TOutItem, TDefaultIfEmptyInnerEnumerator>>(ref source, selector);

//        public static SelectManyEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, PrependEnumerable<TOutItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>, PrependEnumerator<TOutItem, TDefaultIfEmptyInnerEnumerator>> SelectMany<TOutItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>(this RangeEnumerable source, Func<int, PrependEnumerable<TOutItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>> selector)
//        where TDefaultIfEmptyInnerEnumerable : struct, IStructEnumerable<TOutItem, TDefaultIfEmptyInnerEnumerator>
//        where TDefaultIfEmptyInnerEnumerator : struct, IStructEnumerator<TOutItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, PrependEnumerable<TOutItem, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>, PrependEnumerator<TOutItem, TDefaultIfEmptyInnerEnumerator>>(ref source, selector);

//        public static SelectManyIndexedEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, AppendEnumerable<TOutItem, TSelectMany_TakeEnumerable, TSelectMany_TakeEnumerator>, AppendEnumerator<TOutItem, TSelectMany_TakeEnumerator>> SelectMany<TOutItem, TSelectMany_TakeEnumerable, TSelectMany_TakeEnumerator>(this RangeEnumerable source, Func<int, int, AppendEnumerable<TOutItem, TSelectMany_TakeEnumerable, TSelectMany_TakeEnumerator>> selector)
//        where TSelectMany_TakeEnumerable : struct, IStructEnumerable<TOutItem, TSelectMany_TakeEnumerator>
//        where TSelectMany_TakeEnumerator : struct, IStructEnumerator<TOutItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, AppendEnumerable<TOutItem, TSelectMany_TakeEnumerable, TSelectMany_TakeEnumerator>, AppendEnumerator<TOutItem, TSelectMany_TakeEnumerator>>(ref source, selector);

//        public static SelectManyIndexedEnumerable<int, TOutItem, RangeEnumerable, RangeEnumerator, PrependEnumerable<TOutItem, TSelectMany_TakeEnumerable, TSelectMany_TakeEnumerator>, PrependEnumerator<TOutItem, TSelectMany_TakeEnumerator>> SelectMany<TOutItem, TSelectMany_TakeEnumerable, TSelectMany_TakeEnumerator>(this RangeEnumerable source, Func<int, int, PrependEnumerable<TOutItem, TSelectMany_TakeEnumerable, TSelectMany_TakeEnumerator>> selector)
//        where TSelectMany_TakeEnumerable : struct, IStructEnumerable<TOutItem, TSelectMany_TakeEnumerator>
//        where TSelectMany_TakeEnumerator : struct, IStructEnumerator<TOutItem>
//        => CommonImplementation.SelectMany<int, TOutItem, RangeEnumerable, RangeEnumerator, PrependEnumerable<TOutItem, TSelectMany_TakeEnumerable, TSelectMany_TakeEnumerator>, PrependEnumerator<TOutItem, TSelectMany_TakeEnumerator>>(ref source, selector);

//        public static SelectManyCollectionEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, AppendEnumerable<TCollectionItem, TSelectMany_TakeEnumerable, TSelectMany_TakeEnumerator>, AppendEnumerator<TCollectionItem, TSelectMany_TakeEnumerator>> SelectMany<TOutItem, TCollectionItem, TSelectMany_TakeEnumerable, TSelectMany_TakeEnumerator>(this RangeEnumerable source, Func<int, AppendEnumerable<TCollectionItem, TSelectMany_TakeEnumerable, TSelectMany_TakeEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TSelectMany_TakeEnumerable : struct, IStructEnumerable<TCollectionItem, TSelectMany_TakeEnumerator>
//        where TSelectMany_TakeEnumerator : struct, IStructEnumerator<TCollectionItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, AppendEnumerable<TCollectionItem, TSelectMany_TakeEnumerable, TSelectMany_TakeEnumerator>, AppendEnumerator<TCollectionItem, TSelectMany_TakeEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, PrependEnumerable<TCollectionItem, TSelectMany_TakeEnumerable, TSelectMany_TakeEnumerator>, PrependEnumerator<TCollectionItem, TSelectMany_TakeEnumerator>> SelectMany<TOutItem, TCollectionItem, TSelectMany_TakeEnumerable, TSelectMany_TakeEnumerator>(this RangeEnumerable source, Func<int, PrependEnumerable<TCollectionItem, TSelectMany_TakeEnumerable, TSelectMany_TakeEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TSelectMany_TakeEnumerable : struct, IStructEnumerable<TCollectionItem, TSelectMany_TakeEnumerator>
//        where TSelectMany_TakeEnumerator : struct, IStructEnumerator<TCollectionItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, PrependEnumerable<TCollectionItem, TSelectMany_TakeEnumerable, TSelectMany_TakeEnumerator>, PrependEnumerator<TCollectionItem, TSelectMany_TakeEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionIndexedEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, AppendEnumerable<TCollectionItem, TSelectMany_TakeEnumerable, TSelectMany_TakeEnumerator>, AppendEnumerator<TCollectionItem, TSelectMany_TakeEnumerator>> SelectMany<TOutItem, TCollectionItem, TSelectMany_TakeEnumerable, TSelectMany_TakeEnumerator>(this RangeEnumerable source, Func<int, int, AppendEnumerable<TCollectionItem, TSelectMany_TakeEnumerable, TSelectMany_TakeEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TSelectMany_TakeEnumerable : struct, IStructEnumerable<TCollectionItem, TSelectMany_TakeEnumerator>
//        where TSelectMany_TakeEnumerator : struct, IStructEnumerator<TCollectionItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, AppendEnumerable<TCollectionItem, TSelectMany_TakeEnumerable, TSelectMany_TakeEnumerator>, AppendEnumerator<TCollectionItem, TSelectMany_TakeEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionIndexedEnumerable<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, PrependEnumerable<TCollectionItem, TSelectMany_TakeEnumerable, TSelectMany_TakeEnumerator>, PrependEnumerator<TCollectionItem, TSelectMany_TakeEnumerator>> SelectMany<TOutItem, TCollectionItem, TSelectMany_TakeEnumerable, TSelectMany_TakeEnumerator>(this RangeEnumerable source, Func<int, int, PrependEnumerable<TCollectionItem, TSelectMany_TakeEnumerable, TSelectMany_TakeEnumerator>> collectionSelector, Func<int, TCollectionItem, TOutItem> resultSelector)
//        where TSelectMany_TakeEnumerable : struct, IStructEnumerable<TCollectionItem, TSelectMany_TakeEnumerator>
//        where TSelectMany_TakeEnumerator : struct, IStructEnumerator<TCollectionItem>
//        => CommonImplementation.SelectMany<int, TOutItem, TCollectionItem, RangeEnumerable, RangeEnumerator, PrependEnumerable<TCollectionItem, TSelectMany_TakeEnumerable, TSelectMany_TakeEnumerator>, PrependEnumerator<TCollectionItem, TSelectMany_TakeEnumerator>>(ref source, collectionSelector, resultSelector);

//        public static SelectManyEnumerable<int, int, RangeEnumerable, RangeEnumerator, RangeEnumerable, RangeEnumerator> SelectMany(this RangeEnumerable source, Func<int, RangeEnumerable> selector)
//        => CommonImplementation.SelectMany<int, int, RangeEnumerable, RangeEnumerator, RangeEnumerable, RangeEnumerator>(ref source, selector);

//        public static SelectManyEnumerable<int, int, RangeEnumerable, RangeEnumerator, ReverseRangeEnumerable, ReverseRangeEnumerator> SelectMany(this RangeEnumerable source, Func<int, ReverseRangeEnumerable> selector)
//        => CommonImplementation.SelectMany<int, int, RangeEnumerable, RangeEnumerator, ReverseRangeEnumerable, ReverseRangeEnumerator>(ref source, selector);

//        public static SelectManyIndexedEnumerable<int, int, RangeEnumerable, RangeEnumerator, RangeEnumerable, RangeEnumerator> SelectMany(this RangeEnumerable source, Func<int, int, RangeEnumerable> selector)
//        => CommonImplementation.SelectMany<int, int, RangeEnumerable, RangeEnumerator, RangeEnumerable, RangeEnumerator>(ref source, selector);

//        public static SelectManyIndexedEnumerable<int, int, RangeEnumerable, RangeEnumerator, ReverseRangeEnumerable, ReverseRangeEnumerator> SelectMany(this RangeEnumerable source, Func<int, int, ReverseRangeEnumerable> selector)
//        => CommonImplementation.SelectMany<int, int, RangeEnumerable, RangeEnumerator, ReverseRangeEnumerable, ReverseRangeEnumerator>(ref source, selector);

//        public static SelectManyCollectionEnumerable<int, TOutItem, int, RangeEnumerable, RangeEnumerator, RangeEnumerable, RangeEnumerator> SelectMany<TOutItem>(this RangeEnumerable source, Func<int, RangeEnumerable> collectionSelector, Func<int, int, TOutItem> resultSelector)
//        => CommonImplementation.SelectMany<int, TOutItem, int, RangeEnumerable, RangeEnumerator, RangeEnumerable, RangeEnumerator>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionEnumerable<int, TOutItem, int, RangeEnumerable, RangeEnumerator, ReverseRangeEnumerable, ReverseRangeEnumerator> SelectMany<TOutItem>(this RangeEnumerable source, Func<int, ReverseRangeEnumerable> collectionSelector, Func<int, int, TOutItem> resultSelector)
//        => CommonImplementation.SelectMany<int, TOutItem, int, RangeEnumerable, RangeEnumerator, ReverseRangeEnumerable, ReverseRangeEnumerator>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionIndexedEnumerable<int, TOutItem, int, RangeEnumerable, RangeEnumerator, RangeEnumerable, RangeEnumerator> SelectMany<TOutItem>(this RangeEnumerable source, Func<int, int, RangeEnumerable> collectionSelector, Func<int, int, TOutItem> resultSelector)
//        => CommonImplementation.SelectMany<int, TOutItem, int, RangeEnumerable, RangeEnumerator, RangeEnumerable, RangeEnumerator>(ref source, collectionSelector, resultSelector);

//        public static SelectManyCollectionIndexedEnumerable<int, TOutItem, int, RangeEnumerable, RangeEnumerator, ReverseRangeEnumerable, ReverseRangeEnumerator> SelectMany<TOutItem>(this RangeEnumerable source, Func<int, int, ReverseRangeEnumerable> collectionSelector, Func<int, int, TOutItem> resultSelector)
//        => CommonImplementation.SelectMany<int, TOutItem, int, RangeEnumerable, RangeEnumerator, ReverseRangeEnumerable, ReverseRangeEnumerator>(ref source, collectionSelector, resultSelector);

//        // SequenceEqual

//        public static bool SequenceEqual(this RangeEnumerable source, IEnumerable<int> second)
//=> CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator>(ref source, second, null);

//        public static bool SequenceEqual(this RangeEnumerable source, IEnumerable<int> second, IEqualityComparer<int> comparer)
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator>(ref source, second, comparer);

//        public static bool SequenceEqual<TDictionaryValue>(this RangeEnumerable source, Dictionary<int, TDictionaryValue>.KeyCollection second)
//        => CommonImplementation.SequenceEqual<int, TDictionaryValue, RangeEnumerable, RangeEnumerator>(ref source, second, null);

//        public static bool SequenceEqual<TDictionaryValue>(this RangeEnumerable source, Dictionary<int, TDictionaryValue>.KeyCollection second, IEqualityComparer<int> comparer)
//        => CommonImplementation.SequenceEqual<int, TDictionaryValue, RangeEnumerable, RangeEnumerator>(ref source, second, comparer);

//        public static bool SequenceEqual<TDictionaryKey>(this RangeEnumerable source, Dictionary<TDictionaryKey, int>.ValueCollection second)
//        => CommonImplementation.SequenceEqual<int, TDictionaryKey, RangeEnumerable, RangeEnumerator>(ref source, second, null);

//        public static bool SequenceEqual<TDictionaryKey>(this RangeEnumerable source, Dictionary<TDictionaryKey, int>.ValueCollection second, IEqualityComparer<int> comparer)
//        => CommonImplementation.SequenceEqual<int, TDictionaryKey, RangeEnumerable, RangeEnumerator>(ref source, second, comparer);

//        public static bool SequenceEqual(this RangeEnumerable source, HashSet<int> second)
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator>(ref source, second, null);

//        public static bool SequenceEqual(this RangeEnumerable source, HashSet<int> second, IEqualityComparer<int> comparer)
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator>(ref source, second, comparer);

//        public static bool SequenceEqual(this RangeEnumerable source, LinkedList<int> second)
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator>(ref source, second, null);

//        public static bool SequenceEqual(this RangeEnumerable source, LinkedList<int> second, IEqualityComparer<int> comparer)
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator>(ref source, second, comparer);

//        public static bool SequenceEqual(this RangeEnumerable source, List<int> second)
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator>(ref source, second, null);

//        public static bool SequenceEqual(this RangeEnumerable source, List<int> second, IEqualityComparer<int> comparer)
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator>(ref source, second, comparer);

//        public static bool SequenceEqual(this RangeEnumerable source, Queue<int> second)
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator>(ref source, second, null);

//        public static bool SequenceEqual(this RangeEnumerable source, Queue<int> second, IEqualityComparer<int> comparer)
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator>(ref source, second, comparer);

//        public static bool SequenceEqual<TDictionaryValue>(this RangeEnumerable source, SortedDictionary<int, TDictionaryValue>.KeyCollection second)
//        => CommonImplementation.SequenceEqual<int, TDictionaryValue, RangeEnumerable, RangeEnumerator>(ref source, second, null);

//        public static bool SequenceEqual<TDictionaryValue>(this RangeEnumerable source, SortedDictionary<int, TDictionaryValue>.KeyCollection second, IEqualityComparer<int> comparer)
//        => CommonImplementation.SequenceEqual<int, TDictionaryValue, RangeEnumerable, RangeEnumerator>(ref source, second, comparer);

//        public static bool SequenceEqual<TDictionaryKey>(this RangeEnumerable source, SortedDictionary<TDictionaryKey, int>.ValueCollection second)
//        => CommonImplementation.SequenceEqual<int, TDictionaryKey, RangeEnumerable, RangeEnumerator>(ref source, second, null);

//        public static bool SequenceEqual<TDictionaryKey>(this RangeEnumerable source, SortedDictionary<TDictionaryKey, int>.ValueCollection second, IEqualityComparer<int> comparer)
//        => CommonImplementation.SequenceEqual<int, TDictionaryKey, RangeEnumerable, RangeEnumerator>(ref source, second, comparer);

//        public static bool SequenceEqual(this RangeEnumerable source, SortedSet<int> second)
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator>(ref source, second, null);

//        public static bool SequenceEqual(this RangeEnumerable source, SortedSet<int> second, IEqualityComparer<int> comparer)
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator>(ref source, second, comparer);

//        public static bool SequenceEqual(this RangeEnumerable source, Stack<int> second)
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator>(ref source, second, null);

//        public static bool SequenceEqual(this RangeEnumerable source, Stack<int> second, IEqualityComparer<int> comparer)
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator>(ref source, second, comparer);

//        public static bool SequenceEqual(this RangeEnumerable source, int[] second)
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator>(ref source, second, null);

//        public static bool SequenceEqual(this RangeEnumerable source, int[] second, IEqualityComparer<int> comparer)
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator>(ref source, second, comparer);

//        public static bool SequenceEqual(this RangeEnumerable source, BoxedEnumerable<int> second)
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, BoxedEnumerable<int>, BoxedEnumerator<int>>(ref source, ref second, null);

//        public static bool SequenceEqual(this RangeEnumerable source, BoxedEnumerable<int> second, IEqualityComparer<int> comparer)
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, BoxedEnumerable<int>, BoxedEnumerator<int>>(ref source, ref second, comparer);

//        public static bool SequenceEqual<TIdentityBridgeType, TIdentityBridger, TIdentityEnumerator>(this RangeEnumerable source, IdentityEnumerable<int, TIdentityBridgeType, TIdentityBridger, TIdentityEnumerator> second)
//        where TIdentityBridgeType : class
//        where TIdentityEnumerator : struct, IStructEnumerator<int>
//        where TIdentityBridger : struct, IStructBridger<int, TIdentityBridgeType, TIdentityEnumerator>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, TIdentityBridgeType, TIdentityBridger, TIdentityEnumerator>, TIdentityEnumerator>(ref source, ref second, null);


//        public static bool SequenceEqual<TIdentityBridgeType, TIdentityBridger, TIdentityEnumerator>(this RangeEnumerable source, IdentityEnumerable<int, TIdentityBridgeType, TIdentityBridger, TIdentityEnumerator> second, IEqualityComparer<int> comparer)
//        where TIdentityBridgeType : class
//        where TIdentityEnumerator : struct, IStructEnumerator<int>
//        where TIdentityBridger : struct, IStructBridger<int, TIdentityBridgeType, TIdentityEnumerator>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, TIdentityBridgeType, TIdentityBridger, TIdentityEnumerator>, TIdentityEnumerator>(ref source, ref second, comparer);

//        public static bool SequenceEqual<TCastInItem, TCastInnerEnumerable, TCastInnerEnumerator>(this RangeEnumerable source, CastEnumerable<TCastInItem, int, TCastInnerEnumerable, TCastInnerEnumerator> second)
//        where TCastInnerEnumerable : struct, IStructEnumerable<TCastInItem, TCastInnerEnumerator>
//        where TCastInnerEnumerator : struct, IStructEnumerator<TCastInItem>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, CastEnumerable<TCastInItem, int, TCastInnerEnumerable, TCastInnerEnumerator>, CastEnumerator<TCastInItem, int, TCastInnerEnumerator>>(ref source, ref second, null);

//        public static bool SequenceEqual<TCastInItem, TCastInnerEnumerable, TCastInnerEnumerator>(this RangeEnumerable source, CastEnumerable<TCastInItem, int, TCastInnerEnumerable, TCastInnerEnumerator> second, IEqualityComparer<int> comparer)
//        where TCastInnerEnumerable : struct, IStructEnumerable<TCastInItem, TCastInnerEnumerator>
//        where TCastInnerEnumerator : struct, IStructEnumerator<TCastInItem>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, CastEnumerable<TCastInItem, int, TCastInnerEnumerable, TCastInnerEnumerator>, CastEnumerator<TCastInItem, int, TCastInnerEnumerator>>(ref source, ref second, comparer);

//        public static bool SequenceEqual<TConcatFirstEnumerable, TConcatFirstEnumerator, TConcatSecondEnumerable, TConcatSecondEnumerator>(this RangeEnumerable source, ConcatEnumerable<int, TConcatFirstEnumerable, TConcatFirstEnumerator, TConcatSecondEnumerable, TConcatSecondEnumerator> second)
//        where TConcatFirstEnumerable : struct, IStructEnumerable<int, TConcatFirstEnumerator>
//        where TConcatFirstEnumerator : struct, IStructEnumerator<int>
//        where TConcatSecondEnumerable : struct, IStructEnumerable<int, TConcatSecondEnumerator>
//        where TConcatSecondEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, ConcatEnumerable<int, TConcatFirstEnumerable, TConcatFirstEnumerator, TConcatSecondEnumerable, TConcatSecondEnumerator>, ConcatEnumerator<int, TConcatFirstEnumerator, TConcatSecondEnumerator>>(ref source, ref second, null);

//        public static bool SequenceEqual<TConcatFirstEnumerable, TConcatFirstEnumerator, TConcatSecondEnumerable, TConcatSecondEnumerator>(this RangeEnumerable source, ConcatEnumerable<int, TConcatFirstEnumerable, TConcatFirstEnumerator, TConcatSecondEnumerable, TConcatSecondEnumerator> second, IEqualityComparer<int> comparer)
//        where TConcatFirstEnumerable : struct, IStructEnumerable<int, TConcatFirstEnumerator>
//        where TConcatFirstEnumerator : struct, IStructEnumerator<int>
//        where TConcatSecondEnumerable : struct, IStructEnumerable<int, TConcatSecondEnumerator>
//        where TConcatSecondEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, ConcatEnumerable<int, TConcatFirstEnumerable, TConcatFirstEnumerator, TConcatSecondEnumerable, TConcatSecondEnumerator>, ConcatEnumerator<int, TConcatFirstEnumerator, TConcatSecondEnumerator>>(ref source, ref second, comparer);

//        public static bool SequenceEqual<TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>(this RangeEnumerable source, DefaultIfEmptyDefaultEnumerable<int, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator> second)
//        where TDefaultIfEmptyInnerEnumerable : struct, IStructEnumerable<int, TDefaultIfEmptyInnerEnumerator>
//        where TDefaultIfEmptyInnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, DefaultIfEmptyDefaultEnumerable<int, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>, DefaultIfEmptyDefaultEnumerator<int, TDefaultIfEmptyInnerEnumerator>>(ref source, ref second, null);

//        public static bool SequenceEqual<TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>(this RangeEnumerable source, DefaultIfEmptyDefaultEnumerable<int, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator> second, IEqualityComparer<int> comparer)
//        where TDefaultIfEmptyInnerEnumerable : struct, IStructEnumerable<int, TDefaultIfEmptyInnerEnumerator>
//        where TDefaultIfEmptyInnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, DefaultIfEmptyDefaultEnumerable<int, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>, DefaultIfEmptyDefaultEnumerator<int, TDefaultIfEmptyInnerEnumerator>>(ref source, ref second, comparer);

//        public static bool SequenceEqual<TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>(this RangeEnumerable source, DefaultIfEmptySpecificEnumerable<int, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator> second)
//        where TDefaultIfEmptyInnerEnumerable : struct, IStructEnumerable<int, TDefaultIfEmptyInnerEnumerator>
//        where TDefaultIfEmptyInnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, DefaultIfEmptySpecificEnumerable<int, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>, DefaultIfEmptySpecificEnumerator<int, TDefaultIfEmptyInnerEnumerator>>(ref source, ref second, null);

//        public static bool SequenceEqual<TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>(this RangeEnumerable source, DefaultIfEmptySpecificEnumerable<int, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator> second, IEqualityComparer<int> comparer)
//        where TDefaultIfEmptyInnerEnumerable : struct, IStructEnumerable<int, TDefaultIfEmptyInnerEnumerator>
//        where TDefaultIfEmptyInnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, DefaultIfEmptySpecificEnumerable<int, TDefaultIfEmptyInnerEnumerable, TDefaultIfEmptyInnerEnumerator>, DefaultIfEmptySpecificEnumerator<int, TDefaultIfEmptyInnerEnumerator>>(ref source, ref second, comparer);

//        public static bool SequenceEqual(this RangeEnumerable source, EmptyEnumerable<int> second)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            if (second.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(second));

//            return source.InnerCount == 0;
//        }
        

//        public static bool SequenceEqual(this RangeEnumerable source, EmptyEnumerable<int> second, IEqualityComparer<int> comparer)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            if (second.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(second));

//            return source.InnerCount == 0;
//        }

//        public static bool SequenceEqual<TOfTypeInItem, TOfTypeInnerEnumerable, TOfTypeInnerEnumerator>(this RangeEnumerable source, OfTypeEnumerable<TOfTypeInItem, int, TOfTypeInnerEnumerable, TOfTypeInnerEnumerator> second)
//        where TOfTypeInnerEnumerable : struct, IStructEnumerable<TOfTypeInItem, TOfTypeInnerEnumerator>
//        where TOfTypeInnerEnumerator : struct, IStructEnumerator<TOfTypeInItem>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, OfTypeEnumerable<TOfTypeInItem, int, TOfTypeInnerEnumerable, TOfTypeInnerEnumerator>, OfTypeEnumerator<TOfTypeInItem, int, TOfTypeInnerEnumerator>>(ref source, ref second, null);

//        public static bool SequenceEqual<TOfTypeInItem, TOfTypeInnerEnumerable, TOfTypeInnerEnumerator>(this RangeEnumerable source, OfTypeEnumerable<TOfTypeInItem, int, TOfTypeInnerEnumerable, TOfTypeInnerEnumerator> second, IEqualityComparer<int> comparer)
//        where TOfTypeInnerEnumerable : struct, IStructEnumerable<TOfTypeInItem, TOfTypeInnerEnumerator>
//        where TOfTypeInnerEnumerator : struct, IStructEnumerator<TOfTypeInItem>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, OfTypeEnumerable<TOfTypeInItem, int, TOfTypeInnerEnumerable, TOfTypeInnerEnumerator>, OfTypeEnumerator<TOfTypeInItem, int, TOfTypeInnerEnumerator>>(ref source, ref second, comparer);

//        public static bool SequenceEqual(this RangeEnumerable source, RepeatEnumerable<int> second)
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, RepeatEnumerable<int>, RepeatEnumerator<int>>(ref source, ref second, null);

//        public static bool SequenceEqual(this RangeEnumerable source, RepeatEnumerable<int> second, IEqualityComparer<int> comparer)
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, RepeatEnumerable<int>, RepeatEnumerator<int>>(ref source, ref second, comparer);

//        public static bool SequenceEqual<TSelectInItem, TSelectInnerEnumerable, TSelectInnerEnumerator>(this RangeEnumerable source, SelectEnumerable<TSelectInItem, int, TSelectInnerEnumerable, TSelectInnerEnumerator> second)
//        where TSelectInnerEnumerable : struct, IStructEnumerable<TSelectInItem, TSelectInnerEnumerator>
//        where TSelectInnerEnumerator : struct, IStructEnumerator<TSelectInItem>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, SelectEnumerable<TSelectInItem, int, TSelectInnerEnumerable, TSelectInnerEnumerator>, SelectEnumerator<TSelectInItem, int, TSelectInnerEnumerator>>(ref source, ref second, null);

//        public static bool SequenceEqual<TSelectInItem, TSelectInnerEnumerable, TSelectInnerEnumerator>(this RangeEnumerable source, SelectEnumerable<TSelectInItem, int, TSelectInnerEnumerable, TSelectInnerEnumerator> second, IEqualityComparer<int> comparer)
//        where TSelectInnerEnumerable : struct, IStructEnumerable<TSelectInItem, TSelectInnerEnumerator>
//        where TSelectInnerEnumerator : struct, IStructEnumerator<TSelectInItem>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, SelectEnumerable<TSelectInItem, int, TSelectInnerEnumerable, TSelectInnerEnumerator>, SelectEnumerator<TSelectInItem, int, TSelectInnerEnumerator>>(ref source, ref second, comparer);

//        public static bool SequenceEqual<TSelectInItem, TSelectInnerEnumerable, TSelectInnerEnumerator>(this RangeEnumerable source, SelectIndexedEnumerable<TSelectInItem, int, TSelectInnerEnumerable, TSelectInnerEnumerator> second)
//        where TSelectInnerEnumerable : struct, IStructEnumerable<TSelectInItem, TSelectInnerEnumerator>
//        where TSelectInnerEnumerator : struct, IStructEnumerator<TSelectInItem>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, SelectIndexedEnumerable<TSelectInItem, int, TSelectInnerEnumerable, TSelectInnerEnumerator>, SelectIndexedEnumerator<TSelectInItem, int, TSelectInnerEnumerator>>(ref source, ref second, null);

//        public static bool SequenceEqual<TSelectInItem, TSelectInnerEnumerable, TSelectInnerEnumerator>(this RangeEnumerable source, SelectIndexedEnumerable<TSelectInItem, int, TSelectInnerEnumerable, TSelectInnerEnumerator> second, IEqualityComparer<int> comparer)
//        where TSelectInnerEnumerable : struct, IStructEnumerable<TSelectInItem, TSelectInnerEnumerator>
//        where TSelectInnerEnumerator : struct, IStructEnumerator<TSelectInItem>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, SelectIndexedEnumerable<TSelectInItem, int, TSelectInnerEnumerable, TSelectInnerEnumerator>, SelectIndexedEnumerator<TSelectInItem, int, TSelectInnerEnumerator>>(ref source, ref second, comparer);

//        public static bool SequenceEqual<TSelectManyInItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyBridgeEnumerable<TSelectManyInItem, int, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator> second)
//        where TSelectManyBridgeType : class
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectManyInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectManyInItem>
//        where TSelectManyProjectedEnumerator : struct, IStructEnumerator<int>
//        where TSelectManyBridger : struct, IStructBridger<int, TSelectManyBridgeType, TSelectManyProjectedEnumerator>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, SelectManyBridgeEnumerable<TSelectManyInItem, int, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyBridgeEnumerator<TSelectManyInItem, int, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>>(ref source, ref second, null);

//        public static bool SequenceEqual<TSelectManyInItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyBridgeEnumerable<TSelectManyInItem, int, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator> second, IEqualityComparer<int> comparer)
//        where TSelectManyBridgeType : class
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectManyInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectManyInItem>
//        where TSelectManyProjectedEnumerator : struct, IStructEnumerator<int>
//        where TSelectManyBridger : struct, IStructBridger<int, TSelectManyBridgeType, TSelectManyProjectedEnumerator>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, SelectManyBridgeEnumerable<TSelectManyInItem, int, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyBridgeEnumerator<TSelectManyInItem, int, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>>(ref source, ref second, comparer);

//        public static bool SequenceEqual<TSelectManyInItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyIndexedBridgeEnumerable<TSelectManyInItem, int, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator> second)
//        where TSelectManyBridgeType : class
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectManyInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectManyInItem>
//        where TSelectManyProjectedEnumerator : struct, IStructEnumerator<int>
//        where TSelectManyBridger : struct, IStructBridger<int, TSelectManyBridgeType, TSelectManyProjectedEnumerator>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, SelectManyIndexedBridgeEnumerable<TSelectManyInItem, int, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyIndexedBridgeEnumerator<TSelectManyInItem, int, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>>(ref source, ref second, null);

//        public static bool SequenceEqual<TSelectManyInItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyIndexedBridgeEnumerable<TSelectManyInItem, int, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator> second, IEqualityComparer<int> comparer)
//        where TSelectManyBridgeType : class
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectManyInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectManyInItem>
//        where TSelectManyProjectedEnumerator : struct, IStructEnumerator<int>
//        where TSelectManyBridger : struct, IStructBridger<int, TSelectManyBridgeType, TSelectManyProjectedEnumerator>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, SelectManyIndexedBridgeEnumerable<TSelectManyInItem, int, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyIndexedBridgeEnumerator<TSelectManyInItem, int, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>>(ref source, ref second, comparer);

//        public static bool SequenceEqual<TSelectManyInItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyEnumerable<TSelectManyInItem, int, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator> second)
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectManyInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectManyInItem>
//        where TSelectManyProjectedEnumerable : struct, IStructEnumerable<int, TSelectManyProjectedEnumerator>
//        where TSelectManyProjectedEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, SelectManyEnumerable<TSelectManyInItem, int, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>, SelectManyEnumerator<TSelectManyInItem, int, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>>(ref source, ref second, null);

//        public static bool SequenceEqual<TSelectManyInItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyEnumerable<TSelectManyInItem, int, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator> second, IEqualityComparer<int> comparer)
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectManyInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectManyInItem>
//        where TSelectManyProjectedEnumerable : struct, IStructEnumerable<int, TSelectManyProjectedEnumerator>
//        where TSelectManyProjectedEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, SelectManyEnumerable<TSelectManyInItem, int, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>, SelectManyEnumerator<TSelectManyInItem, int, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>>(ref source, ref second, comparer);

//        public static bool SequenceEqual<TSelectManyInItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyIndexedEnumerable<TSelectManyInItem, int, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator> second)
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectManyInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectManyInItem>
//        where TSelectManyProjectedEnumerable : struct, IStructEnumerable<int, TSelectManyProjectedEnumerator>
//        where TSelectManyProjectedEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, SelectManyIndexedEnumerable<TSelectManyInItem, int, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>, SelectManyIndexedEnumerator<TSelectManyInItem, int, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>>(ref source, ref second, null);

//        public static bool SequenceEqual<TSelectManyInItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyIndexedEnumerable<TSelectManyInItem, int, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator> second, IEqualityComparer<int> comparer)
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectManyInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectManyInItem>
//        where TSelectManyProjectedEnumerable : struct, IStructEnumerable<int, TSelectManyProjectedEnumerator>
//        where TSelectManyProjectedEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, SelectManyIndexedEnumerable<TSelectManyInItem, int, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>, SelectManyIndexedEnumerator<TSelectManyInItem, int, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>>(ref source, ref second, comparer);

//        public static bool SequenceEqual<TSelectManyInItem, TCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyCollectionBridgeEnumerable<TSelectManyInItem, int, TCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator> second)
//        where TSelectManyBridgeType : class
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectManyInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectManyInItem>
//        where TSelectManyProjectedEnumerator : struct, IStructEnumerator<TCollectionItem>
//        where TSelectManyBridger : struct, IStructBridger<TCollectionItem, TSelectManyBridgeType, TSelectManyProjectedEnumerator>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, SelectManyCollectionBridgeEnumerable<TSelectManyInItem, int, TCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyCollectionBridgeEnumerator<TSelectManyInItem, int, TCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>>(ref source, ref second, null);

//        public static bool SequenceEqual<TSelectManyInItem, TCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyCollectionBridgeEnumerable<TSelectManyInItem, int, TCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator> second, IEqualityComparer<int> comparer)
//        where TSelectManyBridgeType : class
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectManyInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectManyInItem>
//        where TSelectManyProjectedEnumerator : struct, IStructEnumerator<TCollectionItem>
//        where TSelectManyBridger : struct, IStructBridger<TCollectionItem, TSelectManyBridgeType, TSelectManyProjectedEnumerator>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, SelectManyCollectionBridgeEnumerable<TSelectManyInItem, int, TCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyCollectionBridgeEnumerator<TSelectManyInItem, int, TCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>>(ref source, ref second, comparer);

//        public static bool SequenceEqual<TSelectManyInItem, TCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyCollectionIndexedBridgeEnumerable<TSelectManyInItem, int, TCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator> second)
//        where TSelectManyBridgeType : class
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectManyInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectManyInItem>
//        where TSelectManyProjectedEnumerator : struct, IStructEnumerator<TCollectionItem>
//        where TSelectManyBridger : struct, IStructBridger<TCollectionItem, TSelectManyBridgeType, TSelectManyProjectedEnumerator>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, SelectManyCollectionIndexedBridgeEnumerable<TSelectManyInItem, int, TCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyCollectionIndexedBridgeEnumerator<TSelectManyInItem, int, TCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>>(ref source, ref second, null);

//        public static bool SequenceEqual<TSelectManyInItem, TCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyCollectionIndexedBridgeEnumerable<TSelectManyInItem, int, TCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator> second, IEqualityComparer<int> comparer)
//        where TSelectManyBridgeType : class
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectManyInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectManyInItem>
//        where TSelectManyProjectedEnumerator : struct, IStructEnumerator<TCollectionItem>
//        where TSelectManyBridger : struct, IStructBridger<TCollectionItem, TSelectManyBridgeType, TSelectManyProjectedEnumerator>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, SelectManyCollectionIndexedBridgeEnumerable<TSelectManyInItem, int, TCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyCollectionIndexedBridgeEnumerator<TSelectManyInItem, int, TCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>>(ref source, ref second, comparer);

//        public static bool SequenceEqual<TSelectManyInItem, TCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyCollectionEnumerable<TSelectManyInItem, int, TCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator> second)
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectManyInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectManyInItem>
//        where TSelectManyProjectedEnumerable : struct, IStructEnumerable<TCollectionItem, TSelectManyProjectedEnumerator>
//        where TSelectManyProjectedEnumerator : struct, IStructEnumerator<TCollectionItem>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, SelectManyCollectionEnumerable<TSelectManyInItem, int, TCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>, SelectManyCollectionEnumerator<TSelectManyInItem, int, TCollectionItem, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>>(ref source, ref second, null);

//        public static bool SequenceEqual<TSelectManyInItem, TCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyCollectionEnumerable<TSelectManyInItem, int, TCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator> second, IEqualityComparer<int> comparer)
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectManyInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectManyInItem>
//        where TSelectManyProjectedEnumerable : struct, IStructEnumerable<TCollectionItem, TSelectManyProjectedEnumerator>
//        where TSelectManyProjectedEnumerator : struct, IStructEnumerator<TCollectionItem>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, SelectManyCollectionEnumerable<TSelectManyInItem, int, TCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>, SelectManyCollectionEnumerator<TSelectManyInItem, int, TCollectionItem, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>>(ref source, ref second, comparer);

//        public static bool SequenceEqual<TSelectManyInItem, TCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyCollectionIndexedEnumerable<TSelectManyInItem, int, TCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator> second)
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectManyInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectManyInItem>
//        where TSelectManyProjectedEnumerable : struct, IStructEnumerable<TCollectionItem, TSelectManyProjectedEnumerator>
//        where TSelectManyProjectedEnumerator : struct, IStructEnumerator<TCollectionItem>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, SelectManyCollectionIndexedEnumerable<TSelectManyInItem, int, TCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>, SelectManyCollectionIndexedEnumerator<TSelectManyInItem, int, TCollectionItem, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>>(ref source, ref second, null);

//        public static bool SequenceEqual<TSelectManyInItem, TCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyCollectionIndexedEnumerable<TSelectManyInItem, int, TCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator> second, IEqualityComparer<int> comparer)
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectManyInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectManyInItem>
//        where TSelectManyProjectedEnumerable : struct, IStructEnumerable<TCollectionItem, TSelectManyProjectedEnumerator>
//        where TSelectManyProjectedEnumerator : struct, IStructEnumerator<TCollectionItem>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, SelectManyCollectionIndexedEnumerable<TSelectManyInItem, int, TCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>, SelectManyCollectionIndexedEnumerator<TSelectManyInItem, int, TCollectionItem, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>>(ref source, ref second, comparer);

//        public static bool SequenceEqual<TSkipInnerEnumerable, TSkipInnerEnumerator>(this RangeEnumerable source, SkipEnumerable<int, TSkipInnerEnumerable, TSkipInnerEnumerator> second)
//        where TSkipInnerEnumerable : struct, IStructEnumerable<int, TSkipInnerEnumerator>
//        where TSkipInnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, SkipEnumerable<int, TSkipInnerEnumerable, TSkipInnerEnumerator>, SkipEnumerator<int, TSkipInnerEnumerator>>(ref source, ref second, null);

//        public static bool SequenceEqual<TSkipInnerEnumerable, TSkipInnerEnumerator>(this RangeEnumerable source, SkipEnumerable<int, TSkipInnerEnumerable, TSkipInnerEnumerator> second, IEqualityComparer<int> comparer)
//        where TSkipInnerEnumerable : struct, IStructEnumerable<int, TSkipInnerEnumerator>
//        where TSkipInnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, SkipEnumerable<int, TSkipInnerEnumerable, TSkipInnerEnumerator>, SkipEnumerator<int, TSkipInnerEnumerator>>(ref source, ref second, comparer);

//        public static bool SequenceEqual<TSkipInnerEnumerable, TSkipInnerEnumerator>(this RangeEnumerable source, SkipWhileEnumerable<int, TSkipInnerEnumerable, TSkipInnerEnumerator> second)
//        where TSkipInnerEnumerable : struct, IStructEnumerable<int, TSkipInnerEnumerator>
//        where TSkipInnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, SkipWhileEnumerable<int, TSkipInnerEnumerable, TSkipInnerEnumerator>, SkipWhileEnumerator<int, TSkipInnerEnumerator>>(ref source, ref second, null);

//        public static bool SequenceEqual<TSkipInnerEnumerable, TSkipInnerEnumerator>(this RangeEnumerable source, SkipWhileEnumerable<int, TSkipInnerEnumerable, TSkipInnerEnumerator> second, IEqualityComparer<int> comparer)
//        where TSkipInnerEnumerable : struct, IStructEnumerable<int, TSkipInnerEnumerator>
//        where TSkipInnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, SkipWhileEnumerable<int, TSkipInnerEnumerable, TSkipInnerEnumerator>, SkipWhileEnumerator<int, TSkipInnerEnumerator>>(ref source, ref second, comparer);

//        public static bool SequenceEqual<TSkipInnerEnumerable, TSkipInnerEnumerator>(this RangeEnumerable source, SkipWhileIndexedEnumerable<int, TSkipInnerEnumerable, TSkipInnerEnumerator> second)
//        where TSkipInnerEnumerable : struct, IStructEnumerable<int, TSkipInnerEnumerator>
//        where TSkipInnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, SkipWhileIndexedEnumerable<int, TSkipInnerEnumerable, TSkipInnerEnumerator>, SkipWhileIndexedEnumerator<int, TSkipInnerEnumerator>>(ref source, ref second, null);

//        public static bool SequenceEqual<TSkipInnerEnumerable, TSkipInnerEnumerator>(this RangeEnumerable source, SkipWhileIndexedEnumerable<int, TSkipInnerEnumerable, TSkipInnerEnumerator> second, IEqualityComparer<int> comparer)
//        where TSkipInnerEnumerable : struct, IStructEnumerable<int, TSkipInnerEnumerator>
//        where TSkipInnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, SkipWhileIndexedEnumerable<int, TSkipInnerEnumerable, TSkipInnerEnumerator>, SkipWhileIndexedEnumerator<int, TSkipInnerEnumerator>>(ref source, ref second, comparer);

//        public static bool SequenceEqual<TTakeInnerEnumerable, TTakeInnerEnumerator>(this RangeEnumerable source, TakeEnumerable<int, TTakeInnerEnumerable, TTakeInnerEnumerator> second)
//        where TTakeInnerEnumerable : struct, IStructEnumerable<int, TTakeInnerEnumerator>
//        where TTakeInnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, TakeEnumerable<int, TTakeInnerEnumerable, TTakeInnerEnumerator>, TakeEnumerator<int, TTakeInnerEnumerator>>(ref source, ref second, null);

//        public static bool SequenceEqual<TTakeInnerEnumerable, TTakeInnerEnumerator>(this RangeEnumerable source, TakeEnumerable<int, TTakeInnerEnumerable, TTakeInnerEnumerator> second, IEqualityComparer<int> comparer)
//        where TTakeInnerEnumerable : struct, IStructEnumerable<int, TTakeInnerEnumerator>
//        where TTakeInnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, TakeEnumerable<int, TTakeInnerEnumerable, TTakeInnerEnumerator>, TakeEnumerator<int, TTakeInnerEnumerator>>(ref source, ref second, comparer);

//        public static bool SequenceEqual<TTakeInnerEnumerable, TTakeInnerEnumerator>(this RangeEnumerable source, TakeWhileEnumerable<int, TTakeInnerEnumerable, TTakeInnerEnumerator> second)
//        where TTakeInnerEnumerable : struct, IStructEnumerable<int, TTakeInnerEnumerator>
//        where TTakeInnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, TakeWhileEnumerable<int, TTakeInnerEnumerable, TTakeInnerEnumerator>, TakeWhileEnumerator<int, TTakeInnerEnumerator>>(ref source, ref second, null);

//        public static bool SequenceEqual<TTakeInnerEnumerable, TTakeInnerEnumerator>(this RangeEnumerable source, TakeWhileEnumerable<int, TTakeInnerEnumerable, TTakeInnerEnumerator> second, IEqualityComparer<int> comparer)
//        where TTakeInnerEnumerable : struct, IStructEnumerable<int, TTakeInnerEnumerator>
//        where TTakeInnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, TakeWhileEnumerable<int, TTakeInnerEnumerable, TTakeInnerEnumerator>, TakeWhileEnumerator<int, TTakeInnerEnumerator>>(ref source, ref second, comparer);

//        public static bool SequenceEqual<TTakeInnerEnumerable, TTakeInnerEnumerator>(this RangeEnumerable source, TakeWhileIndexedEnumerable<int, TTakeInnerEnumerable, TTakeInnerEnumerator> second)
//        where TTakeInnerEnumerable : struct, IStructEnumerable<int, TTakeInnerEnumerator>
//        where TTakeInnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, TakeWhileIndexedEnumerable<int, TTakeInnerEnumerable, TTakeInnerEnumerator>, TakeWhileIndexedEnumerator<int, TTakeInnerEnumerator>>(ref source, ref second, null);

//        public static bool SequenceEqual<TTakeInnerEnumerable, TTakeInnerEnumerator>(this RangeEnumerable source, TakeWhileIndexedEnumerable<int, TTakeInnerEnumerable, TTakeInnerEnumerator> second, IEqualityComparer<int> comparer)
//        where TTakeInnerEnumerable : struct, IStructEnumerable<int, TTakeInnerEnumerator>
//        where TTakeInnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, TakeWhileIndexedEnumerable<int, TTakeInnerEnumerable, TTakeInnerEnumerator>, TakeWhileIndexedEnumerator<int, TTakeInnerEnumerator>>(ref source, ref second, comparer);

//        public static bool SequenceEqual<TWhereInnerEnumerable, TWhereInnerEnumerator>(this RangeEnumerable source, WhereEnumerable<int, TWhereInnerEnumerable, TWhereInnerEnumerator> second)
//        where TWhereInnerEnumerable : struct, IStructEnumerable<int, TWhereInnerEnumerator>
//        where TWhereInnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, WhereEnumerable<int, TWhereInnerEnumerable, TWhereInnerEnumerator>, WhereEnumerator<int, TWhereInnerEnumerator>>(ref source, ref second, null);

//        public static bool SequenceEqual<TWhereInnerEnumerable, TWhereInnerEnumerator>(this RangeEnumerable source, WhereEnumerable<int, TWhereInnerEnumerable, TWhereInnerEnumerator> second, IEqualityComparer<int> comparer)
//        where TWhereInnerEnumerable : struct, IStructEnumerable<int, TWhereInnerEnumerator>
//        where TWhereInnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, WhereEnumerable<int, TWhereInnerEnumerable, TWhereInnerEnumerator>, WhereEnumerator<int, TWhereInnerEnumerator>>(ref source, ref second, comparer);

//        public static bool SequenceEqual<TWhereInnerEnumerable, TWhereInnerEnumerator>(this RangeEnumerable source, WhereIndexedEnumerable<int, TWhereInnerEnumerable, TWhereInnerEnumerator> second)
//        where TWhereInnerEnumerable : struct, IStructEnumerable<int, TWhereInnerEnumerator>
//        where TWhereInnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, WhereIndexedEnumerable<int, TWhereInnerEnumerable, TWhereInnerEnumerator>, WhereIndexedEnumerator<int, TWhereInnerEnumerator>>(ref source, ref second, null);

//        public static bool SequenceEqual<TWhereInnerEnumerable, TWhereInnerEnumerator>(this RangeEnumerable source, WhereIndexedEnumerable<int, TWhereInnerEnumerable, TWhereInnerEnumerator> second, IEqualityComparer<int> comparer)
//        where TWhereInnerEnumerable : struct, IStructEnumerable<int, TWhereInnerEnumerator>
//        where TWhereInnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, WhereIndexedEnumerable<int, TWhereInnerEnumerable, TWhereInnerEnumerator>, WhereIndexedEnumerator<int, TWhereInnerEnumerator>>(ref source, ref second, comparer);

//        public static bool SequenceEqual<TZipFirsint, TZipSecondItem, TZipFirstEnumerable, TZipFirstEnumerator, TZipSecondEnumerable, TZipSecondEnumerator>(this RangeEnumerable source, ZipEnumerable<int, TZipFirsint, TZipSecondItem, TZipFirstEnumerable, TZipFirstEnumerator, TZipSecondEnumerable, TZipSecondEnumerator> second)
//        where TZipFirstEnumerable : struct, IStructEnumerable<TZipFirsint, TZipFirstEnumerator>
//        where TZipFirstEnumerator : struct, IStructEnumerator<TZipFirsint>
//        where TZipSecondEnumerable : struct, IStructEnumerable<TZipSecondItem, TZipSecondEnumerator>
//        where TZipSecondEnumerator : struct, IStructEnumerator<TZipSecondItem>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, ZipEnumerable<int, TZipFirsint, TZipSecondItem, TZipFirstEnumerable, TZipFirstEnumerator, TZipSecondEnumerable, TZipSecondEnumerator>, ZipEnumerator<int, TZipFirsint, TZipSecondItem, TZipFirstEnumerator, TZipSecondEnumerator>>(ref source, ref second, null);

//        public static bool SequenceEqual<TZipFirsint, TZipSecondItem, TZipFirstEnumerable, TZipFirstEnumerator, TZipSecondEnumerable, TZipSecondEnumerator>(this RangeEnumerable source, ZipEnumerable<int, TZipFirsint, TZipSecondItem, TZipFirstEnumerable, TZipFirstEnumerator, TZipSecondEnumerable, TZipSecondEnumerator> second, IEqualityComparer<int> comparer)
//        where TZipFirstEnumerable : struct, IStructEnumerable<TZipFirsint, TZipFirstEnumerator>
//        where TZipFirstEnumerator : struct, IStructEnumerator<TZipFirsint>
//        where TZipSecondEnumerable : struct, IStructEnumerable<TZipSecondItem, TZipSecondEnumerator>
//        where TZipSecondEnumerator : struct, IStructEnumerator<TZipSecondItem>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, ZipEnumerable<int, TZipFirsint, TZipSecondItem, TZipFirstEnumerable, TZipFirstEnumerator, TZipSecondEnumerable, TZipSecondEnumerator>, ZipEnumerator<int, TZipFirsint, TZipSecondItem, TZipFirstEnumerator, TZipSecondEnumerator>>(ref source, ref second, comparer);

//        public static bool SequenceEqual<TSelectInnerItem, TSelectInnerEnumerable, TSelectInnerEnumerator, TSelectProjection>(this RangeEnumerable source, SelectSelectEnumerable<int, TSelectInnerItem, TSelectInnerEnumerable, TSelectInnerEnumerator, TSelectProjection> second)
//        where TSelectInnerEnumerable : struct, IStructEnumerable<TSelectInnerItem, TSelectInnerEnumerator>
//        where TSelectInnerEnumerator : struct, IStructEnumerator<TSelectInnerItem>
//        where TSelectProjection : struct, IStructProjection<int, TSelectInnerItem>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, SelectSelectEnumerable<int, TSelectInnerItem, TSelectInnerEnumerable, TSelectInnerEnumerator, TSelectProjection>, SelectSelectEnumerator<int, TSelectInnerItem, TSelectInnerEnumerator, TSelectProjection>>(ref source, ref second, null);

//        public static bool SequenceEqual<TSelectInnerItem, TSelectInnerEnumerable, TSelectInnerEnumerator, TSelectProjection>(this RangeEnumerable source, SelectSelectEnumerable<int, TSelectInnerItem, TSelectInnerEnumerable, TSelectInnerEnumerator, TSelectProjection> second, IEqualityComparer<int> comparer)
//        where TSelectInnerEnumerable : struct, IStructEnumerable<TSelectInnerItem, TSelectInnerEnumerator>
//        where TSelectInnerEnumerator : struct, IStructEnumerator<TSelectInnerItem>
//        where TSelectProjection : struct, IStructProjection<int, TSelectInnerItem>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, SelectSelectEnumerable<int, TSelectInnerItem, TSelectInnerEnumerable, TSelectInnerEnumerator, TSelectProjection>, SelectSelectEnumerator<int, TSelectInnerItem, TSelectInnerEnumerator, TSelectProjection>>(ref source, ref second, comparer);

//        public static bool SequenceEqual<TSelectInnerItem, TSelectInnerEnumerable, TSelectInnerEnumerator, TSelectProjection, TSelectPredicate>(this RangeEnumerable source, SelectWhereEnumerable<int, TSelectInnerItem, TSelectInnerEnumerable, TSelectInnerEnumerator, TSelectProjection, TSelectPredicate> second)
//        where TSelectInnerEnumerable : struct, IStructEnumerable<TSelectInnerItem, TSelectInnerEnumerator>
//        where TSelectInnerEnumerator : struct, IStructEnumerator<TSelectInnerItem>
//        where TSelectProjection : struct, IStructProjection<int, TSelectInnerItem>
//        where TSelectPredicate : struct, IStructPredicate<int>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, SelectWhereEnumerable<int, TSelectInnerItem, TSelectInnerEnumerable, TSelectInnerEnumerator, TSelectProjection, TSelectPredicate>, SelectWhereEnumerator<int, TSelectInnerItem, TSelectInnerEnumerator, TSelectProjection, TSelectPredicate>>(ref source, ref second, null);

//        public static bool SequenceEqual<TSelectInnerItem, TSelectInnerEnumerable, TSelectInnerEnumerator, TSelectProjection, TSelectPredicate>(this RangeEnumerable source, SelectWhereEnumerable<int, TSelectInnerItem, TSelectInnerEnumerable, TSelectInnerEnumerator, TSelectProjection, TSelectPredicate> second, IEqualityComparer<int> comparer)
//        where TSelectInnerEnumerable : struct, IStructEnumerable<TSelectInnerItem, TSelectInnerEnumerator>
//        where TSelectInnerEnumerator : struct, IStructEnumerator<TSelectInnerItem>
//        where TSelectProjection : struct, IStructProjection<int, TSelectInnerItem>
//        where TSelectPredicate : struct, IStructPredicate<int>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, SelectWhereEnumerable<int, TSelectInnerItem, TSelectInnerEnumerable, TSelectInnerEnumerator, TSelectProjection, TSelectPredicate>, SelectWhereEnumerator<int, TSelectInnerItem, TSelectInnerEnumerator, TSelectProjection, TSelectPredicate>>(ref source, ref second, comparer);

//        public static bool SequenceEqual<TWhereInnerEnumerable, TWhereInnerEnumerator, TWherePredicate>(this RangeEnumerable source, WhereWhereEnumerable<int, TWhereInnerEnumerable, TWhereInnerEnumerator, TWherePredicate> second)
//        where TWhereInnerEnumerable : struct, IStructEnumerable<int, TWhereInnerEnumerator>
//        where TWhereInnerEnumerator : struct, IStructEnumerator<int>
//        where TWherePredicate : struct, IStructPredicate<int>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, WhereWhereEnumerable<int, TWhereInnerEnumerable, TWhereInnerEnumerator, TWherePredicate>, WhereWhereEnumerator<int, TWhereInnerEnumerator, TWherePredicate>>(ref source, ref second, null);

//        public static bool SequenceEqual<TWhereInnerEnumerable, TWhereInnerEnumerator, TWherePredicate>(this RangeEnumerable source, WhereWhereEnumerable<int, TWhereInnerEnumerable, TWhereInnerEnumerator, TWherePredicate> second, IEqualityComparer<int> comparer)
//        where TWhereInnerEnumerable : struct, IStructEnumerable<int, TWhereInnerEnumerator>
//        where TWhereInnerEnumerator : struct, IStructEnumerator<int>
//        where TWherePredicate : struct, IStructPredicate<int>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, WhereWhereEnumerable<int, TWhereInnerEnumerable, TWhereInnerEnumerator, TWherePredicate>, WhereWhereEnumerator<int, TWhereInnerEnumerator, TWherePredicate>>(ref source, ref second, comparer);

//        public static bool SequenceEqual<TWhereInnerItem, TWhereInnerEnumerable, TWhereInnerEnumerator, TWherePredicate, TWhereProjection>(this RangeEnumerable source, WhereSelectEnumerable<int, TWhereInnerItem, TWhereInnerEnumerable, TWhereInnerEnumerator, TWherePredicate, TWhereProjection> second)
//        where TWhereInnerEnumerable : struct, IStructEnumerable<TWhereInnerItem, TWhereInnerEnumerator>
//        where TWhereInnerEnumerator : struct, IStructEnumerator<TWhereInnerItem>
//        where TWherePredicate : struct, IStructPredicate<TWhereInnerItem>
//        where TWhereProjection : struct, IStructProjection<int, TWhereInnerItem>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, WhereSelectEnumerable<int, TWhereInnerItem, TWhereInnerEnumerable, TWhereInnerEnumerator, TWherePredicate, TWhereProjection>, WhereSelectEnumerator<int, TWhereInnerItem, TWhereInnerEnumerator, TWherePredicate, TWhereProjection>>(ref source, ref second, null);

//        public static bool SequenceEqual<TWhereInnerItem, TWhereInnerEnumerable, TWhereInnerEnumerator, TWherePredicate, TWhereProjection>(this RangeEnumerable source, WhereSelectEnumerable<int, TWhereInnerItem, TWhereInnerEnumerable, TWhereInnerEnumerator, TWherePredicate, TWhereProjection> second, IEqualityComparer<int> comparer)
//        where TWhereInnerEnumerable : struct, IStructEnumerable<TWhereInnerItem, TWhereInnerEnumerator>
//        where TWhereInnerEnumerator : struct, IStructEnumerator<TWhereInnerItem>
//        where TWherePredicate : struct, IStructPredicate<TWhereInnerItem>
//        where TWhereProjection : struct, IStructProjection<int, TWhereInnerItem>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, WhereSelectEnumerable<int, TWhereInnerItem, TWhereInnerEnumerable, TWhereInnerEnumerator, TWherePredicate, TWhereProjection>, WhereSelectEnumerator<int, TWhereInnerItem, TWhereInnerEnumerator, TWherePredicate, TWhereProjection>>(ref source, ref second, comparer);

//        public static bool SequenceEqual<TDistinctInnerEnumerable, TDistinctInnerEnumerator>(this RangeEnumerable source, DistinctDefaultEnumerable<int, TDistinctInnerEnumerable, TDistinctInnerEnumerator> second)
//        where TDistinctInnerEnumerable : struct, IStructEnumerable<int, TDistinctInnerEnumerator>
//        where TDistinctInnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, DistinctDefaultEnumerable<int, TDistinctInnerEnumerable, TDistinctInnerEnumerator>, DistinctDefaultEnumerator<int, TDistinctInnerEnumerator>>(ref source, ref second, null);

//        public static bool SequenceEqual<TDistinctInnerEnumerable, TDistinctInnerEnumerator>(this RangeEnumerable source, DistinctDefaultEnumerable<int, TDistinctInnerEnumerable, TDistinctInnerEnumerator> second, IEqualityComparer<int> comparer)
//        where TDistinctInnerEnumerable : struct, IStructEnumerable<int, TDistinctInnerEnumerator>
//        where TDistinctInnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, DistinctDefaultEnumerable<int, TDistinctInnerEnumerable, TDistinctInnerEnumerator>, DistinctDefaultEnumerator<int, TDistinctInnerEnumerator>>(ref source, ref second, comparer);

//        public static bool SequenceEqual<TDistinctInnerEnumerable, TDistinctInnerEnumerator>(this RangeEnumerable source, DistinctSpecificEnumerable<int, TDistinctInnerEnumerable, TDistinctInnerEnumerator> second)
//        where TDistinctInnerEnumerable : struct, IStructEnumerable<int, TDistinctInnerEnumerator>
//        where TDistinctInnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, DistinctSpecificEnumerable<int, TDistinctInnerEnumerable, TDistinctInnerEnumerator>, DistinctSpecificEnumerator<int, TDistinctInnerEnumerator>>(ref source, ref second, null);

//        public static bool SequenceEqual<TDistinctInnerEnumerable, TDistinctInnerEnumerator>(this RangeEnumerable source, DistinctSpecificEnumerable<int, TDistinctInnerEnumerable, TDistinctInnerEnumerator> second, IEqualityComparer<int> comparer)
//        where TDistinctInnerEnumerable : struct, IStructEnumerable<int, TDistinctInnerEnumerator>
//        where TDistinctInnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, DistinctSpecificEnumerable<int, TDistinctInnerEnumerable, TDistinctInnerEnumerator>, DistinctSpecificEnumerator<int, TDistinctInnerEnumerator>>(ref source, ref second, comparer);

//        public static bool SequenceEqual(this RangeEnumerable source, EmptyOrderedEnumerable<int> second)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            if (second.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(second));

//            return source.InnerCount == 0;
//        }

//        public static bool SequenceEqual(this RangeEnumerable source, EmptyOrderedEnumerable<int> second, IEqualityComparer<int> comparer)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            if (second.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(second));

//            return source.InnerCount == 0;
//        }

//        public static bool SequenceEqual<TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>(this RangeEnumerable source, ExceptDefaultEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator> second)
//        where TExceptFirstEnumerable : struct, IStructEnumerable<int, TExceptFirstEnumerator>
//        where TExceptFirstEnumerator : struct, IStructEnumerator<int>
//        where TExceptSecondEnumerable : struct, IStructEnumerable<int, TExceptSecondEnumerator>
//        where TExceptSecondEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, ExceptDefaultEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>, ExceptDefaultEnumerator<int, TExceptFirstEnumerator, TExceptSecondEnumerator>>(ref source, ref second, null);

//        public static bool SequenceEqual<TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>(this RangeEnumerable source, ExceptDefaultEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator> second, IEqualityComparer<int> comparer)
//        where TExceptFirstEnumerable : struct, IStructEnumerable<int, TExceptFirstEnumerator>
//        where TExceptFirstEnumerator : struct, IStructEnumerator<int>
//        where TExceptSecondEnumerable : struct, IStructEnumerable<int, TExceptSecondEnumerator>
//        where TExceptSecondEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, ExceptDefaultEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>, ExceptDefaultEnumerator<int, TExceptFirstEnumerator, TExceptSecondEnumerator>>(ref source, ref second, comparer);

//        public static bool SequenceEqual<TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>(this RangeEnumerable source, ExceptSpecificEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator> second)
//        where TExceptFirstEnumerable : struct, IStructEnumerable<int, TExceptFirstEnumerator>
//        where TExceptFirstEnumerator : struct, IStructEnumerator<int>
//        where TExceptSecondEnumerable : struct, IStructEnumerable<int, TExceptSecondEnumerator>
//        where TExceptSecondEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, ExceptSpecificEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>, ExceptSpecificEnumerator<int, TExceptFirstEnumerator, TExceptSecondEnumerator>>(ref source, ref second, null);

//        public static bool SequenceEqual<TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>(this RangeEnumerable source, ExceptSpecificEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator> second, IEqualityComparer<int> comparer)
//        where TExceptFirstEnumerable : struct, IStructEnumerable<int, TExceptFirstEnumerator>
//        where TExceptFirstEnumerator : struct, IStructEnumerator<int>
//        where TExceptSecondEnumerable : struct, IStructEnumerable<int, TExceptSecondEnumerator>
//        where TExceptSecondEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, ExceptSpecificEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>, ExceptSpecificEnumerator<int, TExceptFirstEnumerator, TExceptSecondEnumerator>>(ref source, ref second, comparer);

//        public static bool SequenceEqual<TIntersectFirstEnumerable, TIntersectFirstEnumerator, TIntersectSecondEnumerable, TIntersectSecondEnumerator>(this RangeEnumerable source, IntersectDefaultEnumerable<int, TIntersectFirstEnumerable, TIntersectFirstEnumerator, TIntersectSecondEnumerable, TIntersectSecondEnumerator> second)
//        where TIntersectFirstEnumerable : struct, IStructEnumerable<int, TIntersectFirstEnumerator>
//        where TIntersectFirstEnumerator : struct, IStructEnumerator<int>
//        where TIntersectSecondEnumerable : struct, IStructEnumerable<int, TIntersectSecondEnumerator>
//        where TIntersectSecondEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, IntersectDefaultEnumerable<int, TIntersectFirstEnumerable, TIntersectFirstEnumerator, TIntersectSecondEnumerable, TIntersectSecondEnumerator>, IntersectDefaultEnumerator<int, TIntersectFirstEnumerator, TIntersectSecondEnumerator>>(ref source, ref second, null);

//        public static bool SequenceEqual<TIntersectFirstEnumerable, TIntersectFirstEnumerator, TIntersectSecondEnumerable, TIntersectSecondEnumerator>(this RangeEnumerable source, IntersectDefaultEnumerable<int, TIntersectFirstEnumerable, TIntersectFirstEnumerator, TIntersectSecondEnumerable, TIntersectSecondEnumerator> second, IEqualityComparer<int> comparer)
//        where TIntersectFirstEnumerable : struct, IStructEnumerable<int, TIntersectFirstEnumerator>
//        where TIntersectFirstEnumerator : struct, IStructEnumerator<int>
//        where TIntersectSecondEnumerable : struct, IStructEnumerable<int, TIntersectSecondEnumerator>
//        where TIntersectSecondEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, IntersectDefaultEnumerable<int, TIntersectFirstEnumerable, TIntersectFirstEnumerator, TIntersectSecondEnumerable, TIntersectSecondEnumerator>, IntersectDefaultEnumerator<int, TIntersectFirstEnumerator, TIntersectSecondEnumerator>>(ref source, ref second, comparer);

//        public static bool SequenceEqual<TIntersectFirstEnumerable, TIntersectFirstEnumerator, TIntersectSecondEnumerable, TIntersectSecondEnumerator>(this RangeEnumerable source, IntersectSpecificEnumerable<int, TIntersectFirstEnumerable, TIntersectFirstEnumerator, TIntersectSecondEnumerable, TIntersectSecondEnumerator> second)
//        where TIntersectFirstEnumerable : struct, IStructEnumerable<int, TIntersectFirstEnumerator>
//        where TIntersectFirstEnumerator : struct, IStructEnumerator<int>
//        where TIntersectSecondEnumerable : struct, IStructEnumerable<int, TIntersectSecondEnumerator>
//        where TIntersectSecondEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, IntersectSpecificEnumerable<int, TIntersectFirstEnumerable, TIntersectFirstEnumerator, TIntersectSecondEnumerable, TIntersectSecondEnumerator>, IntersectSpecificEnumerator<int, TIntersectFirstEnumerator, TIntersectSecondEnumerator>>(ref source, ref second, null);

//        public static bool SequenceEqual<TIntersectFirstEnumerable, TIntersectFirstEnumerator, TIntersectSecondEnumerable, TIntersectSecondEnumerator>(this RangeEnumerable source, IntersectSpecificEnumerable<int, TIntersectFirstEnumerable, TIntersectFirstEnumerator, TIntersectSecondEnumerable, TIntersectSecondEnumerator> second, IEqualityComparer<int> comparer)
//        where TIntersectFirstEnumerable : struct, IStructEnumerable<int, TIntersectFirstEnumerator>
//        where TIntersectFirstEnumerator : struct, IStructEnumerator<int>
//        where TIntersectSecondEnumerable : struct, IStructEnumerable<int, TIntersectSecondEnumerator>
//        where TIntersectSecondEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, IntersectSpecificEnumerable<int, TIntersectFirstEnumerable, TIntersectFirstEnumerator, TIntersectSecondEnumerable, TIntersectSecondEnumerator>, IntersectSpecificEnumerator<int, TIntersectFirstEnumerator, TIntersectSecondEnumerator>>(ref source, ref second, comparer);

//        public static bool SequenceEqual<TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator>(this RangeEnumerable source, UnionDefaultEnumerable<int, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator> second)
//        where TUnionFirstEnumerable : struct, IStructEnumerable<int, TUnionFirstEnumerator>
//        where TUnionFirstEnumerator : struct, IStructEnumerator<int>
//        where TUnionSecondEnumerable : struct, IStructEnumerable<int, TUnionSecondEnumerator>
//        where TUnionSecondEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, UnionDefaultEnumerable<int, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator>, UnionDefaultEnumerator<int, TUnionFirstEnumerator, TUnionSecondEnumerator>>(ref source, ref second, null);

//        public static bool SequenceEqual<TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator>(this RangeEnumerable source, UnionDefaultEnumerable<int, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator> second, IEqualityComparer<int> comparer)
//        where TUnionFirstEnumerable : struct, IStructEnumerable<int, TUnionFirstEnumerator>
//        where TUnionFirstEnumerator : struct, IStructEnumerator<int>
//        where TUnionSecondEnumerable : struct, IStructEnumerable<int, TUnionSecondEnumerator>
//        where TUnionSecondEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, UnionDefaultEnumerable<int, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator>, UnionDefaultEnumerator<int, TUnionFirstEnumerator, TUnionSecondEnumerator>>(ref source, ref second, comparer);

//        public static bool SequenceEqual<TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator>(this RangeEnumerable source, UnionSpecificEnumerable<int, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator> second)
//        where TUnionFirstEnumerable : struct, IStructEnumerable<int, TUnionFirstEnumerator>
//        where TUnionFirstEnumerator : struct, IStructEnumerator<int>
//        where TUnionSecondEnumerable : struct, IStructEnumerable<int, TUnionSecondEnumerator>
//        where TUnionSecondEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, UnionSpecificEnumerable<int, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator>, UnionSpecificEnumerator<int, TUnionFirstEnumerator, TUnionSecondEnumerator>>(ref source, ref second, null);

//        public static bool SequenceEqual<TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator>(this RangeEnumerable source, UnionSpecificEnumerable<int, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator> second, IEqualityComparer<int> comparer)
//        where TUnionFirstEnumerable : struct, IStructEnumerable<int, TUnionFirstEnumerator>
//        where TUnionFirstEnumerator : struct, IStructEnumerator<int>
//        where TUnionSecondEnumerable : struct, IStructEnumerable<int, TUnionSecondEnumerator>
//        where TUnionSecondEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, UnionSpecificEnumerable<int, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator>, UnionSpecificEnumerator<int, TUnionFirstEnumerator, TUnionSecondEnumerator>>(ref source, ref second, comparer);

//        public static bool SequenceEqual<TGroupedKey>(this RangeEnumerable source, GroupedEnumerable<TGroupedKey, int> second)
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, GroupedEnumerable<TGroupedKey, int>, GroupedEnumerator<int>>(ref source, ref second, null);

//        public static bool SequenceEqual<TGroupedKey>(this RangeEnumerable source, GroupedEnumerable<TGroupedKey, int> second, IEqualityComparer<int> comparer)
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, GroupedEnumerable<TGroupedKey, int>, GroupedEnumerator<int>>(ref source, ref second, comparer);

//        public static bool SequenceEqual<TGroupingKey>(this RangeEnumerable source, GroupingEnumerable<TGroupingKey, int> second)
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, GroupingEnumerable<TGroupingKey, int>, GroupingEnumerator<int>>(ref source, ref second, null);

//        public static bool SequenceEqual<TGroupingKey>(this RangeEnumerable source, GroupingEnumerable<TGroupingKey, int> second, IEqualityComparer<int> comparer)
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, GroupingEnumerable<TGroupingKey, int>, GroupingEnumerator<int>>(ref source, ref second, comparer);

//        public static bool SequenceEqual<TGroupByInItem, TGroupByKey, TGroupByItem, TGroupByEnumerable, TGroupByEnumerator>(this RangeEnumerable source, GroupByCollectionDefaultEnumerable<TGroupByInItem, TGroupByKey, TGroupByItem, int, TGroupByEnumerable, TGroupByEnumerator> second)
//        where TGroupByEnumerable : struct, IStructEnumerable<TGroupByInItem, TGroupByEnumerator>
//        where TGroupByEnumerator : struct, IStructEnumerator<TGroupByInItem>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, GroupByCollectionDefaultEnumerable<TGroupByInItem, TGroupByKey, TGroupByItem, int, TGroupByEnumerable, TGroupByEnumerator>, GroupByCollectionDefaultEnumerator<TGroupByInItem, TGroupByKey, TGroupByItem, int, TGroupByEnumerator>>(ref source, ref second, null);

//        public static bool SequenceEqual<TGroupByInItem, TGroupByKey, TGroupByItem, TGroupByEnumerable, TGroupByEnumerator>(this RangeEnumerable source, GroupByCollectionDefaultEnumerable<TGroupByInItem, TGroupByKey, TGroupByItem, int, TGroupByEnumerable, TGroupByEnumerator> second, IEqualityComparer<int> comparer)
//        where TGroupByEnumerable : struct, IStructEnumerable<TGroupByInItem, TGroupByEnumerator>
//        where TGroupByEnumerator : struct, IStructEnumerator<TGroupByInItem>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, GroupByCollectionDefaultEnumerable<TGroupByInItem, TGroupByKey, TGroupByItem, int, TGroupByEnumerable, TGroupByEnumerator>, GroupByCollectionDefaultEnumerator<TGroupByInItem, TGroupByKey, TGroupByItem, int, TGroupByEnumerator>>(ref source, ref second, comparer);

//        public static bool SequenceEqual<TGroupByInItem, TGroupByKey, TGroupByItem, TGroupByEnumerable, TGroupByEnumerator>(this RangeEnumerable source, GroupByCollectionSpecificEnumerable<TGroupByInItem, TGroupByKey, TGroupByItem, int, TGroupByEnumerable, TGroupByEnumerator> second)
//        where TGroupByEnumerable : struct, IStructEnumerable<TGroupByInItem, TGroupByEnumerator>
//        where TGroupByEnumerator : struct, IStructEnumerator<TGroupByInItem>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, GroupByCollectionSpecificEnumerable<TGroupByInItem, TGroupByKey, TGroupByItem, int, TGroupByEnumerable, TGroupByEnumerator>, GroupByCollectionSpecificEnumerator<TGroupByInItem, TGroupByKey, TGroupByItem, int, TGroupByEnumerator>>(ref source, ref second, null);

//        public static bool SequenceEqual<TGroupByInItem, TGroupByKey, TGroupByItem, TGroupByEnumerable, TGroupByEnumerator>(this RangeEnumerable source, GroupByCollectionSpecificEnumerable<TGroupByInItem, TGroupByKey, TGroupByItem, int, TGroupByEnumerable, TGroupByEnumerator> second, IEqualityComparer<int> comparer)
//        where TGroupByEnumerable : struct, IStructEnumerable<TGroupByInItem, TGroupByEnumerator>
//        where TGroupByEnumerator : struct, IStructEnumerator<TGroupByInItem>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, GroupByCollectionSpecificEnumerable<TGroupByInItem, TGroupByKey, TGroupByItem, int, TGroupByEnumerable, TGroupByEnumerator>, GroupByCollectionSpecificEnumerator<TGroupByInItem, TGroupByKey, TGroupByItem, int, TGroupByEnumerator>>(ref source, ref second, comparer);

//        public static bool SequenceEqual<TJoinKeyItem, TJoinLefint, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerable, TJoinRightEnumerator>(this RangeEnumerable source, JoinDefaultEnumerable<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerable, TJoinRightEnumerator> second)
//        where TJoinLeftEnumerable : struct, IStructEnumerable<TJoinLefint, TJoinLeftEnumerator>
//        where TJoinLeftEnumerator : struct, IStructEnumerator<TJoinLefint>
//        where TJoinRightEnumerable : struct, IStructEnumerable<TJoinRighint, TJoinRightEnumerator>
//        where TJoinRightEnumerator : struct, IStructEnumerator<TJoinRighint>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, JoinDefaultEnumerable<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerable, TJoinRightEnumerator>, JoinDefaultEnumerator<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerator>>(ref source, ref second, null);

//        public static bool SequenceEqual<TJoinKeyItem, TJoinLefint, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerable, TJoinRightEnumerator>(this RangeEnumerable source, JoinDefaultEnumerable<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerable, TJoinRightEnumerator> second, IEqualityComparer<int> comparer)
//        where TJoinLeftEnumerable : struct, IStructEnumerable<TJoinLefint, TJoinLeftEnumerator>
//        where TJoinLeftEnumerator : struct, IStructEnumerator<TJoinLefint>
//        where TJoinRightEnumerable : struct, IStructEnumerable<TJoinRighint, TJoinRightEnumerator>
//        where TJoinRightEnumerator : struct, IStructEnumerator<TJoinRighint>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, JoinDefaultEnumerable<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerable, TJoinRightEnumerator>, JoinDefaultEnumerator<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerator>>(ref source, ref second, comparer);

//        public static bool SequenceEqual<TJoinKeyItem, TJoinLefint, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerable, TJoinRightEnumerator>(this RangeEnumerable source, JoinSpecificEnumerable<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerable, TJoinRightEnumerator> second)
//        where TJoinLeftEnumerable : struct, IStructEnumerable<TJoinLefint, TJoinLeftEnumerator>
//        where TJoinLeftEnumerator : struct, IStructEnumerator<TJoinLefint>
//        where TJoinRightEnumerable : struct, IStructEnumerable<TJoinRighint, TJoinRightEnumerator>
//        where TJoinRightEnumerator : struct, IStructEnumerator<TJoinRighint>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, JoinSpecificEnumerable<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerable, TJoinRightEnumerator>, JoinSpecificEnumerator<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerator>>(ref source, ref second, null);

//        public static bool SequenceEqual<TJoinKeyItem, TJoinLefint, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerable, TJoinRightEnumerator>(this RangeEnumerable source, JoinSpecificEnumerable<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerable, TJoinRightEnumerator> second, IEqualityComparer<int> comparer)
//        where TJoinLeftEnumerable : struct, IStructEnumerable<TJoinLefint, TJoinLeftEnumerator>
//        where TJoinLeftEnumerator : struct, IStructEnumerator<TJoinLefint>
//        where TJoinRightEnumerable : struct, IStructEnumerable<TJoinRighint, TJoinRightEnumerator>
//        where TJoinRightEnumerator : struct, IStructEnumerator<TJoinRighint>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, JoinSpecificEnumerable<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerable, TJoinRightEnumerator>, JoinSpecificEnumerator<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerator>>(ref source, ref second, comparer);

//        public static bool SequenceEqual<TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator>(this RangeEnumerable source, GroupJoinDefaultEnumerable<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator> second)
//        where TGroupJoinLeftEnumerable : struct, IStructEnumerable<TGroupJoinLefint, TGroupJoinLeftEnumerator>
//        where TGroupJoinLeftEnumerator : struct, IStructEnumerator<TGroupJoinLefint>
//        where TGroupJoinRightEnumerable : struct, IStructEnumerable<TGroupJoinRighint, TGroupJoinRightEnumerator>
//        where TGroupJoinRightEnumerator : struct, IStructEnumerator<TGroupJoinRighint>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, GroupJoinDefaultEnumerable<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator>, GroupJoinDefaultEnumerator<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerator>>(ref source, ref second, null);

//        public static bool SequenceEqual<TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator>(this RangeEnumerable source, GroupJoinDefaultEnumerable<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator> second, IEqualityComparer<int> comparer)
//        where TGroupJoinLeftEnumerable : struct, IStructEnumerable<TGroupJoinLefint, TGroupJoinLeftEnumerator>
//        where TGroupJoinLeftEnumerator : struct, IStructEnumerator<TGroupJoinLefint>
//        where TGroupJoinRightEnumerable : struct, IStructEnumerable<TGroupJoinRighint, TGroupJoinRightEnumerator>
//        where TGroupJoinRightEnumerator : struct, IStructEnumerator<TGroupJoinRighint>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, GroupJoinDefaultEnumerable<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator>, GroupJoinDefaultEnumerator<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerator>>(ref source, ref second, comparer);

//        public static bool SequenceEqual<TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator>(this RangeEnumerable source, GroupJoinSpecificEnumerable<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator> second)
//        where TGroupJoinLeftEnumerable : struct, IStructEnumerable<TGroupJoinLefint, TGroupJoinLeftEnumerator>
//        where TGroupJoinLeftEnumerator : struct, IStructEnumerator<TGroupJoinLefint>
//        where TGroupJoinRightEnumerable : struct, IStructEnumerable<TGroupJoinRighint, TGroupJoinRightEnumerator>
//        where TGroupJoinRightEnumerator : struct, IStructEnumerator<TGroupJoinRighint>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, GroupJoinSpecificEnumerable<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator>, GroupJoinSpecificEnumerator<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerator>>(ref source, ref second, null);

//        public static bool SequenceEqual<TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator>(this RangeEnumerable source, GroupJoinSpecificEnumerable<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator> second, IEqualityComparer<int> comparer)
//        where TGroupJoinLeftEnumerable : struct, IStructEnumerable<TGroupJoinLefint, TGroupJoinLeftEnumerator>
//        where TGroupJoinLeftEnumerator : struct, IStructEnumerator<TGroupJoinLefint>
//        where TGroupJoinRightEnumerable : struct, IStructEnumerable<TGroupJoinRighint, TGroupJoinRightEnumerator>
//        where TGroupJoinRightEnumerator : struct, IStructEnumerator<TGroupJoinRighint>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, GroupJoinSpecificEnumerable<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator>, GroupJoinSpecificEnumerator<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerator>>(ref source, ref second, comparer);

//        public static bool SequenceEqual<TOrderByKey, TOrderByEnumerable, TOrderByEnumerator, TOrderByComparer>(this RangeEnumerable source, OrderByEnumerable<int, TOrderByKey, TOrderByEnumerable, TOrderByEnumerator, TOrderByComparer> second)
//        where TOrderByEnumerable : struct, IStructEnumerable<int, TOrderByEnumerator>
//        where TOrderByEnumerator : struct, IStructEnumerator<int>
//        where TOrderByComparer : struct, IStructComparer<int, TOrderByKey>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, OrderByEnumerable<int, TOrderByKey, TOrderByEnumerable, TOrderByEnumerator, TOrderByComparer>, OrderByEnumerator<int, TOrderByKey, TOrderByEnumerator, TOrderByComparer>>(ref source, ref second, null);

//        public static bool SequenceEqual<TOrderByKey, TOrderByEnumerable, TOrderByEnumerator, TOrderByComparer>(this RangeEnumerable source, OrderByEnumerable<int, TOrderByKey, TOrderByEnumerable, TOrderByEnumerator, TOrderByComparer> second, IEqualityComparer<int> comparer)
//        where TOrderByEnumerable : struct, IStructEnumerable<int, TOrderByEnumerator>
//        where TOrderByEnumerator : struct, IStructEnumerator<int>
//        where TOrderByComparer : struct, IStructComparer<int, TOrderByKey>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, OrderByEnumerable<int, TOrderByKey, TOrderByEnumerable, TOrderByEnumerator, TOrderByComparer>, OrderByEnumerator<int, TOrderByKey, TOrderByEnumerator, TOrderByComparer>>(ref source, ref second, comparer);

//        public static bool SequenceEqual<TReverseEnumerable, TReverseEnumerator>(this RangeEnumerable source, ReverseEnumerable<int, TReverseEnumerable, TReverseEnumerator> second)
//        where TReverseEnumerable : struct, IStructEnumerable<int, TReverseEnumerator>
//        where TReverseEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, ReverseEnumerable<int, TReverseEnumerable, TReverseEnumerator>, ReverseEnumerator<int>>(ref source, ref second, null);

//        public static bool SequenceEqual<TReverseEnumerable, TReverseEnumerator>(this RangeEnumerable source, ReverseEnumerable<int, TReverseEnumerable, TReverseEnumerator> second, IEqualityComparer<int> comparer)
//        where TReverseEnumerable : struct, IStructEnumerable<int, TReverseEnumerator>
//        where TReverseEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, ReverseEnumerable<int, TReverseEnumerable, TReverseEnumerator>, ReverseEnumerator<int>>(ref source, ref second, comparer);

//        public static bool SequenceEqual(this RangeEnumerable source, OneItemDefaultEnumerable<int> second)
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, OneItemDefaultEnumerable<int>, OneItemDefaultEnumerator<int>>(ref source, ref second, null);

//        public static bool SequenceEqual(this RangeEnumerable source, OneItemDefaultEnumerable<int> second, IEqualityComparer<int> comparer)
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, OneItemDefaultEnumerable<int>, OneItemDefaultEnumerator<int>>(ref source, ref second, comparer);

//        public static bool SequenceEqual(this RangeEnumerable source, OneItemSpecificEnumerable<int> second)
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, OneItemSpecificEnumerable<int>, OneItemSpecificEnumerator<int>>(ref source, ref second, null);

//        public static bool SequenceEqual(this RangeEnumerable source, OneItemSpecificEnumerable<int> second, IEqualityComparer<int> comparer)
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, OneItemSpecificEnumerable<int>, OneItemSpecificEnumerator<int>>(ref source, ref second, comparer);

//        public static bool SequenceEqual(this RangeEnumerable source, OneItemDefaultOrderedEnumerable<int> second)
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, OneItemDefaultOrderedEnumerable<int>, OneItemDefaultOrderedEnumerator<int>>(ref source, ref second, null);

//        public static bool SequenceEqual(this RangeEnumerable source, OneItemDefaultOrderedEnumerable<int> second, IEqualityComparer<int> comparer)
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, OneItemDefaultOrderedEnumerable<int>, OneItemDefaultOrderedEnumerator<int>>(ref source, ref second, comparer);

//        public static bool SequenceEqual(this RangeEnumerable source, OneItemSpecificOrderedEnumerable<int> second)
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, OneItemSpecificOrderedEnumerable<int>, OneItemSpecificOrderedEnumerator<int>>(ref source, ref second, null);

//        public static bool SequenceEqual(this RangeEnumerable source, OneItemSpecificOrderedEnumerable<int> second, IEqualityComparer<int> comparer)
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, OneItemSpecificOrderedEnumerable<int>, OneItemSpecificOrderedEnumerator<int>>(ref source, ref second, comparer);

//        public static bool SequenceEqual<TSkipEnumerable, TSkipEnumerator>(this RangeEnumerable source, SkipLastEnumerable<int, TSkipEnumerable, TSkipEnumerator> second)
//        where TSkipEnumerable : struct, IStructEnumerable<int, TSkipEnumerator>
//        where TSkipEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, SkipLastEnumerable<int, TSkipEnumerable, TSkipEnumerator>, SkipLastEnumerator<int, TSkipEnumerator>>(ref source, ref second, null);

//        public static bool SequenceEqual<TSkipEnumerable, TSkipEnumerator>(this RangeEnumerable source, SkipLastEnumerable<int, TSkipEnumerable, TSkipEnumerator> second, IEqualityComparer<int> comparer)
//        where TSkipEnumerable : struct, IStructEnumerable<int, TSkipEnumerator>
//        where TSkipEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, SkipLastEnumerable<int, TSkipEnumerable, TSkipEnumerator>, SkipLastEnumerator<int, TSkipEnumerator>>(ref source, ref second, comparer);

//        public static bool SequenceEqual<TTakeEnumerable, TTakeEnumerator>(this RangeEnumerable source, TakeLastEnumerable<int, TTakeEnumerable, TTakeEnumerator> second)
//        where TTakeEnumerable : struct, IStructEnumerable<int, TTakeEnumerator>
//        where TTakeEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, TakeLastEnumerable<int, TTakeEnumerable, TTakeEnumerator>, TakeLastEnumerator<int, TTakeEnumerator>>(ref source, ref second, null);

//        public static bool SequenceEqual<TTakeEnumerable, TTakeEnumerator>(this RangeEnumerable source, TakeLastEnumerable<int, TTakeEnumerable, TTakeEnumerator> second, IEqualityComparer<int> comparer)
//        where TTakeEnumerable : struct, IStructEnumerable<int, TTakeEnumerator>
//        where TTakeEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, TakeLastEnumerable<int, TTakeEnumerable, TTakeEnumerator>, TakeLastEnumerator<int, TTakeEnumerator>>(ref source, ref second, comparer);

//        public static bool SequenceEqual<TAppendEnumerable, TAppendEnumerator>(this RangeEnumerable source, AppendEnumerable<int, TAppendEnumerable, TAppendEnumerator> second)
//        where TAppendEnumerable : struct, IStructEnumerable<int, TAppendEnumerator>
//        where TAppendEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, AppendEnumerable<int, TAppendEnumerable, TAppendEnumerator>, AppendEnumerator<int, TAppendEnumerator>>(ref source, ref second, null);

//        public static bool SequenceEqual<TAppendEnumerable, TAppendEnumerator>(this RangeEnumerable source, AppendEnumerable<int, TAppendEnumerable, TAppendEnumerator> second, IEqualityComparer<int> comparer)
//        where TAppendEnumerable : struct, IStructEnumerable<int, TAppendEnumerator>
//        where TAppendEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, AppendEnumerable<int, TAppendEnumerable, TAppendEnumerator>, AppendEnumerator<int, TAppendEnumerator>>(ref source, ref second, comparer);

//        public static bool SequenceEqual<TPrependEnumerable, TPrependEnumerator>(this RangeEnumerable source, PrependEnumerable<int, TPrependEnumerable, TPrependEnumerator> second)
//        where TPrependEnumerable : struct, IStructEnumerable<int, TPrependEnumerator>
//        where TPrependEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, PrependEnumerable<int, TPrependEnumerable, TPrependEnumerator>, PrependEnumerator<int, TPrependEnumerator>>(ref source, ref second, null);

//        public static bool SequenceEqual<TPrependEnumerable, TPrependEnumerator>(this RangeEnumerable source, PrependEnumerable<int, TPrependEnumerable, TPrependEnumerator> second, IEqualityComparer<int> comparer)
//        where TPrependEnumerable : struct, IStructEnumerable<int, TPrependEnumerator>
//        where TPrependEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.SequenceEqual<int, RangeEnumerable, RangeEnumerator, PrependEnumerable<int, TPrependEnumerable, TPrependEnumerator>, PrependEnumerator<int, TPrependEnumerator>>(ref source, ref second, comparer);

//        // Single

//        public static int Single(this RangeEnumerable source)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            if (source.InnerCount > 1) throw CommonImplementation.MultipleElements();
//            if (source.InnerCount == 0) throw CommonImplementation.SequenceEmpty();

//            return source.Start;
//        }

//        public static int Single(this RangeEnumerable source, Func<int, bool> predicate)
//        => CommonImplementation.Single<int, RangeEnumerable, RangeEnumerator>(ref source, predicate);

//        public static int SingleOrDefault(this RangeEnumerable source)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            if (source.InnerCount > 1) throw CommonImplementation.MultipleElements();
//            if (source.InnerCount == 0)
//            {
//                return default(int);
//            }

//            return source.Start;
//        }

//        public static int SingleOrDefault(this RangeEnumerable source, Func<int, bool> predicate)
//        => CommonImplementation.SingleOrDefault<int, RangeEnumerable, RangeEnumerator>(ref source, predicate);

//        // Skip

//        public static RangeEnumerable Skip(this RangeEnumerable source, int count)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
            
//            if (count < 0) count = 0;
//            if (count > source.InnerCount) count = source.InnerCount;

//            var newStart = source.Start + count;
//            var newCount = source.InnerCount - count;

//            return new RangeEnumerable(Enumerable.RangeSigil, newStart, newCount);
//        }

//        public static SkipWhileIndexedEnumerable<int, RangeEnumerable, RangeEnumerator> SkipWhile(this RangeEnumerable source, Func<int, int, bool> predicate)
//        => CommonImplementation.SkipWhile<int, RangeEnumerable, RangeEnumerator>(ref source, predicate);

//        public static SkipWhileEnumerable<int, RangeEnumerable, RangeEnumerator> SkipWhile(this RangeEnumerable source, Func<int, bool> predicate)
//        => CommonImplementation.SkipWhile<int, RangeEnumerable, RangeEnumerator>(ref source, predicate);

//        public static RangeEnumerable SkipLast(this RangeEnumerable source, int count)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));

//            if(count < 0)
//            {
//                count = 0;
//            }

//            var newStart = source.Start;
//            var newCount = source.InnerCount - count;
//            if(newCount < 0)
//            {
//                newCount = 0;
//            }

//            return new RangeEnumerable(Enumerable.RangeSigil, newStart, newCount);
//        }

//        // Sum

//        public static long Sum(this RangeEnumerable source, Func<int, long> selector)
//        => CommonImplementation.SumSelector<int, RangeEnumerable, RangeEnumerator>(ref source, selector);

//        public static float Sum(this RangeEnumerable source, Func<int, float> selector)
//        => CommonImplementation.SumSelector<int, RangeEnumerable, RangeEnumerator>(ref source, selector);

//        public static double Sum(this RangeEnumerable source, Func<int, double> selector)
//        => CommonImplementation.SumSelector<int, RangeEnumerable, RangeEnumerator>(ref source, selector);

//        public static decimal Sum(this RangeEnumerable source, Func<int, decimal> selector)
//        => CommonImplementation.SumSelector<int, RangeEnumerable, RangeEnumerator>(ref source, selector);

//        public static decimal? Sum(this RangeEnumerable source, Func<int, decimal?> selector)
//        => CommonImplementation.SumSelector<int, RangeEnumerable, RangeEnumerator>(ref source, selector);

//        public static double? Sum(this RangeEnumerable source, Func<int, double?> selector)
//        => CommonImplementation.SumSelector<int, RangeEnumerable, RangeEnumerator>(ref source, selector);

//        public static float? Sum(this RangeEnumerable source, Func<int, float?> selector)
//        => CommonImplementation.SumSelector<int, RangeEnumerable, RangeEnumerator>(ref source, selector);

//        public static long? Sum(this RangeEnumerable source, Func<int, long?> selector)
//        => CommonImplementation.SumSelector<int, RangeEnumerable, RangeEnumerator>(ref source, selector);

//        public static int? Sum(this RangeEnumerable source, Func<int, int?> selector)
//        => CommonImplementation.SumSelector<int, RangeEnumerable, RangeEnumerator>(ref source, selector);

//        public static int Sum(this RangeEnumerable source, Func<int, int> selector)
//        => CommonImplementation.SumSelector<int, RangeEnumerable, RangeEnumerator>(ref source, selector);

//        // Take

//        public static RangeEnumerable Take(this RangeEnumerable source, int count)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));

//            if(count < 0)
//            {
//                count = 0;
//            }

//            var newStart = source.Start;
//            var newCount = Math.Min(source.InnerCount, count);

//            return new RangeEnumerable(Enumerable.RangeSigil, newStart, newCount);
//        }

//        public static TakeWhileIndexedEnumerable<int, RangeEnumerable, RangeEnumerator> TakeWhile(this RangeEnumerable source, Func<int, int, bool> predicate)
//        => CommonImplementation.TakeWhile<int, RangeEnumerable, RangeEnumerator>(ref source, predicate);

//        public static TakeWhileEnumerable<int, RangeEnumerable, RangeEnumerator> TakeWhile(this RangeEnumerable source, Func<int, bool> predicate)
//        => CommonImplementation.TakeWhile<int, RangeEnumerable, RangeEnumerator>(ref source, predicate);

//        public static RangeEnumerable TakeLast(this RangeEnumerable source, int count)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));

//            if(count < 0)
//            {
//                count = 0;
//            }
            
//            if(count > source.InnerCount)
//            {
//                count = source.InnerCount;
//            }

//            var newStart = source.Start + source.InnerCount - count;
//            var newCount = count;

//            return new RangeEnumerable(Enumerable.RangeSigil, newStart, newCount);
//        }

//        // ToArray

//        public static int[] ToArray(this RangeEnumerable source)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));

//            var ret = Allocator.Current.GetArray<int>(source.InnerCount);

//            var start = source.Start;
            
//            for(var i = 0; i < source.InnerCount; i++)
//            {
//                ret[i] = start + i;
//            }

//            return ret;
//        }

//        // ToDictionary

//        public static Dictionary<TKey, int> ToDictionary<TKey>(this RangeEnumerable source, Func<int, TKey> keySelector)
//        => CommonImplementation.ToDictionary<int, TKey, RangeEnumerable, RangeEnumerator>(ref source, keySelector);

//        public static Dictionary<TKey, int> ToDictionary<TKey>(this RangeEnumerable source, Func<int, TKey> keySelector, IEqualityComparer<TKey> comparer)
//        => CommonImplementation.ToDictionary<int, TKey, RangeEnumerable, RangeEnumerator>(ref source, keySelector, comparer);

//        public static Dictionary<TKey, TValue> ToDictionary<TKey, TValue>(this RangeEnumerable source, Func<int, TKey> keySelector, Func<int, TValue> elementSelector)
//        => CommonImplementation.ToDictionary<int, TKey, TValue, RangeEnumerable, RangeEnumerator>(ref source, keySelector, elementSelector);

//        public static Dictionary<TKey, TValue> ToDictionary<TKey, TValue>(this RangeEnumerable source, Func<int, TKey> keySelector, Func<int, TValue> elementSelector, IEqualityComparer<TKey> comparer)
//        => CommonImplementation.ToDictionary<int, TKey, TValue, RangeEnumerable, RangeEnumerator>(ref source, keySelector, elementSelector, comparer);

//        // ToHashSet

//        public static HashSet<int> ToHashSet(this RangeEnumerable source)
//        => CommonImplementation.ToHashSet<int, RangeEnumerable, RangeEnumerator>(ref source);

//        public static HashSet<int> ToHashSet(this RangeEnumerable source, IEqualityComparer<int> comparer)
//        => CommonImplementation.ToHashSet<int, RangeEnumerable, RangeEnumerator>(ref source, comparer);

//        // ToList

//        public static List<int> ToList(this RangeEnumerable source)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));

//            var ret = Allocator.Current.GetEmptyList<int>(source.InnerCount);

//            var start = source.Start;

//            for (var i = 0; i < source.InnerCount; i++)
//            {
//                ret.Add(start + i);
//            }

//            return ret;
//        }

//        // ToLookup

//        public static LookupDefaultEnumerable<TKey, int> ToLookup<TKey>(this RangeEnumerable source, Func<int, TKey> keySelector)
//        => CommonImplementation.ToLookup<int, TKey, RangeEnumerable, RangeEnumerator>(ref source, keySelector);

//        public static LookupSpecificEnumerable<TKey, int> ToLookup<TKey>(this RangeEnumerable source, Func<int, TKey> keySelector, IEqualityComparer<TKey> comparer)
//        => CommonImplementation.ToLookup<int, TKey, RangeEnumerable, RangeEnumerator>(ref source, keySelector, comparer);

//        public static LookupDefaultEnumerable<TKey, TElement> ToLookup<TKey, TElement>(this RangeEnumerable source, Func<int, TKey> keySelector, Func<int, TElement> elementSelector)
//        => CommonImplementation.ToLookup<int, TKey, TElement, RangeEnumerable, RangeEnumerator>(ref source, keySelector, elementSelector);

//        public static LookupSpecificEnumerable<TKey, TElement> ToLookup<TKey, TElement>(this RangeEnumerable source, Func<int, TKey> keySelector, Func<int, TElement> elementSelector, IEqualityComparer<TKey> comparer)
//        => CommonImplementation.ToLookup<int, TKey, TElement, RangeEnumerable, RangeEnumerator>(ref source, keySelector, elementSelector, comparer);

//        // Union

//        public static UnionDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, BoxedEnumerable<int>, BoxedEnumerator<int>> Union(this RangeEnumerable source, BoxedEnumerable<int> second)
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, BoxedEnumerable<int>, BoxedEnumerator<int>>(ref source, ref second);

//        public static UnionDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, IEnumerable<int>, IEnumerableBridger<int>, IdentityEnumerator<int>>, IdentityEnumerator<int>> Union(this RangeEnumerable source, IEnumerable<int> second)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(second, nameof(second));

//            return CommonImplementation.UnionImpl<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, IEnumerable<int>, IEnumerableBridger<int>, IdentityEnumerator<int>>, IdentityEnumerator<int>>(ref source, ref bridge);
//        }

//        public static UnionDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, Dictionary<int, TDictionaryValue>.KeyCollection, DictionaryKeysBridger<int, TDictionaryValue>, DictionaryKeysEnumerator<int, TDictionaryValue>>, DictionaryKeysEnumerator<int, TDictionaryValue>> Union<TDictionaryValue>(this RangeEnumerable source, Dictionary<int, TDictionaryValue>.KeyCollection second)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(second, nameof(second));

//            return CommonImplementation.UnionImpl<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, Dictionary<int, TDictionaryValue>.KeyCollection, DictionaryKeysBridger<int, TDictionaryValue>, DictionaryKeysEnumerator<int, TDictionaryValue>>, DictionaryKeysEnumerator<int, TDictionaryValue>>(ref source, ref bridge);
//        }

//        public static UnionDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, Dictionary<TExcept_DictionaryKey, int>.ValueCollection, DictionaryValuesBridger<TExcept_DictionaryKey, int>, DictionaryValuesEnumerator<TExcept_DictionaryKey, int>>, DictionaryValuesEnumerator<TExcept_DictionaryKey, int>> Union<TExcept_DictionaryKey>(this RangeEnumerable source, Dictionary<TExcept_DictionaryKey, int>.ValueCollection second)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(second, nameof(second));

//            return CommonImplementation.UnionImpl<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, Dictionary<TExcept_DictionaryKey, int>.ValueCollection, DictionaryValuesBridger<TExcept_DictionaryKey, int>, DictionaryValuesEnumerator<TExcept_DictionaryKey, int>>, DictionaryValuesEnumerator<TExcept_DictionaryKey, int>>(ref source, ref bridge);
//        }

//        public static UnionDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, HashSet<int>, HashSetBridger<int>, HashSetEnumerator<int>>, HashSetEnumerator<int>> Union(this RangeEnumerable source, HashSet<int> second)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(second, nameof(second));

//            return CommonImplementation.UnionImpl<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, HashSet<int>, HashSetBridger<int>, HashSetEnumerator<int>>, HashSetEnumerator<int>>(ref source, ref bridge);
//        }

//        public static UnionDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, LinkedList<int>, LinkedListBridger<int>, LinkedListEnumerator<int>>, LinkedListEnumerator<int>> Union(this RangeEnumerable source, LinkedList<int> second)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(second, nameof(second));

//            return CommonImplementation.UnionImpl<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, LinkedList<int>, LinkedListBridger<int>, LinkedListEnumerator<int>>, LinkedListEnumerator<int>>(ref source, ref bridge);
//        }

//        public static UnionDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, List<int>, ListBridger<int>, ListEnumerator<int>>, ListEnumerator<int>> Union(this RangeEnumerable source, List<int> second)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(second, nameof(second));

//            return CommonImplementation.UnionImpl<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, List<int>, ListBridger<int>, ListEnumerator<int>>, ListEnumerator<int>>(ref source, ref bridge);
//        }

//        public static UnionDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, Queue<int>, QueueBridger<int>, QueueEnumerator<int>>, QueueEnumerator<int>> Union(this RangeEnumerable source, Queue<int> second)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(second, nameof(second));

//            return CommonImplementation.UnionImpl<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, Queue<int>, QueueBridger<int>, QueueEnumerator<int>>, QueueEnumerator<int>>(ref source, ref bridge);
//        }

//        public static UnionDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, SortedDictionary<int, TExcept_DictionaryValue>.KeyCollection, SortedDictionaryKeysBridger<int, TExcept_DictionaryValue>, SortedDictionaryKeysEnumerator<int, TExcept_DictionaryValue>>, SortedDictionaryKeysEnumerator<int, TExcept_DictionaryValue>> Union<TExcept_DictionaryValue>(this RangeEnumerable source, SortedDictionary<int, TExcept_DictionaryValue>.KeyCollection second)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(second, nameof(second));

//            return CommonImplementation.UnionImpl<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, SortedDictionary<int, TExcept_DictionaryValue>.KeyCollection, SortedDictionaryKeysBridger<int, TExcept_DictionaryValue>, SortedDictionaryKeysEnumerator<int, TExcept_DictionaryValue>>, SortedDictionaryKeysEnumerator<int, TExcept_DictionaryValue>>(ref source, ref bridge);
//        }

//        public static UnionDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, SortedDictionary<TExcept_DictionaryKey, int>.ValueCollection, SortedDictionaryValuesBridger<TExcept_DictionaryKey, int>, SortedDictionaryValuesEnumerator<TExcept_DictionaryKey, int>>, SortedDictionaryValuesEnumerator<TExcept_DictionaryKey, int>> Union<TExcept_DictionaryKey>(this RangeEnumerable source, SortedDictionary<TExcept_DictionaryKey, int>.ValueCollection second)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(second, nameof(second));

//            return CommonImplementation.UnionImpl<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, SortedDictionary<TExcept_DictionaryKey, int>.ValueCollection, SortedDictionaryValuesBridger<TExcept_DictionaryKey, int>, SortedDictionaryValuesEnumerator<TExcept_DictionaryKey, int>>, SortedDictionaryValuesEnumerator<TExcept_DictionaryKey, int>>(ref source, ref bridge);
//        }

//        public static UnionDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, SortedSet<int>, SortedSetBridger<int>, SortedSetEnumerator<int>>, SortedSetEnumerator<int>> Union(this RangeEnumerable source, SortedSet<int> second)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(second, nameof(second));

//            return CommonImplementation.UnionImpl<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, SortedSet<int>, SortedSetBridger<int>, SortedSetEnumerator<int>>, SortedSetEnumerator<int>>(ref source, ref bridge);
//        }

//        public static UnionDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, Stack<int>, StackBridger<int>, StackEnumerator<int>>, StackEnumerator<int>> Union(this RangeEnumerable source, Stack<int> second)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(second, nameof(second));

//            return CommonImplementation.UnionImpl<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, Stack<int>, StackBridger<int>, StackEnumerator<int>>, StackEnumerator<int>>(ref source, ref bridge);
//        }

//        public static UnionDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, int[], ArrayBridger<int>, ArrayEnumerator<int>>, ArrayEnumerator<int>> Union(this RangeEnumerable source, int[] second)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(second, nameof(second));

//            return CommonImplementation.UnionImpl<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, int[], ArrayBridger<int>, ArrayEnumerator<int>>, ArrayEnumerator<int>>(ref source, ref bridge);
//        }

//        public static UnionDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, TExcept_IdentityBridgeType, TExcept_IdentityBridger, TExcept_IdentityEnumerator>, TExcept_IdentityEnumerator> Union<TExcept_IdentityBridgeType, TExcept_IdentityBridger, TExcept_IdentityEnumerator>(this RangeEnumerable source, IdentityEnumerable<int, TExcept_IdentityBridgeType, TExcept_IdentityBridger, TExcept_IdentityEnumerator> second)
//        where TExcept_IdentityBridgeType : class
//        where TExcept_IdentityEnumerator : struct, IStructEnumerator<int>
//        where TExcept_IdentityBridger : struct, IStructBridger<int, TExcept_IdentityBridgeType, TExcept_IdentityEnumerator>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, TExcept_IdentityBridgeType, TExcept_IdentityBridger, TExcept_IdentityEnumerator>, TExcept_IdentityEnumerator>(ref source, ref second);

//        public static UnionDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, ConcatEnumerable<int, TInnerLeftEnumerable, TInnerLeftEnumerator, TInnerRightEnumerable, TInnerRightEnumerator>, ConcatEnumerator<int, TInnerLeftEnumerator, TInnerRightEnumerator>> Union<TInnerLeftEnumerable, TInnerLeftEnumerator, TInnerRightEnumerable, TInnerRightEnumerator>(this RangeEnumerable source, ConcatEnumerable<int, TInnerLeftEnumerable, TInnerLeftEnumerator, TInnerRightEnumerable, TInnerRightEnumerator> second)
//        where TInnerLeftEnumerable : struct, IStructEnumerable<int, TInnerLeftEnumerator>
//        where TInnerLeftEnumerator : struct, IStructEnumerator<int>
//        where TInnerRightEnumerable : struct, IStructEnumerable<int, TInnerRightEnumerator>
//        where TInnerRightEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, ConcatEnumerable<int, TInnerLeftEnumerable, TInnerLeftEnumerator, TInnerRightEnumerable, TInnerRightEnumerator>, ConcatEnumerator<int, TInnerLeftEnumerator, TInnerRightEnumerator>>(ref source, ref second);

//        public static UnionDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, EmptyEnumerable<int>, EmptyEnumerator<int>> Union(this RangeEnumerable source, EmptyEnumerable<int> second)
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, EmptyEnumerable<int>, EmptyEnumerator<int>>(ref source, ref second);

//        public static UnionDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, RepeatEnumerable<int>, RepeatEnumerator<int>> Union(this RangeEnumerable source, RepeatEnumerable<int> second)
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, RepeatEnumerable<int>, RepeatEnumerator<int>>(ref source, ref second);

//        public static UnionDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, SelectEnumerable<TExcept_SelectInItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, SelectEnumerator<TExcept_SelectInItem, int, TExcept_InnerEnumerator>> Union<TExcept_SelectInItem, TExcept_InnerEnumerable, TExcept_InnerEnumerator>(this RangeEnumerable source, SelectEnumerable<TExcept_SelectInItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator> second)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<TExcept_SelectInItem, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<TExcept_SelectInItem>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, SelectEnumerable<TExcept_SelectInItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, SelectEnumerator<TExcept_SelectInItem, int, TExcept_InnerEnumerator>>(ref source, ref second);

//        public static UnionDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, SelectIndexedEnumerable<TExcept_SelectInItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, SelectIndexedEnumerator<TExcept_SelectInItem, int, TExcept_InnerEnumerator>> Union<TExcept_SelectInItem, TExcept_InnerEnumerable, TExcept_InnerEnumerator>(this RangeEnumerable source, SelectIndexedEnumerable<TExcept_SelectInItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator> second)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<TExcept_SelectInItem, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<TExcept_SelectInItem>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, SelectIndexedEnumerable<TExcept_SelectInItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, SelectIndexedEnumerator<TExcept_SelectInItem, int, TExcept_InnerEnumerator>>(ref source, ref second);

//        public static UnionDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, SelectManyBridgeEnumerable<TExcept_SelectManyInItem, int, TExcept_BridgeType, TExcept_Bridger, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_ProjectedEnumerator>, SelectManyBridgeEnumerator<TExcept_SelectManyInItem, int, TExcept_BridgeType, TExcept_Bridger, TExcept_InnerEnumerator, TExcept_ProjectedEnumerator>> Union<TExcept_SelectManyInItem, TExcept_BridgeType, TExcept_Bridger, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_ProjectedEnumerator>(this RangeEnumerable source, SelectManyBridgeEnumerable<TExcept_SelectManyInItem, int, TExcept_BridgeType, TExcept_Bridger, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_ProjectedEnumerator> second)
//        where TExcept_BridgeType : class
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<TExcept_SelectManyInItem, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<TExcept_SelectManyInItem>
//        where TExcept_ProjectedEnumerator : struct, IStructEnumerator<int>
//        where TExcept_Bridger : struct, IStructBridger<int, TExcept_BridgeType, TExcept_ProjectedEnumerator>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, SelectManyBridgeEnumerable<TExcept_SelectManyInItem, int, TExcept_BridgeType, TExcept_Bridger, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_ProjectedEnumerator>, SelectManyBridgeEnumerator<TExcept_SelectManyInItem, int, TExcept_BridgeType, TExcept_Bridger, TExcept_InnerEnumerator, TExcept_ProjectedEnumerator>>(ref source, ref second);

//        public static UnionDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, SelectManyIndexedBridgeEnumerable<TExcept_SelectManyInItem, int, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerator>, SelectManyIndexedBridgeEnumerator<TExcept_SelectManyInItem, int, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerator>> Union<TExcept_SelectManyInItem, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyIndexedBridgeEnumerable<TExcept_SelectManyInItem, int, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerator> second)
//        where TExcept_SelectManyBridgeType : class
//        where TExcept_SelectManyInnerEnumerable : struct, IStructEnumerable<TExcept_SelectManyInItem, TExcept_SelectManyInnerEnumerator>
//        where TExcept_SelectManyInnerEnumerator : struct, IStructEnumerator<TExcept_SelectManyInItem>
//        where TExcept_SelectManyProjectedEnumerator : struct, IStructEnumerator<int>
//        where TExcept_Bridger : struct, IStructBridger<int, TExcept_SelectManyBridgeType, TExcept_SelectManyProjectedEnumerator>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, SelectManyIndexedBridgeEnumerable<TExcept_SelectManyInItem, int, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerator>, SelectManyIndexedBridgeEnumerator<TExcept_SelectManyInItem, int, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerator>>(ref source, ref second);

//        public static UnionDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, SelectManyCollectionBridgeEnumerable<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_SelectManyProjectedEnumerator>, SelectManyCollectionBridgeEnumerator<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_InnerEnumerator, TExcept_SelectManyProjectedEnumerator>> Union<TExcept_SelectManyInItem, TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_SelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyCollectionBridgeEnumerable<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_SelectManyProjectedEnumerator> second)
//        where TExcept_SelectManyBridgeType : class
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<TExcept_SelectManyInItem, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<TExcept_SelectManyInItem>
//        where TExcept_SelectManyProjectedEnumerator : struct, IStructEnumerator<TExcept_CollectionItem>
//        where TExcept_Bridger : struct, IStructBridger<TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_SelectManyProjectedEnumerator>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, SelectManyCollectionBridgeEnumerable<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_SelectManyProjectedEnumerator>, SelectManyCollectionBridgeEnumerator<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_InnerEnumerator, TExcept_SelectManyProjectedEnumerator>>(ref source, ref second);

//        public static UnionDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, SelectManyCollectionIndexedBridgeEnumerable<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerator>, SelectManyCollectionIndexedBridgeEnumerator<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerator>> Union<TExcept_SelectManyInItem, TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyCollectionIndexedBridgeEnumerable<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerator> second)
//        where TExcept_SelectManyBridgeType : class
//        where TExcept_SelectManyInnerEnumerable : struct, IStructEnumerable<TExcept_SelectManyInItem, TExcept_SelectManyInnerEnumerator>
//        where TExcept_SelectManyInnerEnumerator : struct, IStructEnumerator<TExcept_SelectManyInItem>
//        where TExcept_SelectManyProjectedEnumerator : struct, IStructEnumerator<TExcept_CollectionItem>
//        where TExcept_Bridger : struct, IStructBridger<TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_SelectManyProjectedEnumerator>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, SelectManyCollectionIndexedBridgeEnumerable<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerator>, SelectManyCollectionIndexedBridgeEnumerator<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerator>>(ref source, ref second);

//        public static UnionDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, SelectManyEnumerable<TExcept_SelectManyInItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_ProjectedEnumerable, TExcept_ProjectedEnumerator>, SelectManyEnumerator<TExcept_SelectManyInItem, int, TExcept_InnerEnumerator, TExcept_ProjectedEnumerable, TExcept_ProjectedEnumerator>> Union<TExcept_SelectManyInItem, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_ProjectedEnumerable, TExcept_ProjectedEnumerator>(this RangeEnumerable source, SelectManyEnumerable<TExcept_SelectManyInItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_ProjectedEnumerable, TExcept_ProjectedEnumerator> second)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<TExcept_SelectManyInItem, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<TExcept_SelectManyInItem>
//        where TExcept_ProjectedEnumerable : struct, IStructEnumerable<int, TExcept_ProjectedEnumerator>
//        where TExcept_ProjectedEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, SelectManyEnumerable<TExcept_SelectManyInItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_ProjectedEnumerable, TExcept_ProjectedEnumerator>, SelectManyEnumerator<TExcept_SelectManyInItem, int, TExcept_InnerEnumerator, TExcept_ProjectedEnumerable, TExcept_ProjectedEnumerator>>(ref source, ref second);

//        public static UnionDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, SelectManyIndexedEnumerable<TExcept_SelectManyInItem, int, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerable, TExcept_SelectManyProjectedEnumerator>, SelectManyIndexedEnumerator<TExcept_SelectManyInItem, int, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerable, TExcept_SelectManyProjectedEnumerator>> Union<TExcept_SelectManyInItem, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerable, TExcept_SelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyIndexedEnumerable<TExcept_SelectManyInItem, int, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerable, TExcept_SelectManyProjectedEnumerator> second)
//        where TExcept_SelectManyInnerEnumerable : struct, IStructEnumerable<TExcept_SelectManyInItem, TExcept_SelectManyInnerEnumerator>
//        where TExcept_SelectManyInnerEnumerator : struct, IStructEnumerator<TExcept_SelectManyInItem>
//        where TExcept_SelectManyProjectedEnumerable : struct, IStructEnumerable<int, TExcept_SelectManyProjectedEnumerator>
//        where TExcept_SelectManyProjectedEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, SelectManyIndexedEnumerable<TExcept_SelectManyInItem, int, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerable, TExcept_SelectManyProjectedEnumerator>, SelectManyIndexedEnumerator<TExcept_SelectManyInItem, int, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerable, TExcept_SelectManyProjectedEnumerator>>(ref source, ref second);

//        public static UnionDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, SelectManyCollectionEnumerable<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_ProjectedEnumerable, TExcept_ProjectedEnumerator>, SelectManyCollectionEnumerator<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_InnerEnumerator, TExcept_ProjectedEnumerable, TExcept_ProjectedEnumerator>> Union<TExcept_SelectManyInItem, TExcept_CollectionItem, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_ProjectedEnumerable, TExcept_ProjectedEnumerator>(this RangeEnumerable source, SelectManyCollectionEnumerable<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_ProjectedEnumerable, TExcept_ProjectedEnumerator> second)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<TExcept_SelectManyInItem, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<TExcept_SelectManyInItem>
//        where TExcept_ProjectedEnumerable : struct, IStructEnumerable<TExcept_CollectionItem, TExcept_ProjectedEnumerator>
//        where TExcept_ProjectedEnumerator : struct, IStructEnumerator<TExcept_CollectionItem>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, SelectManyCollectionEnumerable<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_ProjectedEnumerable, TExcept_ProjectedEnumerator>, SelectManyCollectionEnumerator<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_InnerEnumerator, TExcept_ProjectedEnumerable, TExcept_ProjectedEnumerator>>(ref source, ref second);

//        public static UnionDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, SelectManyCollectionIndexedEnumerable<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerable, TExcept_SelectManyProjectedEnumerator>, SelectManyCollectionIndexedEnumerator<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerable, TExcept_SelectManyProjectedEnumerator>> Union<TExcept_SelectManyInItem, TExcept_CollectionItem, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerable, TExcept_SelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyCollectionIndexedEnumerable<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerable, TExcept_SelectManyProjectedEnumerator> second)
//        where TExcept_SelectManyInnerEnumerable : struct, IStructEnumerable<TExcept_SelectManyInItem, TExcept_SelectManyInnerEnumerator>
//        where TExcept_SelectManyInnerEnumerator : struct, IStructEnumerator<TExcept_SelectManyInItem>
//        where TExcept_SelectManyProjectedEnumerable : struct, IStructEnumerable<TExcept_CollectionItem, TExcept_SelectManyProjectedEnumerator>
//        where TExcept_SelectManyProjectedEnumerator : struct, IStructEnumerator<TExcept_CollectionItem>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, SelectManyCollectionIndexedEnumerable<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerable, TExcept_SelectManyProjectedEnumerator>, SelectManyCollectionIndexedEnumerator<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerable, TExcept_SelectManyProjectedEnumerator>>(ref source, ref second);

//        public static UnionDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, WhereEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, WhereEnumerator<int, TExcept_InnerEnumerator>> Union<TExcept_InnerEnumerable, TExcept_InnerEnumerator>(this RangeEnumerable source, WhereEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator> second)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<int, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, WhereEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, WhereEnumerator<int, TExcept_InnerEnumerator>>(ref source, ref second);

//        public static UnionDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, WhereIndexedEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, WhereIndexedEnumerator<int, TExcept_InnerEnumerator>> Union<TExcept_InnerEnumerable, TExcept_InnerEnumerator>(this RangeEnumerable source, WhereIndexedEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator> second)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<int, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, WhereIndexedEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, WhereIndexedEnumerator<int, TExcept_InnerEnumerator>>(ref source, ref second);

//        public static UnionDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, DefaultIfEmptyDefaultEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, DefaultIfEmptyDefaultEnumerator<int, TExcept_InnerEnumerator>> Union<TExcept_InnerEnumerable, TExcept_InnerEnumerator>(this RangeEnumerable source, DefaultIfEmptyDefaultEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator> second)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<int, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, DefaultIfEmptyDefaultEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, DefaultIfEmptyDefaultEnumerator<int, TExcept_InnerEnumerator>>(ref source, ref second);

//        public static UnionDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, DefaultIfEmptySpecificEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, DefaultIfEmptySpecificEnumerator<int, TExcept_InnerEnumerator>> Union<TExcept_InnerEnumerable, TExcept_InnerEnumerator>(this RangeEnumerable source, DefaultIfEmptySpecificEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator> second)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<int, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, DefaultIfEmptySpecificEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, DefaultIfEmptySpecificEnumerator<int, TExcept_InnerEnumerator>>(ref source, ref second);

//        public static UnionDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, TakeEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, TakeEnumerator<int, TExcept_InnerEnumerator>> Union<TExcept_InnerEnumerable, TExcept_InnerEnumerator>(this RangeEnumerable source, TakeEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator> second)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<int, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, TakeEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, TakeEnumerator<int, TExcept_InnerEnumerator>>(ref source, ref second);

//        public static UnionDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, TakeWhileEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, TakeWhileEnumerator<int, TExcept_InnerEnumerator>> Union<TExcept_InnerEnumerable, TExcept_InnerEnumerator>(this RangeEnumerable source, TakeWhileEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator> second)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<int, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, TakeWhileEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, TakeWhileEnumerator<int, TExcept_InnerEnumerator>>(ref source, ref second);

//        public static UnionDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, TakeWhileIndexedEnumerable<int, TInnerEnumerable, TInnerEnumerator>, TakeWhileIndexedEnumerator<int, TInnerEnumerator>> Union<TInnerEnumerable, TInnerEnumerator>(this RangeEnumerable source, TakeWhileIndexedEnumerable<int, TInnerEnumerable, TInnerEnumerator> second)
//        where TInnerEnumerable : struct, IStructEnumerable<int, TInnerEnumerator>
//        where TInnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, TakeWhileIndexedEnumerable<int, TInnerEnumerable, TInnerEnumerator>, TakeWhileIndexedEnumerator<int, TInnerEnumerator>>(ref source, ref second);

//        public static UnionDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, SkipEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, SkipEnumerator<int, TExcept_InnerEnumerator>> Union<TExcept_InnerEnumerable, TExcept_InnerEnumerator>(this RangeEnumerable source, SkipEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator> second)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<int, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, SkipEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, SkipEnumerator<int, TExcept_InnerEnumerator>>(ref source, ref second);

//        public static UnionDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, SkipWhileEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, SkipWhileEnumerator<int, TExcept_InnerEnumerator>> Union<TExcept_InnerEnumerable, TExcept_InnerEnumerator>(this RangeEnumerable source, SkipWhileEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator> second)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<int, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, SkipWhileEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, SkipWhileEnumerator<int, TExcept_InnerEnumerator>>(ref source, ref second);

//        public static UnionDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, SkipWhileIndexedEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, SkipWhileIndexedEnumerator<int, TExcept_InnerEnumerator>> Union<TExcept_InnerEnumerable, TExcept_InnerEnumerator>(this RangeEnumerable source, SkipWhileIndexedEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator> second)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<int, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, SkipWhileIndexedEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, SkipWhileIndexedEnumerator<int, TExcept_InnerEnumerator>>(ref source, ref second);

//        public static UnionDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, CastEnumerable<TExcept_InItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, CastEnumerator<TExcept_InItem, int, TExcept_InnerEnumerator>> Union<TExcept_InItem, TExcept_InnerEnumerable, TExcept_InnerEnumerator>(this RangeEnumerable source, CastEnumerable<TExcept_InItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator> second)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<TExcept_InItem, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<TExcept_InItem>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, CastEnumerable<TExcept_InItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, CastEnumerator<TExcept_InItem, int, TExcept_InnerEnumerator>>(ref source, ref second);

//        public static UnionDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, OfTypeEnumerable<TExcept_InItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, OfTypeEnumerator<TExcept_InItem, int, TExcept_InnerEnumerator>> Union<TExcept_InItem, TExcept_InnerEnumerable, TExcept_InnerEnumerator>(this RangeEnumerable source, OfTypeEnumerable<TExcept_InItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator> second)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<TExcept_InItem, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<TExcept_InItem>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, OfTypeEnumerable<TExcept_InItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, OfTypeEnumerator<TExcept_InItem, int, TExcept_InnerEnumerator>>(ref source, ref second);

//        public static UnionDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, ZipEnumerable<int, TExcept_ZipFirsint, TExcept_ZipSecondItem, TExcept_ZipFirstEnumerable, TExcept_ZipFirstEnumerator, TExcept_ZipSecondEnumerable, TExcept_ZipSecondEnumerator>, ZipEnumerator<int, TExcept_ZipFirsint, TExcept_ZipSecondItem, TExcept_ZipFirstEnumerator, TExcept_ZipSecondEnumerator>> Union<TExcept_ZipFirsint, TExcept_ZipSecondItem, TExcept_ZipFirstEnumerable, TExcept_ZipFirstEnumerator, TExcept_ZipSecondEnumerable, TExcept_ZipSecondEnumerator>(this RangeEnumerable source, ZipEnumerable<int, TExcept_ZipFirsint, TExcept_ZipSecondItem, TExcept_ZipFirstEnumerable, TExcept_ZipFirstEnumerator, TExcept_ZipSecondEnumerable, TExcept_ZipSecondEnumerator> second)
//        where TExcept_ZipFirstEnumerable : struct, IStructEnumerable<TExcept_ZipFirsint, TExcept_ZipFirstEnumerator>
//        where TExcept_ZipFirstEnumerator : struct, IStructEnumerator<TExcept_ZipFirsint>
//        where TExcept_ZipSecondEnumerable : struct, IStructEnumerable<TExcept_ZipSecondItem, TExcept_ZipSecondEnumerator>
//        where TExcept_ZipSecondEnumerator : struct, IStructEnumerator<TExcept_ZipSecondItem>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, ZipEnumerable<int, TExcept_ZipFirsint, TExcept_ZipSecondItem, TExcept_ZipFirstEnumerable, TExcept_ZipFirstEnumerator, TExcept_ZipSecondEnumerable, TExcept_ZipSecondEnumerator>, ZipEnumerator<int, TExcept_ZipFirsint, TExcept_ZipSecondItem, TExcept_ZipFirstEnumerator, TExcept_ZipSecondEnumerator>>(ref source, ref second);

//        public static UnionDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, SelectSelectEnumerable<int, TExcept_SelectInnerItem, TExcept_SelectInnerEnumerable, TExcept_SelectInnerEnumerator, TExcept_SelectProjection>, SelectSelectEnumerator<int, TExcept_SelectInnerItem, TExcept_SelectInnerEnumerator, TExcept_SelectProjection>> Union<TExcept_SelectInnerItem, TExcept_SelectInnerEnumerable, TExcept_SelectInnerEnumerator, TExcept_SelectProjection>(this RangeEnumerable source, SelectSelectEnumerable<int, TExcept_SelectInnerItem, TExcept_SelectInnerEnumerable, TExcept_SelectInnerEnumerator, TExcept_SelectProjection> second)
//        where TExcept_SelectInnerEnumerable : struct, IStructEnumerable<TExcept_SelectInnerItem, TExcept_SelectInnerEnumerator>
//        where TExcept_SelectInnerEnumerator : struct, IStructEnumerator<TExcept_SelectInnerItem>
//        where TExcept_SelectProjection : struct, IStructProjection<int, TExcept_SelectInnerItem>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, SelectSelectEnumerable<int, TExcept_SelectInnerItem, TExcept_SelectInnerEnumerable, TExcept_SelectInnerEnumerator, TExcept_SelectProjection>, SelectSelectEnumerator<int, TExcept_SelectInnerItem, TExcept_SelectInnerEnumerator, TExcept_SelectProjection>>(ref source, ref second);

//        public static UnionDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, SelectWhereEnumerable<int, TExcept_SelectInnerItem, TExcept_SelectInnerEnumerable, TExcept_SelectInnerEnumerator, TExcept_SelectProjection, TExcept_SelectPredicate>, SelectWhereEnumerator<int, TExcept_SelectInnerItem, TExcept_SelectInnerEnumerator, TExcept_SelectProjection, TExcept_SelectPredicate>> Union<TExcept_SelectInnerItem, TExcept_SelectInnerEnumerable, TExcept_SelectInnerEnumerator, TExcept_SelectProjection, TExcept_SelectPredicate>(this RangeEnumerable source, SelectWhereEnumerable<int, TExcept_SelectInnerItem, TExcept_SelectInnerEnumerable, TExcept_SelectInnerEnumerator, TExcept_SelectProjection, TExcept_SelectPredicate> second)
//        where TExcept_SelectInnerEnumerable : struct, IStructEnumerable<TExcept_SelectInnerItem, TExcept_SelectInnerEnumerator>
//        where TExcept_SelectInnerEnumerator : struct, IStructEnumerator<TExcept_SelectInnerItem>
//        where TExcept_SelectProjection : struct, IStructProjection<int, TExcept_SelectInnerItem>
//        where TExcept_SelectPredicate : struct, IStructPredicate<int>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, SelectWhereEnumerable<int, TExcept_SelectInnerItem, TExcept_SelectInnerEnumerable, TExcept_SelectInnerEnumerator, TExcept_SelectProjection, TExcept_SelectPredicate>, SelectWhereEnumerator<int, TExcept_SelectInnerItem, TExcept_SelectInnerEnumerator, TExcept_SelectProjection, TExcept_SelectPredicate>>(ref source, ref second);

//        public static UnionDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, WhereWhereEnumerable<int, TExcept_WhereInnerEnumerable, TExcept_WhereInnerEnumerator, TExcept_WherePredicate>, WhereWhereEnumerator<int, TExcept_WhereInnerEnumerator, TExcept_WherePredicate>> Union<TExcept_WhereInnerEnumerable, TExcept_WhereInnerEnumerator, TExcept_WherePredicate>(this RangeEnumerable source, WhereWhereEnumerable<int, TExcept_WhereInnerEnumerable, TExcept_WhereInnerEnumerator, TExcept_WherePredicate> second)
//        where TExcept_WhereInnerEnumerable : struct, IStructEnumerable<int, TExcept_WhereInnerEnumerator>
//        where TExcept_WhereInnerEnumerator : struct, IStructEnumerator<int>
//        where TExcept_WherePredicate : struct, IStructPredicate<int>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, WhereWhereEnumerable<int, TExcept_WhereInnerEnumerable, TExcept_WhereInnerEnumerator, TExcept_WherePredicate>, WhereWhereEnumerator<int, TExcept_WhereInnerEnumerator, TExcept_WherePredicate>>(ref source, ref second);

//        public static UnionDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, WhereSelectEnumerable<int, TExcept_WhereInnerItem, TExcept_WhereInnerEnumerable, TExcept_WhereInnerEnumerator, TExcept_WherePredicate, TExcept_WhereProjection>, WhereSelectEnumerator<int, TExcept_WhereInnerItem, TExcept_WhereInnerEnumerator, TExcept_WherePredicate, TExcept_WhereProjection>> Union<TExcept_WhereInnerItem, TExcept_WhereInnerEnumerable, TExcept_WhereInnerEnumerator, TExcept_WherePredicate, TExcept_WhereProjection>(this RangeEnumerable source, WhereSelectEnumerable<int, TExcept_WhereInnerItem, TExcept_WhereInnerEnumerable, TExcept_WhereInnerEnumerator, TExcept_WherePredicate, TExcept_WhereProjection> second)
//        where TExcept_WhereInnerEnumerable : struct, IStructEnumerable<TExcept_WhereInnerItem, TExcept_WhereInnerEnumerator>
//        where TExcept_WhereInnerEnumerator : struct, IStructEnumerator<TExcept_WhereInnerItem>
//        where TExcept_WherePredicate : struct, IStructPredicate<TExcept_WhereInnerItem>
//        where TExcept_WhereProjection : struct, IStructProjection<int, TExcept_WhereInnerItem>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, WhereSelectEnumerable<int, TExcept_WhereInnerItem, TExcept_WhereInnerEnumerable, TExcept_WhereInnerEnumerator, TExcept_WherePredicate, TExcept_WhereProjection>, WhereSelectEnumerator<int, TExcept_WhereInnerItem, TExcept_WhereInnerEnumerator, TExcept_WherePredicate, TExcept_WhereProjection>>(ref source, ref second);

//        public static UnionDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, DistinctDefaultEnumerable<int, TExcept_DistinctInnerEnumerable, TExcept_DistinctInnerEnumerator>, DistinctDefaultEnumerator<int, TExcept_DistinctInnerEnumerator>> Union<TExcept_DistinctInnerEnumerable, TExcept_DistinctInnerEnumerator>(this RangeEnumerable source, DistinctDefaultEnumerable<int, TExcept_DistinctInnerEnumerable, TExcept_DistinctInnerEnumerator> second)
//        where TExcept_DistinctInnerEnumerable : struct, IStructEnumerable<int, TExcept_DistinctInnerEnumerator>
//        where TExcept_DistinctInnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, DistinctDefaultEnumerable<int, TExcept_DistinctInnerEnumerable, TExcept_DistinctInnerEnumerator>, DistinctDefaultEnumerator<int, TExcept_DistinctInnerEnumerator>>(ref source, ref second);

//        public static UnionDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, DistinctSpecificEnumerable<int, TExcept_DistinctInnerEnumerable, TExcept_DistinctInnerEnumerator>, DistinctSpecificEnumerator<int, TExcept_DistinctInnerEnumerator>> Union<TExcept_DistinctInnerEnumerable, TExcept_DistinctInnerEnumerator>(this RangeEnumerable source, DistinctSpecificEnumerable<int, TExcept_DistinctInnerEnumerable, TExcept_DistinctInnerEnumerator> second)
//        where TExcept_DistinctInnerEnumerable : struct, IStructEnumerable<int, TExcept_DistinctInnerEnumerator>
//        where TExcept_DistinctInnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, DistinctSpecificEnumerable<int, TExcept_DistinctInnerEnumerable, TExcept_DistinctInnerEnumerator>, DistinctSpecificEnumerator<int, TExcept_DistinctInnerEnumerator>>(ref source, ref second);

//        public static UnionDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, EmptyEnumerable<int>, EmptyEnumerator<int>> Union(this RangeEnumerable source, EmptyOrderedEnumerable<int> second)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            if (second.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(second));

//            var empty = EmptyCache<int>.Empty;
//            return CommonImplementation.UnionImpl<int, RangeEnumerable, RangeEnumerator, EmptyEnumerable<int>, EmptyEnumerator<int>>(ref source, ref empty);
//        }

//        public static UnionDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, ExceptDefaultEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>, ExceptDefaultEnumerator<int, TExceptFirstEnumerator, TExceptSecondEnumerator>> Union<TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>(this RangeEnumerable source, ExceptDefaultEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator> second)
//        where TExceptFirstEnumerable : struct, IStructEnumerable<int, TExceptFirstEnumerator>
//        where TExceptFirstEnumerator : struct, IStructEnumerator<int>
//        where TExceptSecondEnumerable : struct, IStructEnumerable<int, TExceptSecondEnumerator>
//        where TExceptSecondEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, ExceptDefaultEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>, ExceptDefaultEnumerator<int, TExceptFirstEnumerator, TExceptSecondEnumerator>>(ref source, ref second);

//        public static UnionDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, ExceptSpecificEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>, ExceptSpecificEnumerator<int, TExceptFirstEnumerator, TExceptSecondEnumerator>> Union<TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>(this RangeEnumerable source, ExceptSpecificEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator> second)
//        where TExceptFirstEnumerable : struct, IStructEnumerable<int, TExceptFirstEnumerator>
//        where TExceptFirstEnumerator : struct, IStructEnumerator<int>
//        where TExceptSecondEnumerable : struct, IStructEnumerable<int, TExceptSecondEnumerator>
//        where TExceptSecondEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, ExceptSpecificEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>, ExceptSpecificEnumerator<int, TExceptFirstEnumerator, TExceptSecondEnumerator>>(ref source, ref second);

//        public static UnionDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, IntersectDefaultEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>, IntersectDefaultEnumerator<int, TExceptFirstEnumerator, TExceptSecondEnumerator>> Union<TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>(this RangeEnumerable source, IntersectDefaultEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator> second)
//        where TExceptFirstEnumerable : struct, IStructEnumerable<int, TExceptFirstEnumerator>
//        where TExceptFirstEnumerator : struct, IStructEnumerator<int>
//        where TExceptSecondEnumerable : struct, IStructEnumerable<int, TExceptSecondEnumerator>
//        where TExceptSecondEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, IntersectDefaultEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>, IntersectDefaultEnumerator<int, TExceptFirstEnumerator, TExceptSecondEnumerator>>(ref source, ref second);

//        public static UnionDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, IntersectSpecificEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>, IntersectSpecificEnumerator<int, TExceptFirstEnumerator, TExceptSecondEnumerator>> Union<TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>(this RangeEnumerable source, IntersectSpecificEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator> second)
//        where TExceptFirstEnumerable : struct, IStructEnumerable<int, TExceptFirstEnumerator>
//        where TExceptFirstEnumerator : struct, IStructEnumerator<int>
//        where TExceptSecondEnumerable : struct, IStructEnumerable<int, TExceptSecondEnumerator>
//        where TExceptSecondEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, IntersectSpecificEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>, IntersectSpecificEnumerator<int, TExceptFirstEnumerator, TExceptSecondEnumerator>>(ref source, ref second);

//        public static UnionDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, UnionDefaultEnumerable<int, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator>, UnionDefaultEnumerator<int, TUnionFirstEnumerator, TUnionSecondEnumerator>> Union<TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator>(this RangeEnumerable source, UnionDefaultEnumerable<int, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator> second)
//        where TUnionFirstEnumerable : struct, IStructEnumerable<int, TUnionFirstEnumerator>
//        where TUnionFirstEnumerator : struct, IStructEnumerator<int>
//        where TUnionSecondEnumerable : struct, IStructEnumerable<int, TUnionSecondEnumerator>
//        where TUnionSecondEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, UnionDefaultEnumerable<int, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator>, UnionDefaultEnumerator<int, TUnionFirstEnumerator, TUnionSecondEnumerator>>(ref source, ref second);

//        public static UnionDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, UnionSpecificEnumerable<int, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator>, UnionSpecificEnumerator<int, TUnionFirstEnumerator, TUnionSecondEnumerator>> Union<TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator>(this RangeEnumerable source, UnionSpecificEnumerable<int, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator> second)
//        where TUnionFirstEnumerable : struct, IStructEnumerable<int, TUnionFirstEnumerator>
//        where TUnionFirstEnumerator : struct, IStructEnumerator<int>
//        where TUnionSecondEnumerable : struct, IStructEnumerable<int, TUnionSecondEnumerator>
//        where TUnionSecondEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, UnionSpecificEnumerable<int, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator>, UnionSpecificEnumerator<int, TUnionFirstEnumerator, TUnionSecondEnumerator>>(ref source, ref second);

//        public static UnionDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, GroupedEnumerable<TGroupedKey, int>, GroupedEnumerator<int>> Union<TGroupedKey>(this RangeEnumerable source, GroupedEnumerable<TGroupedKey, int> second)
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, GroupedEnumerable<TGroupedKey, int>, GroupedEnumerator<int>>(ref source, ref second);

//        public static UnionDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, GroupingEnumerable<TGroupedKey, int>, GroupingEnumerator<int>> Union<TGroupedKey>(this RangeEnumerable source, GroupingEnumerable<TGroupedKey, int> second)
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, GroupingEnumerable<TGroupedKey, int>, GroupingEnumerator<int>>(ref source, ref second);

//        public static UnionDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, ReverseEnumerable<int, TReverseEnumerable, TReverseEnumerator>, ReverseEnumerator<int>> Union<TReverseEnumerable, TReverseEnumerator>(this RangeEnumerable source, ReverseEnumerable<int, TReverseEnumerable, TReverseEnumerator> second)
//        where TReverseEnumerable : struct, IStructEnumerable<int, TReverseEnumerator>
//        where TReverseEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, ReverseEnumerable<int, TReverseEnumerable, TReverseEnumerator>, ReverseEnumerator<int>>(ref source, ref second);

//        public static UnionDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, OrderByEnumerable<int, TOrderByKey, TOrderByEnumerable, TOrderByEnumerator, TOrderByComparer>, OrderByEnumerator<int, TOrderByKey, TOrderByEnumerator, TOrderByComparer>> Union<TOrderByKey, TOrderByEnumerable, TOrderByEnumerator, TOrderByComparer>(this RangeEnumerable source, OrderByEnumerable<int, TOrderByKey, TOrderByEnumerable, TOrderByEnumerator, TOrderByComparer> second)
//        where TOrderByEnumerable : struct, IStructEnumerable<int, TOrderByEnumerator>
//        where TOrderByEnumerator : struct, IStructEnumerator<int>
//        where TOrderByComparer : struct, IStructComparer<int, TOrderByKey>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, OrderByEnumerable<int, TOrderByKey, TOrderByEnumerable, TOrderByEnumerator, TOrderByComparer>, OrderByEnumerator<int, TOrderByKey, TOrderByEnumerator, TOrderByComparer>>(ref source, ref second);

//        public static UnionDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, GroupJoinDefaultEnumerable<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator>, GroupJoinDefaultEnumerator<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerator>> Union<TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator>(this RangeEnumerable source, GroupJoinDefaultEnumerable<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator> second)
//        where TGroupJoinLeftEnumerable : struct, IStructEnumerable<TGroupJoinLefint, TGroupJoinLeftEnumerator>
//        where TGroupJoinLeftEnumerator : struct, IStructEnumerator<TGroupJoinLefint>
//        where TGroupJoinRightEnumerable : struct, IStructEnumerable<TGroupJoinRighint, TGroupJoinRightEnumerator>
//        where TGroupJoinRightEnumerator : struct, IStructEnumerator<TGroupJoinRighint>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, GroupJoinDefaultEnumerable<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator>, GroupJoinDefaultEnumerator<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerator>>(ref source, ref second);

//        public static UnionDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, GroupJoinSpecificEnumerable<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator>, GroupJoinSpecificEnumerator<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerator>> Union<TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator>(this RangeEnumerable source, GroupJoinSpecificEnumerable<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator> second)
//        where TGroupJoinLeftEnumerable : struct, IStructEnumerable<TGroupJoinLefint, TGroupJoinLeftEnumerator>
//        where TGroupJoinLeftEnumerator : struct, IStructEnumerator<TGroupJoinLefint>
//        where TGroupJoinRightEnumerable : struct, IStructEnumerable<TGroupJoinRighint, TGroupJoinRightEnumerator>
//        where TGroupJoinRightEnumerator : struct, IStructEnumerator<TGroupJoinRighint>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, GroupJoinSpecificEnumerable<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator>, GroupJoinSpecificEnumerator<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerator>>(ref source, ref second);

//        public static UnionDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, GroupByCollectionDefaultEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, int, TGroupByEnumerable, TGroupByEnumerator>, GroupByCollectionDefaultEnumerator<TGroupByInItem, TGroupByKey, TGroupByElement, int, TGroupByEnumerator>> Union<TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByEnumerable, TGroupByEnumerator>(this RangeEnumerable source, GroupByCollectionDefaultEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, int, TGroupByEnumerable, TGroupByEnumerator> second)
//        where TGroupByEnumerable : struct, IStructEnumerable<TGroupByInItem, TGroupByEnumerator>
//        where TGroupByEnumerator : struct, IStructEnumerator<TGroupByInItem>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, GroupByCollectionDefaultEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, int, TGroupByEnumerable, TGroupByEnumerator>, GroupByCollectionDefaultEnumerator<TGroupByInItem, TGroupByKey, TGroupByElement, int, TGroupByEnumerator>>(ref source, ref second);

//        public static UnionDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, GroupByCollectionSpecificEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, int, TGroupByEnumerable, TGroupByEnumerator>, GroupByCollectionSpecificEnumerator<TGroupByInItem, TGroupByKey, TGroupByElement, int, TGroupByEnumerator>> Union<TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByEnumerable, TGroupByEnumerator>(this RangeEnumerable source, GroupByCollectionSpecificEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, int, TGroupByEnumerable, TGroupByEnumerator> second)
//        where TGroupByEnumerable : struct, IStructEnumerable<TGroupByInItem, TGroupByEnumerator>
//        where TGroupByEnumerator : struct, IStructEnumerator<TGroupByInItem>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, GroupByCollectionSpecificEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, int, TGroupByEnumerable, TGroupByEnumerator>, GroupByCollectionSpecificEnumerator<TGroupByInItem, TGroupByKey, TGroupByElement, int, TGroupByEnumerator>>(ref source, ref second);

//        public static UnionDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, JoinDefaultEnumerable<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerable, TJoinRightEnumerator>, JoinDefaultEnumerator<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerator>> Union<TJoinKeyItem, TJoinLefint, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerable, TJoinRightEnumerator>(this RangeEnumerable source, JoinDefaultEnumerable<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerable, TJoinRightEnumerator> second)
//        where TJoinLeftEnumerable : struct, IStructEnumerable<TJoinLefint, TJoinLeftEnumerator>
//        where TJoinLeftEnumerator : struct, IStructEnumerator<TJoinLefint>
//        where TJoinRightEnumerable : struct, IStructEnumerable<TJoinRighint, TJoinRightEnumerator>
//        where TJoinRightEnumerator : struct, IStructEnumerator<TJoinRighint>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, JoinDefaultEnumerable<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerable, TJoinRightEnumerator>, JoinDefaultEnumerator<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerator>>(ref source, ref second);

//        public static UnionDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, JoinSpecificEnumerable<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerable, TJoinRightEnumerator>, JoinSpecificEnumerator<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerator>> Union<TJoinKeyItem, TJoinLefint, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerable, TJoinRightEnumerator>(this RangeEnumerable source, JoinSpecificEnumerable<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerable, TJoinRightEnumerator> second)
//        where TJoinLeftEnumerable : struct, IStructEnumerable<TJoinLefint, TJoinLeftEnumerator>
//        where TJoinLeftEnumerator : struct, IStructEnumerator<TJoinLefint>
//        where TJoinRightEnumerable : struct, IStructEnumerable<TJoinRighint, TJoinRightEnumerator>
//        where TJoinRightEnumerator : struct, IStructEnumerator<TJoinRighint>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, JoinSpecificEnumerable<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerable, TJoinRightEnumerator>, JoinSpecificEnumerator<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerator>>(ref source, ref second);

//        public static UnionSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, BoxedEnumerable<int>, BoxedEnumerator<int>> Union(this RangeEnumerable source, BoxedEnumerable<int> second, IEqualityComparer<int> comparer)
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, BoxedEnumerable<int>, BoxedEnumerator<int>>(ref source, ref second, comparer);

//        public static UnionSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, IEnumerable<int>, IEnumerableBridger<int>, IdentityEnumerator<int>>, IdentityEnumerator<int>> Union(this RangeEnumerable source, IEnumerable<int> second, IEqualityComparer<int> comparer)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(second, nameof(second));

//            return CommonImplementation.UnionImpl<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, IEnumerable<int>, IEnumerableBridger<int>, IdentityEnumerator<int>>, IdentityEnumerator<int>>(ref source, ref bridge, comparer);
//        }

//        public static UnionSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, Dictionary<int, TDictionaryValue>.KeyCollection, DictionaryKeysBridger<int, TDictionaryValue>, DictionaryKeysEnumerator<int, TDictionaryValue>>, DictionaryKeysEnumerator<int, TDictionaryValue>> Union<TDictionaryValue>(this RangeEnumerable source, Dictionary<int, TDictionaryValue>.KeyCollection second, IEqualityComparer<int> comparer)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(second, nameof(second));

//            return CommonImplementation.UnionImpl<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, Dictionary<int, TDictionaryValue>.KeyCollection, DictionaryKeysBridger<int, TDictionaryValue>, DictionaryKeysEnumerator<int, TDictionaryValue>>, DictionaryKeysEnumerator<int, TDictionaryValue>>(ref source, ref bridge, comparer);
//        }

//        public static UnionSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, Dictionary<TExcept_DictionaryKey, int>.ValueCollection, DictionaryValuesBridger<TExcept_DictionaryKey, int>, DictionaryValuesEnumerator<TExcept_DictionaryKey, int>>, DictionaryValuesEnumerator<TExcept_DictionaryKey, int>> Union<TExcept_DictionaryKey>(this RangeEnumerable source, Dictionary<TExcept_DictionaryKey, int>.ValueCollection second, IEqualityComparer<int> comparer)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(second, nameof(second));

//            return CommonImplementation.UnionImpl<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, Dictionary<TExcept_DictionaryKey, int>.ValueCollection, DictionaryValuesBridger<TExcept_DictionaryKey, int>, DictionaryValuesEnumerator<TExcept_DictionaryKey, int>>, DictionaryValuesEnumerator<TExcept_DictionaryKey, int>>(ref source, ref bridge, comparer);
//        }

//        public static UnionSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, HashSet<int>, HashSetBridger<int>, HashSetEnumerator<int>>, HashSetEnumerator<int>> Union(this RangeEnumerable source, HashSet<int> second, IEqualityComparer<int> comparer)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(second, nameof(second));

//            return CommonImplementation.UnionImpl<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, HashSet<int>, HashSetBridger<int>, HashSetEnumerator<int>>, HashSetEnumerator<int>>(ref source, ref bridge, comparer);
//        }

//        public static UnionSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, LinkedList<int>, LinkedListBridger<int>, LinkedListEnumerator<int>>, LinkedListEnumerator<int>> Union(this RangeEnumerable source, LinkedList<int> second, IEqualityComparer<int> comparer)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(second, nameof(second));

//            return CommonImplementation.UnionImpl<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, LinkedList<int>, LinkedListBridger<int>, LinkedListEnumerator<int>>, LinkedListEnumerator<int>>(ref source, ref bridge, comparer);
//        }

//        public static UnionSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, List<int>, ListBridger<int>, ListEnumerator<int>>, ListEnumerator<int>> Union(this RangeEnumerable source, List<int> second, IEqualityComparer<int> comparer)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(second, nameof(second));

//            return CommonImplementation.UnionImpl<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, List<int>, ListBridger<int>, ListEnumerator<int>>, ListEnumerator<int>>(ref source, ref bridge, comparer);
//        }

//        public static UnionSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, Queue<int>, QueueBridger<int>, QueueEnumerator<int>>, QueueEnumerator<int>> Union(this RangeEnumerable source, Queue<int> second, IEqualityComparer<int> comparer)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(second, nameof(second));

//            return CommonImplementation.UnionImpl<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, Queue<int>, QueueBridger<int>, QueueEnumerator<int>>, QueueEnumerator<int>>(ref source, ref bridge, comparer);
//        }

//        public static UnionSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, SortedDictionary<int, TExcept_DictionaryValue>.KeyCollection, SortedDictionaryKeysBridger<int, TExcept_DictionaryValue>, SortedDictionaryKeysEnumerator<int, TExcept_DictionaryValue>>, SortedDictionaryKeysEnumerator<int, TExcept_DictionaryValue>> Union<TExcept_DictionaryValue>(this RangeEnumerable source, SortedDictionary<int, TExcept_DictionaryValue>.KeyCollection second, IEqualityComparer<int> comparer)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(second, nameof(second));

//            return CommonImplementation.UnionImpl<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, SortedDictionary<int, TExcept_DictionaryValue>.KeyCollection, SortedDictionaryKeysBridger<int, TExcept_DictionaryValue>, SortedDictionaryKeysEnumerator<int, TExcept_DictionaryValue>>, SortedDictionaryKeysEnumerator<int, TExcept_DictionaryValue>>(ref source, ref bridge, comparer);
//        }

//        public static UnionSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, SortedDictionary<TExcept_DictionaryKey, int>.ValueCollection, SortedDictionaryValuesBridger<TExcept_DictionaryKey, int>, SortedDictionaryValuesEnumerator<TExcept_DictionaryKey, int>>, SortedDictionaryValuesEnumerator<TExcept_DictionaryKey, int>> Union<TExcept_DictionaryKey>(this RangeEnumerable source, SortedDictionary<TExcept_DictionaryKey, int>.ValueCollection second, IEqualityComparer<int> comparer)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(second, nameof(second));

//            return CommonImplementation.UnionImpl<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, SortedDictionary<TExcept_DictionaryKey, int>.ValueCollection, SortedDictionaryValuesBridger<TExcept_DictionaryKey, int>, SortedDictionaryValuesEnumerator<TExcept_DictionaryKey, int>>, SortedDictionaryValuesEnumerator<TExcept_DictionaryKey, int>>(ref source, ref bridge, comparer);
//        }

//        public static UnionSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, SortedSet<int>, SortedSetBridger<int>, SortedSetEnumerator<int>>, SortedSetEnumerator<int>> Union(this RangeEnumerable source, SortedSet<int> second, IEqualityComparer<int> comparer)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(second, nameof(second));

//            return CommonImplementation.UnionImpl<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, SortedSet<int>, SortedSetBridger<int>, SortedSetEnumerator<int>>, SortedSetEnumerator<int>>(ref source, ref bridge, comparer);
//        }

//        public static UnionSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, Stack<int>, StackBridger<int>, StackEnumerator<int>>, StackEnumerator<int>> Union(this RangeEnumerable source, Stack<int> second, IEqualityComparer<int> comparer)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(second, nameof(second));

//            return CommonImplementation.UnionImpl<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, Stack<int>, StackBridger<int>, StackEnumerator<int>>, StackEnumerator<int>>(ref source, ref bridge, comparer);
//        }

//        public static UnionSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, int[], ArrayBridger<int>, ArrayEnumerator<int>>, ArrayEnumerator<int>> Union(this RangeEnumerable source, int[] second, IEqualityComparer<int> comparer)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            var bridge = CommonImplementation.Bridge(second, nameof(second));

//            return CommonImplementation.UnionImpl<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, int[], ArrayBridger<int>, ArrayEnumerator<int>>, ArrayEnumerator<int>>(ref source, ref bridge, comparer);
//        }

//        public static UnionSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, TExcept_IdentityBridgeType, TExcept_IdentityBridger, TExcept_IdentityEnumerator>, TExcept_IdentityEnumerator> Union<TExcept_IdentityBridgeType, TExcept_IdentityBridger, TExcept_IdentityEnumerator>(this RangeEnumerable source, IdentityEnumerable<int, TExcept_IdentityBridgeType, TExcept_IdentityBridger, TExcept_IdentityEnumerator> second, IEqualityComparer<int> comparer)
//        where TExcept_IdentityBridgeType : class
//        where TExcept_IdentityEnumerator : struct, IStructEnumerator<int>
//        where TExcept_IdentityBridger : struct, IStructBridger<int, TExcept_IdentityBridgeType, TExcept_IdentityEnumerator>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, IdentityEnumerable<int, TExcept_IdentityBridgeType, TExcept_IdentityBridger, TExcept_IdentityEnumerator>, TExcept_IdentityEnumerator>(ref source, ref second, comparer);

//        public static UnionSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, ConcatEnumerable<int, TInnerLeftEnumerable, TInnerLeftEnumerator, TInnerRightEnumerable, TInnerRightEnumerator>, ConcatEnumerator<int, TInnerLeftEnumerator, TInnerRightEnumerator>> Union<TInnerLeftEnumerable, TInnerLeftEnumerator, TInnerRightEnumerable, TInnerRightEnumerator>(this RangeEnumerable source, ConcatEnumerable<int, TInnerLeftEnumerable, TInnerLeftEnumerator, TInnerRightEnumerable, TInnerRightEnumerator> second, IEqualityComparer<int> comparer)
//        where TInnerLeftEnumerable : struct, IStructEnumerable<int, TInnerLeftEnumerator>
//        where TInnerLeftEnumerator : struct, IStructEnumerator<int>
//        where TInnerRightEnumerable : struct, IStructEnumerable<int, TInnerRightEnumerator>
//        where TInnerRightEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, ConcatEnumerable<int, TInnerLeftEnumerable, TInnerLeftEnumerator, TInnerRightEnumerable, TInnerRightEnumerator>, ConcatEnumerator<int, TInnerLeftEnumerator, TInnerRightEnumerator>>(ref source, ref second, comparer);

//        public static UnionSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, EmptyEnumerable<int>, EmptyEnumerator<int>> Union(this RangeEnumerable source, EmptyEnumerable<int> second, IEqualityComparer<int> comparer)
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, EmptyEnumerable<int>, EmptyEnumerator<int>>(ref source, ref second, comparer);

//        public static UnionSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, RepeatEnumerable<int>, RepeatEnumerator<int>> Union(this RangeEnumerable source, RepeatEnumerable<int> second, IEqualityComparer<int> comparer)
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, RepeatEnumerable<int>, RepeatEnumerator<int>>(ref source, ref second, comparer);

//        public static UnionSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, SelectEnumerable<TExcept_SelectInItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, SelectEnumerator<TExcept_SelectInItem, int, TExcept_InnerEnumerator>> Union<TExcept_SelectInItem, TExcept_InnerEnumerable, TExcept_InnerEnumerator>(this RangeEnumerable source, SelectEnumerable<TExcept_SelectInItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator> second, IEqualityComparer<int> comparer)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<TExcept_SelectInItem, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<TExcept_SelectInItem>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, SelectEnumerable<TExcept_SelectInItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, SelectEnumerator<TExcept_SelectInItem, int, TExcept_InnerEnumerator>>(ref source, ref second, comparer);

//        public static UnionSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, SelectIndexedEnumerable<TExcept_SelectInItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, SelectIndexedEnumerator<TExcept_SelectInItem, int, TExcept_InnerEnumerator>> Union<TExcept_SelectInItem, TExcept_InnerEnumerable, TExcept_InnerEnumerator>(this RangeEnumerable source, SelectIndexedEnumerable<TExcept_SelectInItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator> second, IEqualityComparer<int> comparer)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<TExcept_SelectInItem, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<TExcept_SelectInItem>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, SelectIndexedEnumerable<TExcept_SelectInItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, SelectIndexedEnumerator<TExcept_SelectInItem, int, TExcept_InnerEnumerator>>(ref source, ref second, comparer);

//        public static UnionSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, SelectManyBridgeEnumerable<TExcept_SelectManyInItem, int, TExcept_BridgeType, TExcept_Bridger, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_ProjectedEnumerator>, SelectManyBridgeEnumerator<TExcept_SelectManyInItem, int, TExcept_BridgeType, TExcept_Bridger, TExcept_InnerEnumerator, TExcept_ProjectedEnumerator>> Union<TExcept_SelectManyInItem, TExcept_BridgeType, TExcept_Bridger, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_ProjectedEnumerator>(this RangeEnumerable source, SelectManyBridgeEnumerable<TExcept_SelectManyInItem, int, TExcept_BridgeType, TExcept_Bridger, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_ProjectedEnumerator> second, IEqualityComparer<int> comparer)
//        where TExcept_BridgeType : class
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<TExcept_SelectManyInItem, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<TExcept_SelectManyInItem>
//        where TExcept_ProjectedEnumerator : struct, IStructEnumerator<int>
//        where TExcept_Bridger : struct, IStructBridger<int, TExcept_BridgeType, TExcept_ProjectedEnumerator>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, SelectManyBridgeEnumerable<TExcept_SelectManyInItem, int, TExcept_BridgeType, TExcept_Bridger, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_ProjectedEnumerator>, SelectManyBridgeEnumerator<TExcept_SelectManyInItem, int, TExcept_BridgeType, TExcept_Bridger, TExcept_InnerEnumerator, TExcept_ProjectedEnumerator>>(ref source, ref second, comparer);

//        public static UnionSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, SelectManyIndexedBridgeEnumerable<TExcept_SelectManyInItem, int, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerator>, SelectManyIndexedBridgeEnumerator<TExcept_SelectManyInItem, int, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerator>> Union<TExcept_SelectManyInItem, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyIndexedBridgeEnumerable<TExcept_SelectManyInItem, int, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerator> second, IEqualityComparer<int> comparer)
//        where TExcept_SelectManyBridgeType : class
//        where TExcept_SelectManyInnerEnumerable : struct, IStructEnumerable<TExcept_SelectManyInItem, TExcept_SelectManyInnerEnumerator>
//        where TExcept_SelectManyInnerEnumerator : struct, IStructEnumerator<TExcept_SelectManyInItem>
//        where TExcept_SelectManyProjectedEnumerator : struct, IStructEnumerator<int>
//        where TExcept_Bridger : struct, IStructBridger<int, TExcept_SelectManyBridgeType, TExcept_SelectManyProjectedEnumerator>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, SelectManyIndexedBridgeEnumerable<TExcept_SelectManyInItem, int, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerator>, SelectManyIndexedBridgeEnumerator<TExcept_SelectManyInItem, int, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerator>>(ref source, ref second, comparer);

//        public static UnionSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, SelectManyCollectionBridgeEnumerable<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_SelectManyProjectedEnumerator>, SelectManyCollectionBridgeEnumerator<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_InnerEnumerator, TExcept_SelectManyProjectedEnumerator>> Union<TExcept_SelectManyInItem, TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_SelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyCollectionBridgeEnumerable<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_SelectManyProjectedEnumerator> second, IEqualityComparer<int> comparer)
//        where TExcept_SelectManyBridgeType : class
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<TExcept_SelectManyInItem, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<TExcept_SelectManyInItem>
//        where TExcept_SelectManyProjectedEnumerator : struct, IStructEnumerator<TExcept_CollectionItem>
//        where TExcept_Bridger : struct, IStructBridger<TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_SelectManyProjectedEnumerator>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, SelectManyCollectionBridgeEnumerable<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_SelectManyProjectedEnumerator>, SelectManyCollectionBridgeEnumerator<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_InnerEnumerator, TExcept_SelectManyProjectedEnumerator>>(ref source, ref second, comparer);

//        public static UnionSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, SelectManyCollectionIndexedBridgeEnumerable<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerator>, SelectManyCollectionIndexedBridgeEnumerator<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerator>> Union<TExcept_SelectManyInItem, TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyCollectionIndexedBridgeEnumerable<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerator> second, IEqualityComparer<int> comparer)
//        where TExcept_SelectManyBridgeType : class
//        where TExcept_SelectManyInnerEnumerable : struct, IStructEnumerable<TExcept_SelectManyInItem, TExcept_SelectManyInnerEnumerator>
//        where TExcept_SelectManyInnerEnumerator : struct, IStructEnumerator<TExcept_SelectManyInItem>
//        where TExcept_SelectManyProjectedEnumerator : struct, IStructEnumerator<TExcept_CollectionItem>
//        where TExcept_Bridger : struct, IStructBridger<TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_SelectManyProjectedEnumerator>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, SelectManyCollectionIndexedBridgeEnumerable<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerator>, SelectManyCollectionIndexedBridgeEnumerator<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyBridgeType, TExcept_Bridger, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerator>>(ref source, ref second, comparer);

//        public static UnionSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, SelectManyEnumerable<TExcept_SelectManyInItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_ProjectedEnumerable, TExcept_ProjectedEnumerator>, SelectManyEnumerator<TExcept_SelectManyInItem, int, TExcept_InnerEnumerator, TExcept_ProjectedEnumerable, TExcept_ProjectedEnumerator>> Union<TExcept_SelectManyInItem, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_ProjectedEnumerable, TExcept_ProjectedEnumerator>(this RangeEnumerable source, SelectManyEnumerable<TExcept_SelectManyInItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_ProjectedEnumerable, TExcept_ProjectedEnumerator> second, IEqualityComparer<int> comparer)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<TExcept_SelectManyInItem, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<TExcept_SelectManyInItem>
//        where TExcept_ProjectedEnumerable : struct, IStructEnumerable<int, TExcept_ProjectedEnumerator>
//        where TExcept_ProjectedEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, SelectManyEnumerable<TExcept_SelectManyInItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_ProjectedEnumerable, TExcept_ProjectedEnumerator>, SelectManyEnumerator<TExcept_SelectManyInItem, int, TExcept_InnerEnumerator, TExcept_ProjectedEnumerable, TExcept_ProjectedEnumerator>>(ref source, ref second, comparer);

//        public static UnionSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, SelectManyIndexedEnumerable<TExcept_SelectManyInItem, int, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerable, TExcept_SelectManyProjectedEnumerator>, SelectManyIndexedEnumerator<TExcept_SelectManyInItem, int, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerable, TExcept_SelectManyProjectedEnumerator>> Union<TExcept_SelectManyInItem, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerable, TExcept_SelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyIndexedEnumerable<TExcept_SelectManyInItem, int, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerable, TExcept_SelectManyProjectedEnumerator> second, IEqualityComparer<int> comparer)
//        where TExcept_SelectManyInnerEnumerable : struct, IStructEnumerable<TExcept_SelectManyInItem, TExcept_SelectManyInnerEnumerator>
//        where TExcept_SelectManyInnerEnumerator : struct, IStructEnumerator<TExcept_SelectManyInItem>
//        where TExcept_SelectManyProjectedEnumerable : struct, IStructEnumerable<int, TExcept_SelectManyProjectedEnumerator>
//        where TExcept_SelectManyProjectedEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, SelectManyIndexedEnumerable<TExcept_SelectManyInItem, int, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerable, TExcept_SelectManyProjectedEnumerator>, SelectManyIndexedEnumerator<TExcept_SelectManyInItem, int, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerable, TExcept_SelectManyProjectedEnumerator>>(ref source, ref second, comparer);

//        public static UnionSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, SelectManyCollectionEnumerable<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_ProjectedEnumerable, TExcept_ProjectedEnumerator>, SelectManyCollectionEnumerator<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_InnerEnumerator, TExcept_ProjectedEnumerable, TExcept_ProjectedEnumerator>> Union<TExcept_SelectManyInItem, TExcept_CollectionItem, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_ProjectedEnumerable, TExcept_ProjectedEnumerator>(this RangeEnumerable source, SelectManyCollectionEnumerable<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_ProjectedEnumerable, TExcept_ProjectedEnumerator> second, IEqualityComparer<int> comparer)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<TExcept_SelectManyInItem, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<TExcept_SelectManyInItem>
//        where TExcept_ProjectedEnumerable : struct, IStructEnumerable<TExcept_CollectionItem, TExcept_ProjectedEnumerator>
//        where TExcept_ProjectedEnumerator : struct, IStructEnumerator<TExcept_CollectionItem>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, SelectManyCollectionEnumerable<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_InnerEnumerable, TExcept_InnerEnumerator, TExcept_ProjectedEnumerable, TExcept_ProjectedEnumerator>, SelectManyCollectionEnumerator<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_InnerEnumerator, TExcept_ProjectedEnumerable, TExcept_ProjectedEnumerator>>(ref source, ref second, comparer);

//        public static UnionSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, SelectManyCollectionIndexedEnumerable<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerable, TExcept_SelectManyProjectedEnumerator>, SelectManyCollectionIndexedEnumerator<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerable, TExcept_SelectManyProjectedEnumerator>> Union<TExcept_SelectManyInItem, TExcept_CollectionItem, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerable, TExcept_SelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyCollectionIndexedEnumerable<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerable, TExcept_SelectManyProjectedEnumerator> second, IEqualityComparer<int> comparer)
//        where TExcept_SelectManyInnerEnumerable : struct, IStructEnumerable<TExcept_SelectManyInItem, TExcept_SelectManyInnerEnumerator>
//        where TExcept_SelectManyInnerEnumerator : struct, IStructEnumerator<TExcept_SelectManyInItem>
//        where TExcept_SelectManyProjectedEnumerable : struct, IStructEnumerable<TExcept_CollectionItem, TExcept_SelectManyProjectedEnumerator>
//        where TExcept_SelectManyProjectedEnumerator : struct, IStructEnumerator<TExcept_CollectionItem>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, SelectManyCollectionIndexedEnumerable<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyInnerEnumerable, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerable, TExcept_SelectManyProjectedEnumerator>, SelectManyCollectionIndexedEnumerator<TExcept_SelectManyInItem, int, TExcept_CollectionItem, TExcept_SelectManyInnerEnumerator, TExcept_SelectManyProjectedEnumerable, TExcept_SelectManyProjectedEnumerator>>(ref source, ref second, comparer);

//        public static UnionSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, WhereEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, WhereEnumerator<int, TExcept_InnerEnumerator>> Union<TExcept_InnerEnumerable, TExcept_InnerEnumerator>(this RangeEnumerable source, WhereEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator> second, IEqualityComparer<int> comparer)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<int, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, WhereEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, WhereEnumerator<int, TExcept_InnerEnumerator>>(ref source, ref second, comparer);

//        public static UnionSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, WhereIndexedEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, WhereIndexedEnumerator<int, TExcept_InnerEnumerator>> Union<TExcept_InnerEnumerable, TExcept_InnerEnumerator>(this RangeEnumerable source, WhereIndexedEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator> second, IEqualityComparer<int> comparer)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<int, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, WhereIndexedEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, WhereIndexedEnumerator<int, TExcept_InnerEnumerator>>(ref source, ref second, comparer);

//        public static UnionSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, DefaultIfEmptyDefaultEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, DefaultIfEmptyDefaultEnumerator<int, TExcept_InnerEnumerator>> Union<TExcept_InnerEnumerable, TExcept_InnerEnumerator>(this RangeEnumerable source, DefaultIfEmptyDefaultEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator> second, IEqualityComparer<int> comparer)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<int, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, DefaultIfEmptyDefaultEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, DefaultIfEmptyDefaultEnumerator<int, TExcept_InnerEnumerator>>(ref source, ref second, comparer);

//        public static UnionSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, DefaultIfEmptySpecificEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, DefaultIfEmptySpecificEnumerator<int, TExcept_InnerEnumerator>> Union<TExcept_InnerEnumerable, TExcept_InnerEnumerator>(this RangeEnumerable source, DefaultIfEmptySpecificEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator> second, IEqualityComparer<int> comparer)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<int, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, DefaultIfEmptySpecificEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, DefaultIfEmptySpecificEnumerator<int, TExcept_InnerEnumerator>>(ref source, ref second, comparer);

//        public static UnionSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, TakeEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, TakeEnumerator<int, TExcept_InnerEnumerator>> Union<TExcept_InnerEnumerable, TExcept_InnerEnumerator>(this RangeEnumerable source, TakeEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator> second, IEqualityComparer<int> comparer)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<int, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, TakeEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, TakeEnumerator<int, TExcept_InnerEnumerator>>(ref source, ref second, comparer);

//        public static UnionSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, TakeWhileEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, TakeWhileEnumerator<int, TExcept_InnerEnumerator>> Union<TExcept_InnerEnumerable, TExcept_InnerEnumerator>(this RangeEnumerable source, TakeWhileEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator> second, IEqualityComparer<int> comparer)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<int, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, TakeWhileEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, TakeWhileEnumerator<int, TExcept_InnerEnumerator>>(ref source, ref second, comparer);

//        public static UnionSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, TakeWhileIndexedEnumerable<int, TInnerEnumerable, TInnerEnumerator>, TakeWhileIndexedEnumerator<int, TInnerEnumerator>> Union<TInnerEnumerable, TInnerEnumerator>(this RangeEnumerable source, TakeWhileIndexedEnumerable<int, TInnerEnumerable, TInnerEnumerator> second, IEqualityComparer<int> comparer)
//        where TInnerEnumerable : struct, IStructEnumerable<int, TInnerEnumerator>
//        where TInnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, TakeWhileIndexedEnumerable<int, TInnerEnumerable, TInnerEnumerator>, TakeWhileIndexedEnumerator<int, TInnerEnumerator>>(ref source, ref second, comparer);

//        public static UnionSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, SkipEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, SkipEnumerator<int, TExcept_InnerEnumerator>> Union<TExcept_InnerEnumerable, TExcept_InnerEnumerator>(this RangeEnumerable source, SkipEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator> second, IEqualityComparer<int> comparer)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<int, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, SkipEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, SkipEnumerator<int, TExcept_InnerEnumerator>>(ref source, ref second, comparer);

//        public static UnionSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, SkipWhileEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, SkipWhileEnumerator<int, TExcept_InnerEnumerator>> Union<TExcept_InnerEnumerable, TExcept_InnerEnumerator>(this RangeEnumerable source, SkipWhileEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator> second, IEqualityComparer<int> comparer)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<int, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, SkipWhileEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, SkipWhileEnumerator<int, TExcept_InnerEnumerator>>(ref source, ref second, comparer);

//        public static UnionSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, SkipWhileIndexedEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, SkipWhileIndexedEnumerator<int, TExcept_InnerEnumerator>> Union<TExcept_InnerEnumerable, TExcept_InnerEnumerator>(this RangeEnumerable source, SkipWhileIndexedEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator> second, IEqualityComparer<int> comparer)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<int, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, SkipWhileIndexedEnumerable<int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, SkipWhileIndexedEnumerator<int, TExcept_InnerEnumerator>>(ref source, ref second, comparer);

//        public static UnionSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, CastEnumerable<TExcept_InItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, CastEnumerator<TExcept_InItem, int, TExcept_InnerEnumerator>> Union<TExcept_InItem, TExcept_InnerEnumerable, TExcept_InnerEnumerator>(this RangeEnumerable source, CastEnumerable<TExcept_InItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator> second, IEqualityComparer<int> comparer)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<TExcept_InItem, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<TExcept_InItem>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, CastEnumerable<TExcept_InItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, CastEnumerator<TExcept_InItem, int, TExcept_InnerEnumerator>>(ref source, ref second, comparer);

//        public static UnionSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, OfTypeEnumerable<TExcept_InItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, OfTypeEnumerator<TExcept_InItem, int, TExcept_InnerEnumerator>> Union<TExcept_InItem, TExcept_InnerEnumerable, TExcept_InnerEnumerator>(this RangeEnumerable source, OfTypeEnumerable<TExcept_InItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator> second, IEqualityComparer<int> comparer)
//        where TExcept_InnerEnumerable : struct, IStructEnumerable<TExcept_InItem, TExcept_InnerEnumerator>
//        where TExcept_InnerEnumerator : struct, IStructEnumerator<TExcept_InItem>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, OfTypeEnumerable<TExcept_InItem, int, TExcept_InnerEnumerable, TExcept_InnerEnumerator>, OfTypeEnumerator<TExcept_InItem, int, TExcept_InnerEnumerator>>(ref source, ref second, comparer);

//        public static UnionSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, ZipEnumerable<int, TExcept_ZipFirsint, TExcept_ZipSecondItem, TExcept_ZipFirstEnumerable, TExcept_ZipFirstEnumerator, TExcept_ZipSecondEnumerable, TExcept_ZipSecondEnumerator>, ZipEnumerator<int, TExcept_ZipFirsint, TExcept_ZipSecondItem, TExcept_ZipFirstEnumerator, TExcept_ZipSecondEnumerator>> Union<TExcept_ZipFirsint, TExcept_ZipSecondItem, TExcept_ZipFirstEnumerable, TExcept_ZipFirstEnumerator, TExcept_ZipSecondEnumerable, TExcept_ZipSecondEnumerator>(this RangeEnumerable source, ZipEnumerable<int, TExcept_ZipFirsint, TExcept_ZipSecondItem, TExcept_ZipFirstEnumerable, TExcept_ZipFirstEnumerator, TExcept_ZipSecondEnumerable, TExcept_ZipSecondEnumerator> second, IEqualityComparer<int> comparer)
//        where TExcept_ZipFirstEnumerable : struct, IStructEnumerable<TExcept_ZipFirsint, TExcept_ZipFirstEnumerator>
//        where TExcept_ZipFirstEnumerator : struct, IStructEnumerator<TExcept_ZipFirsint>
//        where TExcept_ZipSecondEnumerable : struct, IStructEnumerable<TExcept_ZipSecondItem, TExcept_ZipSecondEnumerator>
//        where TExcept_ZipSecondEnumerator : struct, IStructEnumerator<TExcept_ZipSecondItem>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, ZipEnumerable<int, TExcept_ZipFirsint, TExcept_ZipSecondItem, TExcept_ZipFirstEnumerable, TExcept_ZipFirstEnumerator, TExcept_ZipSecondEnumerable, TExcept_ZipSecondEnumerator>, ZipEnumerator<int, TExcept_ZipFirsint, TExcept_ZipSecondItem, TExcept_ZipFirstEnumerator, TExcept_ZipSecondEnumerator>>(ref source, ref second, comparer);

//        public static UnionSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, SelectSelectEnumerable<int, TExcept_SelectInnerItem, TExcept_SelectInnerEnumerable, TExcept_SelectInnerEnumerator, TExcept_SelectProjection>, SelectSelectEnumerator<int, TExcept_SelectInnerItem, TExcept_SelectInnerEnumerator, TExcept_SelectProjection>> Union<TExcept_SelectInnerItem, TExcept_SelectInnerEnumerable, TExcept_SelectInnerEnumerator, TExcept_SelectProjection>(this RangeEnumerable source, SelectSelectEnumerable<int, TExcept_SelectInnerItem, TExcept_SelectInnerEnumerable, TExcept_SelectInnerEnumerator, TExcept_SelectProjection> second, IEqualityComparer<int> comparer)
//        where TExcept_SelectInnerEnumerable : struct, IStructEnumerable<TExcept_SelectInnerItem, TExcept_SelectInnerEnumerator>
//        where TExcept_SelectInnerEnumerator : struct, IStructEnumerator<TExcept_SelectInnerItem>
//        where TExcept_SelectProjection : struct, IStructProjection<int, TExcept_SelectInnerItem>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, SelectSelectEnumerable<int, TExcept_SelectInnerItem, TExcept_SelectInnerEnumerable, TExcept_SelectInnerEnumerator, TExcept_SelectProjection>, SelectSelectEnumerator<int, TExcept_SelectInnerItem, TExcept_SelectInnerEnumerator, TExcept_SelectProjection>>(ref source, ref second, comparer);

//        public static UnionSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, SelectWhereEnumerable<int, TExcept_SelectInnerItem, TExcept_SelectInnerEnumerable, TExcept_SelectInnerEnumerator, TExcept_SelectProjection, TExcept_SelectPredicate>, SelectWhereEnumerator<int, TExcept_SelectInnerItem, TExcept_SelectInnerEnumerator, TExcept_SelectProjection, TExcept_SelectPredicate>> Union<TExcept_SelectInnerItem, TExcept_SelectInnerEnumerable, TExcept_SelectInnerEnumerator, TExcept_SelectProjection, TExcept_SelectPredicate>(this RangeEnumerable source, SelectWhereEnumerable<int, TExcept_SelectInnerItem, TExcept_SelectInnerEnumerable, TExcept_SelectInnerEnumerator, TExcept_SelectProjection, TExcept_SelectPredicate> second, IEqualityComparer<int> comparer)
//        where TExcept_SelectInnerEnumerable : struct, IStructEnumerable<TExcept_SelectInnerItem, TExcept_SelectInnerEnumerator>
//        where TExcept_SelectInnerEnumerator : struct, IStructEnumerator<TExcept_SelectInnerItem>
//        where TExcept_SelectProjection : struct, IStructProjection<int, TExcept_SelectInnerItem>
//        where TExcept_SelectPredicate : struct, IStructPredicate<int>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, SelectWhereEnumerable<int, TExcept_SelectInnerItem, TExcept_SelectInnerEnumerable, TExcept_SelectInnerEnumerator, TExcept_SelectProjection, TExcept_SelectPredicate>, SelectWhereEnumerator<int, TExcept_SelectInnerItem, TExcept_SelectInnerEnumerator, TExcept_SelectProjection, TExcept_SelectPredicate>>(ref source, ref second, comparer);

//        public static UnionSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, WhereWhereEnumerable<int, TExcept_WhereInnerEnumerable, TExcept_WhereInnerEnumerator, TExcept_WherePredicate>, WhereWhereEnumerator<int, TExcept_WhereInnerEnumerator, TExcept_WherePredicate>> Union<TExcept_WhereInnerEnumerable, TExcept_WhereInnerEnumerator, TExcept_WherePredicate>(this RangeEnumerable source, WhereWhereEnumerable<int, TExcept_WhereInnerEnumerable, TExcept_WhereInnerEnumerator, TExcept_WherePredicate> second, IEqualityComparer<int> comparer)
//        where TExcept_WhereInnerEnumerable : struct, IStructEnumerable<int, TExcept_WhereInnerEnumerator>
//        where TExcept_WhereInnerEnumerator : struct, IStructEnumerator<int>
//        where TExcept_WherePredicate : struct, IStructPredicate<int>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, WhereWhereEnumerable<int, TExcept_WhereInnerEnumerable, TExcept_WhereInnerEnumerator, TExcept_WherePredicate>, WhereWhereEnumerator<int, TExcept_WhereInnerEnumerator, TExcept_WherePredicate>>(ref source, ref second, comparer);

//        public static UnionSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, WhereSelectEnumerable<int, TExcept_WhereInnerItem, TExcept_WhereInnerEnumerable, TExcept_WhereInnerEnumerator, TExcept_WherePredicate, TExcept_WhereProjection>, WhereSelectEnumerator<int, TExcept_WhereInnerItem, TExcept_WhereInnerEnumerator, TExcept_WherePredicate, TExcept_WhereProjection>> Union<TExcept_WhereInnerItem, TExcept_WhereInnerEnumerable, TExcept_WhereInnerEnumerator, TExcept_WherePredicate, TExcept_WhereProjection>(this RangeEnumerable source, WhereSelectEnumerable<int, TExcept_WhereInnerItem, TExcept_WhereInnerEnumerable, TExcept_WhereInnerEnumerator, TExcept_WherePredicate, TExcept_WhereProjection> second, IEqualityComparer<int> comparer)
//        where TExcept_WhereInnerEnumerable : struct, IStructEnumerable<TExcept_WhereInnerItem, TExcept_WhereInnerEnumerator>
//        where TExcept_WhereInnerEnumerator : struct, IStructEnumerator<TExcept_WhereInnerItem>
//        where TExcept_WherePredicate : struct, IStructPredicate<TExcept_WhereInnerItem>
//        where TExcept_WhereProjection : struct, IStructProjection<int, TExcept_WhereInnerItem>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, WhereSelectEnumerable<int, TExcept_WhereInnerItem, TExcept_WhereInnerEnumerable, TExcept_WhereInnerEnumerator, TExcept_WherePredicate, TExcept_WhereProjection>, WhereSelectEnumerator<int, TExcept_WhereInnerItem, TExcept_WhereInnerEnumerator, TExcept_WherePredicate, TExcept_WhereProjection>>(ref source, ref second, comparer);

//        public static UnionSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, DistinctDefaultEnumerable<int, TExcept_DistinctInnerEnumerable, TExcept_DistinctInnerEnumerator>, DistinctDefaultEnumerator<int, TExcept_DistinctInnerEnumerator>> Union<TExcept_DistinctInnerEnumerable, TExcept_DistinctInnerEnumerator>(this RangeEnumerable source, DistinctDefaultEnumerable<int, TExcept_DistinctInnerEnumerable, TExcept_DistinctInnerEnumerator> second, IEqualityComparer<int> comparer)
//        where TExcept_DistinctInnerEnumerable : struct, IStructEnumerable<int, TExcept_DistinctInnerEnumerator>
//        where TExcept_DistinctInnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, DistinctDefaultEnumerable<int, TExcept_DistinctInnerEnumerable, TExcept_DistinctInnerEnumerator>, DistinctDefaultEnumerator<int, TExcept_DistinctInnerEnumerator>>(ref source, ref second, comparer);

//        public static UnionSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, DistinctSpecificEnumerable<int, TExcept_DistinctInnerEnumerable, TExcept_DistinctInnerEnumerator>, DistinctSpecificEnumerator<int, TExcept_DistinctInnerEnumerator>> Union<TExcept_DistinctInnerEnumerable, TExcept_DistinctInnerEnumerator>(this RangeEnumerable source, DistinctSpecificEnumerable<int, TExcept_DistinctInnerEnumerable, TExcept_DistinctInnerEnumerator> second, IEqualityComparer<int> comparer)
//        where TExcept_DistinctInnerEnumerable : struct, IStructEnumerable<int, TExcept_DistinctInnerEnumerator>
//        where TExcept_DistinctInnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, DistinctSpecificEnumerable<int, TExcept_DistinctInnerEnumerable, TExcept_DistinctInnerEnumerator>, DistinctSpecificEnumerator<int, TExcept_DistinctInnerEnumerator>>(ref source, ref second, comparer);

//        public static UnionSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, EmptyEnumerable<int>, EmptyEnumerator<int>> Union(this RangeEnumerable source, EmptyOrderedEnumerable<int> second, IEqualityComparer<int> comparer)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            if (second.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(second));

//            var empty = EmptyCache<int>.Empty;
//            return CommonImplementation.UnionImpl<int, RangeEnumerable, RangeEnumerator, EmptyEnumerable<int>, EmptyEnumerator<int>>(ref source, ref empty, comparer);
//        }

//        public static UnionSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, ExceptDefaultEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>, ExceptDefaultEnumerator<int, TExceptFirstEnumerator, TExceptSecondEnumerator>> Union<TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>(this RangeEnumerable source, ExceptDefaultEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator> second, IEqualityComparer<int> comparer)
//        where TExceptFirstEnumerable : struct, IStructEnumerable<int, TExceptFirstEnumerator>
//        where TExceptFirstEnumerator : struct, IStructEnumerator<int>
//        where TExceptSecondEnumerable : struct, IStructEnumerable<int, TExceptSecondEnumerator>
//        where TExceptSecondEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, ExceptDefaultEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>, ExceptDefaultEnumerator<int, TExceptFirstEnumerator, TExceptSecondEnumerator>>(ref source, ref second, comparer);

//        public static UnionSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, ExceptSpecificEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>, ExceptSpecificEnumerator<int, TExceptFirstEnumerator, TExceptSecondEnumerator>> Union<TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>(this RangeEnumerable source, ExceptSpecificEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator> second, IEqualityComparer<int> comparer)
//        where TExceptFirstEnumerable : struct, IStructEnumerable<int, TExceptFirstEnumerator>
//        where TExceptFirstEnumerator : struct, IStructEnumerator<int>
//        where TExceptSecondEnumerable : struct, IStructEnumerable<int, TExceptSecondEnumerator>
//        where TExceptSecondEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, ExceptSpecificEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>, ExceptSpecificEnumerator<int, TExceptFirstEnumerator, TExceptSecondEnumerator>>(ref source, ref second, comparer);

//        public static UnionSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, IntersectDefaultEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>, IntersectDefaultEnumerator<int, TExceptFirstEnumerator, TExceptSecondEnumerator>> Union<TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>(this RangeEnumerable source, IntersectDefaultEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator> second, IEqualityComparer<int> comparer)
//        where TExceptFirstEnumerable : struct, IStructEnumerable<int, TExceptFirstEnumerator>
//        where TExceptFirstEnumerator : struct, IStructEnumerator<int>
//        where TExceptSecondEnumerable : struct, IStructEnumerable<int, TExceptSecondEnumerator>
//        where TExceptSecondEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, IntersectDefaultEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>, IntersectDefaultEnumerator<int, TExceptFirstEnumerator, TExceptSecondEnumerator>>(ref source, ref second, comparer);

//        public static UnionSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, IntersectSpecificEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>, IntersectSpecificEnumerator<int, TExceptFirstEnumerator, TExceptSecondEnumerator>> Union<TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>(this RangeEnumerable source, IntersectSpecificEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator> second, IEqualityComparer<int> comparer)
//        where TExceptFirstEnumerable : struct, IStructEnumerable<int, TExceptFirstEnumerator>
//        where TExceptFirstEnumerator : struct, IStructEnumerator<int>
//        where TExceptSecondEnumerable : struct, IStructEnumerable<int, TExceptSecondEnumerator>
//        where TExceptSecondEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, IntersectSpecificEnumerable<int, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>, IntersectSpecificEnumerator<int, TExceptFirstEnumerator, TExceptSecondEnumerator>>(ref source, ref second, comparer);

//        public static UnionSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, UnionDefaultEnumerable<int, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator>, UnionDefaultEnumerator<int, TUnionFirstEnumerator, TUnionSecondEnumerator>> Union<TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator>(this RangeEnumerable source, UnionDefaultEnumerable<int, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator> second, IEqualityComparer<int> comparer)
//        where TUnionFirstEnumerable : struct, IStructEnumerable<int, TUnionFirstEnumerator>
//        where TUnionFirstEnumerator : struct, IStructEnumerator<int>
//        where TUnionSecondEnumerable : struct, IStructEnumerable<int, TUnionSecondEnumerator>
//        where TUnionSecondEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, UnionDefaultEnumerable<int, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator>, UnionDefaultEnumerator<int, TUnionFirstEnumerator, TUnionSecondEnumerator>>(ref source, ref second, comparer);

//        public static UnionSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, UnionSpecificEnumerable<int, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator>, UnionSpecificEnumerator<int, TUnionFirstEnumerator, TUnionSecondEnumerator>> Union<TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator>(this RangeEnumerable source, UnionSpecificEnumerable<int, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator> second, IEqualityComparer<int> comparer)
//        where TUnionFirstEnumerable : struct, IStructEnumerable<int, TUnionFirstEnumerator>
//        where TUnionFirstEnumerator : struct, IStructEnumerator<int>
//        where TUnionSecondEnumerable : struct, IStructEnumerable<int, TUnionSecondEnumerator>
//        where TUnionSecondEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, UnionSpecificEnumerable<int, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator>, UnionSpecificEnumerator<int, TUnionFirstEnumerator, TUnionSecondEnumerator>>(ref source, ref second, comparer);

//        public static UnionSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, GroupedEnumerable<TGroupedKey, int>, GroupedEnumerator<int>> Union<TGroupedKey>(this RangeEnumerable source, GroupedEnumerable<TGroupedKey, int> second, IEqualityComparer<int> comparer)
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, GroupedEnumerable<TGroupedKey, int>, GroupedEnumerator<int>>(ref source, ref second, comparer);

//        public static UnionSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, GroupingEnumerable<TGroupedKey, int>, GroupingEnumerator<int>> Union<TGroupedKey>(this RangeEnumerable source, GroupingEnumerable<TGroupedKey, int> second, IEqualityComparer<int> comparer)
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, GroupingEnumerable<TGroupedKey, int>, GroupingEnumerator<int>>(ref source, ref second, comparer);

//        public static UnionSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, ReverseEnumerable<int, TReverseEnumerable, TReverseEnumerator>, ReverseEnumerator<int>> Union<TReverseEnumerable, TReverseEnumerator>(this RangeEnumerable source, ReverseEnumerable<int, TReverseEnumerable, TReverseEnumerator> second, IEqualityComparer<int> comparer)
//        where TReverseEnumerable : struct, IStructEnumerable<int, TReverseEnumerator>
//        where TReverseEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, ReverseEnumerable<int, TReverseEnumerable, TReverseEnumerator>, ReverseEnumerator<int>>(ref source, ref second, comparer);

//        public static UnionSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, OrderByEnumerable<int, TOrderByKey, TOrderByEnumerable, TOrderByEnumerator, TOrderByComparer>, OrderByEnumerator<int, TOrderByKey, TOrderByEnumerator, TOrderByComparer>> Union<TOrderByKey, TOrderByEnumerable, TOrderByEnumerator, TOrderByComparer>(this RangeEnumerable source, OrderByEnumerable<int, TOrderByKey, TOrderByEnumerable, TOrderByEnumerator, TOrderByComparer> second, IEqualityComparer<int> comparer)
//        where TOrderByEnumerable : struct, IStructEnumerable<int, TOrderByEnumerator>
//        where TOrderByEnumerator : struct, IStructEnumerator<int>
//        where TOrderByComparer : struct, IStructComparer<int, TOrderByKey>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, OrderByEnumerable<int, TOrderByKey, TOrderByEnumerable, TOrderByEnumerator, TOrderByComparer>, OrderByEnumerator<int, TOrderByKey, TOrderByEnumerator, TOrderByComparer>>(ref source, ref second, comparer);

//        public static UnionSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, GroupJoinDefaultEnumerable<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator>, GroupJoinDefaultEnumerator<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerator>> Union<TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator>(this RangeEnumerable source, GroupJoinDefaultEnumerable<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator> second, IEqualityComparer<int> comparer)
//        where TGroupJoinLeftEnumerable : struct, IStructEnumerable<TGroupJoinLefint, TGroupJoinLeftEnumerator>
//        where TGroupJoinLeftEnumerator : struct, IStructEnumerator<TGroupJoinLefint>
//        where TGroupJoinRightEnumerable : struct, IStructEnumerable<TGroupJoinRighint, TGroupJoinRightEnumerator>
//        where TGroupJoinRightEnumerator : struct, IStructEnumerator<TGroupJoinRighint>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, GroupJoinDefaultEnumerable<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator>, GroupJoinDefaultEnumerator<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerator>>(ref source, ref second, comparer);

//        public static UnionSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, GroupJoinSpecificEnumerable<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator>, GroupJoinSpecificEnumerator<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerator>> Union<TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator>(this RangeEnumerable source, GroupJoinSpecificEnumerable<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator> second, IEqualityComparer<int> comparer)
//        where TGroupJoinLeftEnumerable : struct, IStructEnumerable<TGroupJoinLefint, TGroupJoinLeftEnumerator>
//        where TGroupJoinLeftEnumerator : struct, IStructEnumerator<TGroupJoinLefint>
//        where TGroupJoinRightEnumerable : struct, IStructEnumerable<TGroupJoinRighint, TGroupJoinRightEnumerator>
//        where TGroupJoinRightEnumerator : struct, IStructEnumerator<TGroupJoinRighint>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, GroupJoinSpecificEnumerable<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator>, GroupJoinSpecificEnumerator<int, TGroupJoinKeyItem, TGroupJoinLefint, TGroupJoinLeftEnumerator, TGroupJoinRighint, TGroupJoinRightEnumerator>>(ref source, ref second, comparer);

//        public static UnionSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, GroupByCollectionDefaultEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, int, TGroupByEnumerable, TGroupByEnumerator>, GroupByCollectionDefaultEnumerator<TGroupByInItem, TGroupByKey, TGroupByElement, int, TGroupByEnumerator>> Union<TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByEnumerable, TGroupByEnumerator>(this RangeEnumerable source, GroupByCollectionDefaultEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, int, TGroupByEnumerable, TGroupByEnumerator> second, IEqualityComparer<int> comparer)
//        where TGroupByEnumerable : struct, IStructEnumerable<TGroupByInItem, TGroupByEnumerator>
//        where TGroupByEnumerator : struct, IStructEnumerator<TGroupByInItem>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, GroupByCollectionDefaultEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, int, TGroupByEnumerable, TGroupByEnumerator>, GroupByCollectionDefaultEnumerator<TGroupByInItem, TGroupByKey, TGroupByElement, int, TGroupByEnumerator>>(ref source, ref second, comparer);

//        public static UnionSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, GroupByCollectionSpecificEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, int, TGroupByEnumerable, TGroupByEnumerator>, GroupByCollectionSpecificEnumerator<TGroupByInItem, TGroupByKey, TGroupByElement, int, TGroupByEnumerator>> Union<TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByEnumerable, TGroupByEnumerator>(this RangeEnumerable source, GroupByCollectionSpecificEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, int, TGroupByEnumerable, TGroupByEnumerator> second, IEqualityComparer<int> comparer)
//        where TGroupByEnumerable : struct, IStructEnumerable<TGroupByInItem, TGroupByEnumerator>
//        where TGroupByEnumerator : struct, IStructEnumerator<TGroupByInItem>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, GroupByCollectionSpecificEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, int, TGroupByEnumerable, TGroupByEnumerator>, GroupByCollectionSpecificEnumerator<TGroupByInItem, TGroupByKey, TGroupByElement, int, TGroupByEnumerator>>(ref source, ref second, comparer);

//        public static UnionSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, JoinDefaultEnumerable<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerable, TJoinRightEnumerator>, JoinDefaultEnumerator<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerator>> Union<TJoinKeyItem, TJoinLefint, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerable, TJoinRightEnumerator>(this RangeEnumerable source, JoinDefaultEnumerable<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerable, TJoinRightEnumerator> second, IEqualityComparer<int> comparer)
//        where TJoinLeftEnumerable : struct, IStructEnumerable<TJoinLefint, TJoinLeftEnumerator>
//        where TJoinLeftEnumerator : struct, IStructEnumerator<TJoinLefint>
//        where TJoinRightEnumerable : struct, IStructEnumerable<TJoinRighint, TJoinRightEnumerator>
//        where TJoinRightEnumerator : struct, IStructEnumerator<TJoinRighint>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, JoinDefaultEnumerable<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerable, TJoinRightEnumerator>, JoinDefaultEnumerator<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerator>>(ref source, ref second, comparer);

//        public static UnionSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, JoinSpecificEnumerable<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerable, TJoinRightEnumerator>, JoinSpecificEnumerator<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerator>> Union<TJoinKeyItem, TJoinLefint, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerable, TJoinRightEnumerator>(this RangeEnumerable source, JoinSpecificEnumerable<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerable, TJoinRightEnumerator> second, IEqualityComparer<int> comparer)
//        where TJoinLeftEnumerable : struct, IStructEnumerable<TJoinLefint, TJoinLeftEnumerator>
//        where TJoinLeftEnumerator : struct, IStructEnumerator<TJoinLefint>
//        where TJoinRightEnumerable : struct, IStructEnumerable<TJoinRighint, TJoinRightEnumerator>
//        where TJoinRightEnumerator : struct, IStructEnumerator<TJoinRighint>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, JoinSpecificEnumerable<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerable, TJoinRightEnumerator>, JoinSpecificEnumerator<int, TJoinKeyItem, TJoinLefint, TJoinLeftEnumerator, TJoinRighint, TJoinRightEnumerator>>(ref source, ref second, comparer);

//        public static UnionDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, OneItemDefaultEnumerable<int>, OneItemDefaultEnumerator<int>> Union(this RangeEnumerable source, OneItemDefaultEnumerable<int> second)
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, OneItemDefaultEnumerable<int>, OneItemDefaultEnumerator<int>>(ref source, ref second);

//        public static UnionSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, OneItemDefaultEnumerable<int>, OneItemDefaultEnumerator<int>> Union(this RangeEnumerable source, OneItemDefaultEnumerable<int> second, IEqualityComparer<int> comparer)
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, OneItemDefaultEnumerable<int>, OneItemDefaultEnumerator<int>>(ref source, ref second, comparer);

//        public static UnionDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, OneItemSpecificEnumerable<int>, OneItemSpecificEnumerator<int>> Union(this RangeEnumerable source, OneItemSpecificEnumerable<int> second)
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, OneItemSpecificEnumerable<int>, OneItemSpecificEnumerator<int>>(ref source, ref second);

//        public static UnionSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, OneItemSpecificEnumerable<int>, OneItemSpecificEnumerator<int>> Union(this RangeEnumerable source, OneItemSpecificEnumerable<int> second, IEqualityComparer<int> comparer)
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, OneItemSpecificEnumerable<int>, OneItemSpecificEnumerator<int>>(ref source, ref second, comparer);

//        public static UnionDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, OneItemDefaultOrderedEnumerable<int>, OneItemDefaultOrderedEnumerator<int>> Union(this RangeEnumerable source, OneItemDefaultOrderedEnumerable<int> second)
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, OneItemDefaultOrderedEnumerable<int>, OneItemDefaultOrderedEnumerator<int>>(ref source, ref second);

//        public static UnionSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, OneItemDefaultOrderedEnumerable<int>, OneItemDefaultOrderedEnumerator<int>> Union(this RangeEnumerable source, OneItemDefaultOrderedEnumerable<int> second, IEqualityComparer<int> comparer)
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, OneItemDefaultOrderedEnumerable<int>, OneItemDefaultOrderedEnumerator<int>>(ref source, ref second, comparer);

//        public static UnionDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, OneItemSpecificOrderedEnumerable<int>, OneItemSpecificOrderedEnumerator<int>> Union(this RangeEnumerable source, OneItemSpecificOrderedEnumerable<int> second)
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, OneItemSpecificOrderedEnumerable<int>, OneItemSpecificOrderedEnumerator<int>>(ref source, ref second);

//        public static UnionSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, OneItemSpecificOrderedEnumerable<int>, OneItemSpecificOrderedEnumerator<int>> Union(this RangeEnumerable source, OneItemSpecificOrderedEnumerable<int> second, IEqualityComparer<int> comparer)
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, OneItemSpecificOrderedEnumerable<int>, OneItemSpecificOrderedEnumerator<int>>(ref source, ref second, comparer);

//        public static UnionDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, SkipLastEnumerable<int, TSkipLastInnerEnumerable, TSkipLastInnerEnumerator>, SkipLastEnumerator<int, TSkipLastInnerEnumerator>> Union<TSkipLastInnerEnumerable, TSkipLastInnerEnumerator>(this RangeEnumerable source, SkipLastEnumerable<int, TSkipLastInnerEnumerable, TSkipLastInnerEnumerator> second)
//        where TSkipLastInnerEnumerable : struct, IStructEnumerable<int, TSkipLastInnerEnumerator>
//        where TSkipLastInnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, SkipLastEnumerable<int, TSkipLastInnerEnumerable, TSkipLastInnerEnumerator>, SkipLastEnumerator<int, TSkipLastInnerEnumerator>>(ref source, ref second);

//        public static UnionDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, TakeLastEnumerable<int, TTakeLastInnerEnumerable, TTakeLastInnerEnumerator>, TakeLastEnumerator<int, TTakeLastInnerEnumerator>> Union<TTakeLastInnerEnumerable, TTakeLastInnerEnumerator>(this RangeEnumerable source, TakeLastEnumerable<int, TTakeLastInnerEnumerable, TTakeLastInnerEnumerator> second)
//        where TTakeLastInnerEnumerable : struct, IStructEnumerable<int, TTakeLastInnerEnumerator>
//        where TTakeLastInnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, TakeLastEnumerable<int, TTakeLastInnerEnumerable, TTakeLastInnerEnumerator>, TakeLastEnumerator<int, TTakeLastInnerEnumerator>>(ref source, ref second);

//        public static UnionSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, SkipLastEnumerable<int, TSkipLastInnerEnumerable, TSkipLastInnerEnumerator>, SkipLastEnumerator<int, TSkipLastInnerEnumerator>> Union<TSkipLastInnerEnumerable, TSkipLastInnerEnumerator>(this RangeEnumerable source, SkipLastEnumerable<int, TSkipLastInnerEnumerable, TSkipLastInnerEnumerator> second, IEqualityComparer<int> comparer)
//        where TSkipLastInnerEnumerable : struct, IStructEnumerable<int, TSkipLastInnerEnumerator>
//        where TSkipLastInnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, SkipLastEnumerable<int, TSkipLastInnerEnumerable, TSkipLastInnerEnumerator>, SkipLastEnumerator<int, TSkipLastInnerEnumerator>>(ref source, ref second, comparer);

//        public static UnionSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, TakeLastEnumerable<int, TTakeLastInnerEnumerable, TTakeLastInnerEnumerator>, TakeLastEnumerator<int, TTakeLastInnerEnumerator>> Union<TTakeLastInnerEnumerable, TTakeLastInnerEnumerator>(this RangeEnumerable source, TakeLastEnumerable<int, TTakeLastInnerEnumerable, TTakeLastInnerEnumerator> second, IEqualityComparer<int> comparer)
//        where TTakeLastInnerEnumerable : struct, IStructEnumerable<int, TTakeLastInnerEnumerator>
//        where TTakeLastInnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, TakeLastEnumerable<int, TTakeLastInnerEnumerable, TTakeLastInnerEnumerator>, TakeLastEnumerator<int, TTakeLastInnerEnumerator>>(ref source, ref second, comparer);

//        public static UnionDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, AppendEnumerable<int, TAppendInnerEnumerable, TAppendInnerEnumerator>, AppendEnumerator<int, TAppendInnerEnumerator>> Union<TAppendInnerEnumerable, TAppendInnerEnumerator>(this RangeEnumerable source, AppendEnumerable<int, TAppendInnerEnumerable, TAppendInnerEnumerator> second)
//        where TAppendInnerEnumerable : struct, IStructEnumerable<int, TAppendInnerEnumerator>
//        where TAppendInnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, AppendEnumerable<int, TAppendInnerEnumerable, TAppendInnerEnumerator>, AppendEnumerator<int, TAppendInnerEnumerator>>(ref source, ref second);

//        public static UnionSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, AppendEnumerable<int, TAppendInnerEnumerable, TAppendInnerEnumerator>, AppendEnumerator<int, TAppendInnerEnumerator>> Union<TAppendInnerEnumerable, TAppendInnerEnumerator>(this RangeEnumerable source, AppendEnumerable<int, TAppendInnerEnumerable, TAppendInnerEnumerator> second, IEqualityComparer<int> comparer)
//        where TAppendInnerEnumerable : struct, IStructEnumerable<int, TAppendInnerEnumerator>
//        where TAppendInnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, AppendEnumerable<int, TAppendInnerEnumerable, TAppendInnerEnumerator>, AppendEnumerator<int, TAppendInnerEnumerator>>(ref source, ref second, comparer);

//        public static UnionDefaultEnumerable<int, RangeEnumerable, RangeEnumerator, PrependEnumerable<int, TPrependInnerEnumerable, TPrependInnerEnumerator>, PrependEnumerator<int, TPrependInnerEnumerator>> Union<TPrependInnerEnumerable, TPrependInnerEnumerator>(this RangeEnumerable source, PrependEnumerable<int, TPrependInnerEnumerable, TPrependInnerEnumerator> second)
//        where TPrependInnerEnumerable : struct, IStructEnumerable<int, TPrependInnerEnumerator>
//        where TPrependInnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, PrependEnumerable<int, TPrependInnerEnumerable, TPrependInnerEnumerator>, PrependEnumerator<int, TPrependInnerEnumerator>>(ref source, ref second);

//        public static UnionSpecificEnumerable<int, RangeEnumerable, RangeEnumerator, PrependEnumerable<int, TPrependInnerEnumerable, TPrependInnerEnumerator>, PrependEnumerator<int, TPrependInnerEnumerator>> Union<TPrependInnerEnumerable, TPrependInnerEnumerator>(this RangeEnumerable source, PrependEnumerable<int, TPrependInnerEnumerable, TPrependInnerEnumerator> second, IEqualityComparer<int> comparer)
//        where TPrependInnerEnumerable : struct, IStructEnumerable<int, TPrependInnerEnumerator>
//        where TPrependInnerEnumerator : struct, IStructEnumerator<int>
//        => CommonImplementation.Union<int, RangeEnumerable, RangeEnumerator, PrependEnumerable<int, TPrependInnerEnumerable, TPrependInnerEnumerator>, PrependEnumerator<int, TPrependInnerEnumerator>>(ref source, ref second, comparer);

//        // Where

//        public static WhereIndexedEnumerable<int, RangeEnumerable, RangeEnumerator> Where(this RangeEnumerable source, Func<int, int, bool> predicate)
//        => CommonImplementation.Where<int, RangeEnumerable, RangeEnumerator>(ref source, predicate);

//        public static WhereEnumerable<int, RangeEnumerable, RangeEnumerator> Where(this RangeEnumerable source, Func<int, bool> predicate)
//        => CommonImplementation.Where<int, RangeEnumerable, RangeEnumerator>(ref source, predicate);

//        // Zip

//        public static ZipEnumerable<TOutItem, int, TInnerItem, RangeEnumerable, RangeEnumerator, BoxedEnumerable<TInnerItem>, BoxedEnumerator<TInnerItem>> Zip<TInnerItem, TOutItem>(this RangeEnumerable source, BoxedEnumerable<TInnerItem> second, Func<int, TInnerItem, TOutItem> resultSelector)
//=> CommonImplementation.Zip<TOutItem, int, TInnerItem, RangeEnumerable, RangeEnumerator, BoxedEnumerable<TInnerItem>, BoxedEnumerator<TInnerItem>>(ref source, ref second, resultSelector);

//        public static ZipEnumerable<TOutItem, int, TInnerItem, RangeEnumerable, RangeEnumerator, IdentityEnumerable<TInnerItem, IEnumerable<TInnerItem>, IEnumerableBridger<TInnerItem>, IdentityEnumerator<TInnerItem>>, IdentityEnumerator<TInnerItem>> Zip<TInnerItem, TOutItem>(this RangeEnumerable source, IEnumerable<TInnerItem> second, Func<int, TInnerItem, TOutItem> resultSelector)
//        => CommonImplementation.Zip<TOutItem, int, TInnerItem, RangeEnumerable, RangeEnumerator>(ref source, second, resultSelector);

//        public static ZipEnumerable<TOutItem, int, TInnerItem, RangeEnumerable, RangeEnumerator, IdentityEnumerable<TInnerItem, Dictionary<TInnerItem, TDictionaryValue>.KeyCollection, DictionaryKeysBridger<TInnerItem, TDictionaryValue>, DictionaryKeysEnumerator<TInnerItem, TDictionaryValue>>, DictionaryKeysEnumerator<TInnerItem, TDictionaryValue>> Zip<TInnerItem, TOutItem, TDictionaryValue>(this RangeEnumerable source, Dictionary<TInnerItem, TDictionaryValue>.KeyCollection second, Func<int, TInnerItem, TOutItem> resultSelector)
//        => CommonImplementation.Zip<TOutItem, int, TInnerItem, RangeEnumerable, RangeEnumerator, TDictionaryValue>(ref source, second, resultSelector);

//        public static ZipEnumerable<TOutItem, int, TInnerItem, RangeEnumerable, RangeEnumerator, IdentityEnumerable<TInnerItem, Dictionary<TDictionaryKey, TInnerItem>.ValueCollection, DictionaryValuesBridger<TDictionaryKey, TInnerItem>, DictionaryValuesEnumerator<TDictionaryKey, TInnerItem>>, DictionaryValuesEnumerator<TDictionaryKey, TInnerItem>> Zip<TInnerItem, TOutItem, TDictionaryKey>(this RangeEnumerable source, Dictionary<TDictionaryKey, TInnerItem>.ValueCollection second, Func<int, TInnerItem, TOutItem> resultSelector)
//        => CommonImplementation.Zip<TOutItem, int, TInnerItem, RangeEnumerable, RangeEnumerator, TDictionaryKey>(ref source, second, resultSelector);

//        public static ZipEnumerable<TOutItem, int, TInnerItem, RangeEnumerable, RangeEnumerator, IdentityEnumerable<TInnerItem, HashSet<TInnerItem>, HashSetBridger<TInnerItem>, HashSetEnumerator<TInnerItem>>, HashSetEnumerator<TInnerItem>> Zip<TInnerItem, TOutItem>(this RangeEnumerable source, HashSet<TInnerItem> second, Func<int, TInnerItem, TOutItem> resultSelector)
//        => CommonImplementation.Zip<TOutItem, int, TInnerItem, RangeEnumerable, RangeEnumerator>(ref source, second, resultSelector);

//        public static ZipEnumerable<TOutItem, int, TInnerItem, RangeEnumerable, RangeEnumerator, IdentityEnumerable<TInnerItem, LinkedList<TInnerItem>, LinkedListBridger<TInnerItem>, LinkedListEnumerator<TInnerItem>>, LinkedListEnumerator<TInnerItem>> Zip<TInnerItem, TOutItem>(this RangeEnumerable source, LinkedList<TInnerItem> second, Func<int, TInnerItem, TOutItem> resultSelector)
//        => CommonImplementation.Zip<TOutItem, int, TInnerItem, RangeEnumerable, RangeEnumerator>(ref source, second, resultSelector);

//        public static ZipEnumerable<TOutItem, int, TInnerItem, RangeEnumerable, RangeEnumerator, IdentityEnumerable<TInnerItem, List<TInnerItem>, ListBridger<TInnerItem>, ListEnumerator<TInnerItem>>, ListEnumerator<TInnerItem>> Zip<TInnerItem, TOutItem>(this RangeEnumerable source, List<TInnerItem> second, Func<int, TInnerItem, TOutItem> resultSelector)
//        => CommonImplementation.Zip<TOutItem, int, TInnerItem, RangeEnumerable, RangeEnumerator>(ref source, second, resultSelector);

//        public static ZipEnumerable<TOutItem, int, TInnerItem, RangeEnumerable, RangeEnumerator, IdentityEnumerable<TInnerItem, Queue<TInnerItem>, QueueBridger<TInnerItem>, QueueEnumerator<TInnerItem>>, QueueEnumerator<TInnerItem>> Zip<TInnerItem, TOutItem>(this RangeEnumerable source, Queue<TInnerItem> second, Func<int, TInnerItem, TOutItem> resultSelector)
//        => CommonImplementation.Zip<TOutItem, int, TInnerItem, RangeEnumerable, RangeEnumerator>(ref source, second, resultSelector);

//        public static ZipEnumerable<TOutItem, int, TInnerItem, RangeEnumerable, RangeEnumerator, IdentityEnumerable<TInnerItem, SortedDictionary<TInnerItem, TDictionaryValue>.KeyCollection, SortedDictionaryKeysBridger<TInnerItem, TDictionaryValue>, SortedDictionaryKeysEnumerator<TInnerItem, TDictionaryValue>>, SortedDictionaryKeysEnumerator<TInnerItem, TDictionaryValue>> Zip<TInnerItem, TOutItem, TDictionaryValue>(this RangeEnumerable source, SortedDictionary<TInnerItem, TDictionaryValue>.KeyCollection second, Func<int, TInnerItem, TOutItem> resultSelector)
//        => CommonImplementation.Zip<TOutItem, int, TInnerItem, RangeEnumerable, RangeEnumerator, TDictionaryValue>(ref source, second, resultSelector);

//        public static ZipEnumerable<TOutItem, int, TInnerItem, RangeEnumerable, RangeEnumerator, IdentityEnumerable<TInnerItem, SortedDictionary<TDictionaryKey, TInnerItem>.ValueCollection, SortedDictionaryValuesBridger<TDictionaryKey, TInnerItem>, SortedDictionaryValuesEnumerator<TDictionaryKey, TInnerItem>>, SortedDictionaryValuesEnumerator<TDictionaryKey, TInnerItem>> Zip<TInnerItem, TOutItem, TDictionaryKey>(this RangeEnumerable source, SortedDictionary<TDictionaryKey, TInnerItem>.ValueCollection second, Func<int, TInnerItem, TOutItem> resultSelector)
//        => CommonImplementation.Zip<TOutItem, int, TInnerItem, RangeEnumerable, RangeEnumerator, TDictionaryKey>(ref source, second, resultSelector);

//        public static ZipEnumerable<TOutItem, int, TInnerItem, RangeEnumerable, RangeEnumerator, IdentityEnumerable<TInnerItem, SortedSet<TInnerItem>, SortedSetBridger<TInnerItem>, SortedSetEnumerator<TInnerItem>>, SortedSetEnumerator<TInnerItem>> Zip<TInnerItem, TOutItem>(this RangeEnumerable source, SortedSet<TInnerItem> second, Func<int, TInnerItem, TOutItem> resultSelector)
//        => CommonImplementation.Zip<TOutItem, int, TInnerItem, RangeEnumerable, RangeEnumerator>(ref source, second, resultSelector);

//        public static ZipEnumerable<TOutItem, int, TInnerItem, RangeEnumerable, RangeEnumerator, IdentityEnumerable<TInnerItem, Stack<TInnerItem>, StackBridger<TInnerItem>, StackEnumerator<TInnerItem>>, StackEnumerator<TInnerItem>> Zip<TInnerItem, TOutItem>(this RangeEnumerable source, Stack<TInnerItem> second, Func<int, TInnerItem, TOutItem> resultSelector)
//        => CommonImplementation.Zip<TOutItem, int, TInnerItem, RangeEnumerable, RangeEnumerator>(ref source, second, resultSelector);

//        public static ZipEnumerable<TOutItem, int, TInnerItem, RangeEnumerable, RangeEnumerator, IdentityEnumerable<TInnerItem, TInnerItem[], ArrayBridger<TInnerItem>, ArrayEnumerator<TInnerItem>>, ArrayEnumerator<TInnerItem>> Zip<TInnerItem, TOutItem>(this RangeEnumerable source, TInnerItem[] second, Func<int, TInnerItem, TOutItem> resultSelector)
//        => CommonImplementation.Zip<TOutItem, int, TInnerItem, RangeEnumerable, RangeEnumerator>(ref source, second, resultSelector);

//        public static ZipEnumerable<TOutItem, int, TIdentityItem, RangeEnumerable, RangeEnumerator, IdentityEnumerable<TIdentityItem, TIdentityBridgeType, TIdentityBridger, TIdentityEnumerator>, TIdentityEnumerator> Zip<TOutItem, TIdentityItem, TIdentityBridgeType, TIdentityBridger, TIdentityEnumerator>(this RangeEnumerable source, IdentityEnumerable<TIdentityItem, TIdentityBridgeType, TIdentityBridger, TIdentityEnumerator> second, Func<int, TIdentityItem, TOutItem> resultSelector)
//        where TIdentityBridgeType : class
//        where TIdentityEnumerator : struct, IStructEnumerator<TIdentityItem>
//        where TIdentityBridger : struct, IStructBridger<TIdentityItem, TIdentityBridgeType, TIdentityEnumerator>
//        => CommonImplementation.Zip<TOutItem, int, TIdentityItem, RangeEnumerable, RangeEnumerator, IdentityEnumerable<TIdentityItem, TIdentityBridgeType, TIdentityBridger, TIdentityEnumerator>, TIdentityEnumerator>(ref source, ref second, resultSelector);

//        public static ZipEnumerable<TOutItem, int, TCastOutItem, RangeEnumerable, RangeEnumerator, CastEnumerable<TCastInItem, TCastOutItem, TCastInnerEnumerable, TCastInnerEnumerator>, CastEnumerator<TCastInItem, TCastOutItem, TCastInnerEnumerator>> Zip<TOutItem, TCastInItem, TCastOutItem, TCastInnerEnumerable, TCastInnerEnumerator>(this RangeEnumerable source, CastEnumerable<TCastInItem, TCastOutItem, TCastInnerEnumerable, TCastInnerEnumerator> second, Func<int, TCastOutItem, TOutItem> resultSelector)
//        where TCastInnerEnumerable : struct, IStructEnumerable<TCastInItem, TCastInnerEnumerator>
//        where TCastInnerEnumerator : struct, IStructEnumerator<TCastInItem>
//        => CommonImplementation.Zip<TOutItem, int, TCastOutItem, RangeEnumerable, RangeEnumerator, CastEnumerable<TCastInItem, TCastOutItem, TCastInnerEnumerable, TCastInnerEnumerator>, CastEnumerator<TCastInItem, TCastOutItem, TCastInnerEnumerator>>(ref source, ref second, resultSelector);

//        public static ZipEnumerable<TOutItem, int, TConcatItem, RangeEnumerable, RangeEnumerator, ConcatEnumerable<TConcatItem, TConcatFirstEnumerable, TConcatFirstEnumerator, TConcatSecondEnumerable, TConcatSecondEnumerator>, ConcatEnumerator<TConcatItem, TConcatFirstEnumerator, TConcatSecondEnumerator>> Zip<TOutItem, TConcatItem, TConcatFirstEnumerable, TConcatFirstEnumerator, TConcatSecondEnumerable, TConcatSecondEnumerator>(this RangeEnumerable source, ConcatEnumerable<TConcatItem, TConcatFirstEnumerable, TConcatFirstEnumerator, TConcatSecondEnumerable, TConcatSecondEnumerator> second, Func<int, TConcatItem, TOutItem> resultSelector)
//        where TConcatFirstEnumerable : struct, IStructEnumerable<TConcatItem, TConcatFirstEnumerator>
//        where TConcatFirstEnumerator : struct, IStructEnumerator<TConcatItem>
//        where TConcatSecondEnumerable : struct, IStructEnumerable<TConcatItem, TConcatSecondEnumerator>
//        where TConcatSecondEnumerator : struct, IStructEnumerator<TConcatItem>
//        => CommonImplementation.Zip<TOutItem, int, TConcatItem, RangeEnumerable, RangeEnumerator, ConcatEnumerable<TConcatItem, TConcatFirstEnumerable, TConcatFirstEnumerator, TConcatSecondEnumerable, TConcatSecondEnumerator>, ConcatEnumerator<TConcatItem, TConcatFirstEnumerator, TConcatSecondEnumerator>>(ref source, ref second, resultSelector);

//        public static ZipEnumerable<TOutItem, int, TDefaultItem, RangeEnumerable, RangeEnumerator, DefaultIfEmptyDefaultEnumerable<TDefaultItem, TDefaultInnerEnumerable, TDefaultInnerEnumerator>, DefaultIfEmptyDefaultEnumerator<TDefaultItem, TDefaultInnerEnumerator>> Zip<TOutItem, TDefaultItem, TDefaultInnerEnumerable, TDefaultInnerEnumerator>(this RangeEnumerable source, DefaultIfEmptyDefaultEnumerable<TDefaultItem, TDefaultInnerEnumerable, TDefaultInnerEnumerator> second, Func<int, TDefaultItem, TOutItem> resultSelector)
//        where TDefaultInnerEnumerable : struct, IStructEnumerable<TDefaultItem, TDefaultInnerEnumerator>
//        where TDefaultInnerEnumerator : struct, IStructEnumerator<TDefaultItem>
//        => CommonImplementation.Zip<TOutItem, int, TDefaultItem, RangeEnumerable, RangeEnumerator, DefaultIfEmptyDefaultEnumerable<TDefaultItem, TDefaultInnerEnumerable, TDefaultInnerEnumerator>, DefaultIfEmptyDefaultEnumerator<TDefaultItem, TDefaultInnerEnumerator>>(ref source, ref second, resultSelector);

//        public static ZipEnumerable<TOutItem, int, TDefaultItem, RangeEnumerable, RangeEnumerator, DefaultIfEmptySpecificEnumerable<TDefaultItem, TDefaultInnerEnumerable, TDefaultInnerEnumerator>, DefaultIfEmptySpecificEnumerator<TDefaultItem, TDefaultInnerEnumerator>> Zip<TOutItem, TDefaultItem, TDefaultInnerEnumerable, TDefaultInnerEnumerator>(this RangeEnumerable source, DefaultIfEmptySpecificEnumerable<TDefaultItem, TDefaultInnerEnumerable, TDefaultInnerEnumerator> second, Func<int, TDefaultItem, TOutItem> resultSelector)
//        where TDefaultInnerEnumerable : struct, IStructEnumerable<TDefaultItem, TDefaultInnerEnumerator>
//        where TDefaultInnerEnumerator : struct, IStructEnumerator<TDefaultItem>
//        => CommonImplementation.Zip<TOutItem, int, TDefaultItem, RangeEnumerable, RangeEnumerator, DefaultIfEmptySpecificEnumerable<TDefaultItem, TDefaultInnerEnumerable, TDefaultInnerEnumerator>, DefaultIfEmptySpecificEnumerator<TDefaultItem, TDefaultInnerEnumerator>>(ref source, ref second, resultSelector);

//        public static EmptyEnumerable<TOutItem> Zip<TOutItem, TEmptyItem>(this RangeEnumerable source, EmptyEnumerable<TEmptyItem> second, Func<int, TEmptyItem, TOutItem> resultSelector)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            if (second.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(second));
//            if (resultSelector == null) throw CommonImplementation.ArgumentNull(nameof(resultSelector));

//            return EmptyCache<TOutItem>.Empty;
//        }

//        public static ZipEnumerable<TOutItem, int, TOfTypeOutItem, RangeEnumerable, RangeEnumerator, OfTypeEnumerable<TOfTypeInItem, TOfTypeOutItem, TOfTypeInnerEnumerable, TOfTypeInnerEnumerator>, OfTypeEnumerator<TOfTypeInItem, TOfTypeOutItem, TOfTypeInnerEnumerator>> Zip<TOutItem, TOfTypeInItem, TOfTypeOutItem, TOfTypeInnerEnumerable, TOfTypeInnerEnumerator>(this RangeEnumerable source, OfTypeEnumerable<TOfTypeInItem, TOfTypeOutItem, TOfTypeInnerEnumerable, TOfTypeInnerEnumerator> second, Func<int, TOfTypeOutItem, TOutItem> resultSelector)
//        where TOfTypeInnerEnumerable : struct, IStructEnumerable<TOfTypeInItem, TOfTypeInnerEnumerator>
//        where TOfTypeInnerEnumerator : struct, IStructEnumerator<TOfTypeInItem>
//        => CommonImplementation.Zip<TOutItem, int, TOfTypeOutItem, RangeEnumerable, RangeEnumerator, OfTypeEnumerable<TOfTypeInItem, TOfTypeOutItem, TOfTypeInnerEnumerable, TOfTypeInnerEnumerator>, OfTypeEnumerator<TOfTypeInItem, TOfTypeOutItem, TOfTypeInnerEnumerator>>(ref source, ref second, resultSelector);

//        public static ZipEnumerable<TOutItem, int, TRangeItem, RangeEnumerable, RangeEnumerator, RepeatEnumerable<TRangeItem>, RepeatEnumerator<TRangeItem>> Zip<TOutItem, TRangeItem>(this RangeEnumerable source, RepeatEnumerable<TRangeItem> second, Func<int, TRangeItem, TOutItem> resultSelector)
//        => CommonImplementation.Zip<TOutItem, int, TRangeItem, RangeEnumerable, RangeEnumerator, RepeatEnumerable<TRangeItem>, RepeatEnumerator<TRangeItem>>(ref source, ref second, resultSelector);

//        public static ZipEnumerable<TOutItem, int, TSelectOutItem, RangeEnumerable, RangeEnumerator, SelectEnumerable<TSelectInItem, TSelectOutItem, TSelectInnerEnumerable, TSelectInnerEnumerator>, SelectEnumerator<TSelectInItem, TSelectOutItem, TSelectInnerEnumerator>> Zip<TOutItem, TSelectInItem, TSelectOutItem, TSelectInnerEnumerable, TSelectInnerEnumerator>(this RangeEnumerable source, SelectEnumerable<TSelectInItem, TSelectOutItem, TSelectInnerEnumerable, TSelectInnerEnumerator> second, Func<int, TSelectOutItem, TOutItem> resultSelector)
//        where TSelectInnerEnumerable : struct, IStructEnumerable<TSelectInItem, TSelectInnerEnumerator>
//        where TSelectInnerEnumerator : struct, IStructEnumerator<TSelectInItem>
//        => CommonImplementation.Zip<TOutItem, int, TSelectOutItem, RangeEnumerable, RangeEnumerator, SelectEnumerable<TSelectInItem, TSelectOutItem, TSelectInnerEnumerable, TSelectInnerEnumerator>, SelectEnumerator<TSelectInItem, TSelectOutItem, TSelectInnerEnumerator>>(ref source, ref second, resultSelector);

//        public static ZipEnumerable<TOutItem, int, TSelectOutItem, RangeEnumerable, RangeEnumerator, SelectIndexedEnumerable<TSelectInItem, TSelectOutItem, TSelectInnerEnumerable, TSelectInnerEnumerator>, SelectIndexedEnumerator<TSelectInItem, TSelectOutItem, TSelectInnerEnumerator>> Zip<TOutItem, TSelectInItem, TSelectOutItem, TSelectInnerEnumerable, TSelectInnerEnumerator>(this RangeEnumerable source, SelectIndexedEnumerable<TSelectInItem, TSelectOutItem, TSelectInnerEnumerable, TSelectInnerEnumerator> second, Func<int, TSelectOutItem, TOutItem> resultSelector)
//        where TSelectInnerEnumerable : struct, IStructEnumerable<TSelectInItem, TSelectInnerEnumerator>
//        where TSelectInnerEnumerator : struct, IStructEnumerator<TSelectInItem>
//        => CommonImplementation.Zip<TOutItem, int, TSelectOutItem, RangeEnumerable, RangeEnumerator, SelectIndexedEnumerable<TSelectInItem, TSelectOutItem, TSelectInnerEnumerable, TSelectInnerEnumerator>, SelectIndexedEnumerator<TSelectInItem, TSelectOutItem, TSelectInnerEnumerator>>(ref source, ref second, resultSelector);

//        public static ZipEnumerable<TOutItem, int, TSelectManyOutItem, RangeEnumerable, RangeEnumerator, SelectManyBridgeEnumerable<TSelectManyInItem, TSelectManyOutItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyBridgeEnumerator<TSelectManyInItem, TSelectManyOutItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>> Zip<TOutItem, TSelectManyInItem, TSelectManyOutItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyBridgeEnumerable<TSelectManyInItem, TSelectManyOutItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator> second, Func<int, TSelectManyOutItem, TOutItem> resultSelector)
//        where TSelectManyBridgeType : class
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectManyInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectManyInItem>
//        where TSelectManyProjectedEnumerator : struct, IStructEnumerator<TSelectManyOutItem>
//        where TSelectManyBridger : struct, IStructBridger<TSelectManyOutItem, TSelectManyBridgeType, TSelectManyProjectedEnumerator>
//        => CommonImplementation.Zip<TOutItem, int, TSelectManyOutItem, RangeEnumerable, RangeEnumerator, SelectManyBridgeEnumerable<TSelectManyInItem, TSelectManyOutItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyBridgeEnumerator<TSelectManyInItem, TSelectManyOutItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>>(ref source, ref second, resultSelector);

//        public static ZipEnumerable<TOutItem, int, TSelectManyOutItem, RangeEnumerable, RangeEnumerator, SelectManyIndexedBridgeEnumerable<TSelectManyInItem, TSelectManyOutItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyIndexedBridgeEnumerator<TSelectManyInItem, TSelectManyOutItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>> Zip<TOutItem, TSelectManyInItem, TSelectManyOutItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyIndexedBridgeEnumerable<TSelectManyInItem, TSelectManyOutItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator> second, Func<int, TSelectManyOutItem, TOutItem> resultSelector)
//        where TSelectManyBridgeType : class
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectManyInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectManyInItem>
//        where TSelectManyProjectedEnumerator : struct, IStructEnumerator<TSelectManyOutItem>
//        where TSelectManyBridger : struct, IStructBridger<TSelectManyOutItem, TSelectManyBridgeType, TSelectManyProjectedEnumerator>
//        => CommonImplementation.Zip<TOutItem, int, TSelectManyOutItem, RangeEnumerable, RangeEnumerator, SelectManyIndexedBridgeEnumerable<TSelectManyInItem, TSelectManyOutItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyIndexedBridgeEnumerator<TSelectManyInItem, TSelectManyOutItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>>(ref source, ref second, resultSelector);

//        public static ZipEnumerable<TOutItem, int, TSelectManyOutItem, RangeEnumerable, RangeEnumerator, SelectManyEnumerable<TSelectManyInItem, TSelectManyOutItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>, SelectManyEnumerator<TSelectManyInItem, TSelectManyOutItem, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>> Zip<TOutItem, TSelectManyInItem, TSelectManyOutItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyEnumerable<TSelectManyInItem, TSelectManyOutItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator> second, Func<int, TSelectManyOutItem, TOutItem> resultSelector)
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectManyInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectManyInItem>
//        where TSelectManyProjectedEnumerable : struct, IStructEnumerable<TSelectManyOutItem, TSelectManyProjectedEnumerator>
//        where TSelectManyProjectedEnumerator : struct, IStructEnumerator<TSelectManyOutItem>
//        => CommonImplementation.Zip<TOutItem, int, TSelectManyOutItem, RangeEnumerable, RangeEnumerator, SelectManyEnumerable<TSelectManyInItem, TSelectManyOutItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>, SelectManyEnumerator<TSelectManyInItem, TSelectManyOutItem, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>>(ref source, ref second, resultSelector);

//        public static ZipEnumerable<TOutItem, int, TSelectManyOutItem, RangeEnumerable, RangeEnumerator, SelectManyIndexedEnumerable<TSelectManyInItem, TSelectManyOutItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>, SelectManyIndexedEnumerator<TSelectManyInItem, TSelectManyOutItem, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>> Zip<TOutItem, TSelectManyInItem, TSelectManyOutItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyIndexedEnumerable<TSelectManyInItem, TSelectManyOutItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator> second, Func<int, TSelectManyOutItem, TOutItem> resultSelector)
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectManyInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectManyInItem>
//        where TSelectManyProjectedEnumerable : struct, IStructEnumerable<TSelectManyOutItem, TSelectManyProjectedEnumerator>
//        where TSelectManyProjectedEnumerator : struct, IStructEnumerator<TSelectManyOutItem>
//        => CommonImplementation.Zip<TOutItem, int, TSelectManyOutItem, RangeEnumerable, RangeEnumerator, SelectManyIndexedEnumerable<TSelectManyInItem, TSelectManyOutItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>, SelectManyIndexedEnumerator<TSelectManyInItem, TSelectManyOutItem, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>>(ref source, ref second, resultSelector);

//        public static ZipEnumerable<TOutItem, int, TSelectManyOutItem, RangeEnumerable, RangeEnumerator, SelectManyCollectionBridgeEnumerable<TSelectManyInItem, TSelectManyOutItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyCollectionBridgeEnumerator<TSelectManyInItem, TSelectManyOutItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>> Zip<TOutItem, TSelectManyInItem, TSelectManyOutItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyCollectionBridgeEnumerable<TSelectManyInItem, TSelectManyOutItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator> second, Func<int, TSelectManyOutItem, TOutItem> resultSelector)
//        where TSelectManyBridgeType : class
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectManyInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectManyInItem>
//        where TSelectManyProjectedEnumerator : struct, IStructEnumerator<TSelectManyCollectionItem>
//        where TSelectManyBridger : struct, IStructBridger<TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyProjectedEnumerator>
//        => CommonImplementation.Zip<TOutItem, int, TSelectManyOutItem, RangeEnumerable, RangeEnumerator, SelectManyCollectionBridgeEnumerable<TSelectManyInItem, TSelectManyOutItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyCollectionBridgeEnumerator<TSelectManyInItem, TSelectManyOutItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>>(ref source, ref second, resultSelector);

//        public static ZipEnumerable<TOutItem, int, TSelectManyOutItem, RangeEnumerable, RangeEnumerator, SelectManyCollectionIndexedBridgeEnumerable<TSelectManyInItem, TSelectManyOutItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyCollectionIndexedBridgeEnumerator<TSelectManyInItem, TSelectManyOutItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>> Zip<TOutItem, TSelectManyInItem, TSelectManyOutItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyCollectionIndexedBridgeEnumerable<TSelectManyInItem, TSelectManyOutItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator> second, Func<int, TSelectManyOutItem, TOutItem> resultSelector)
//        where TSelectManyBridgeType : class
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectManyInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectManyInItem>
//        where TSelectManyProjectedEnumerator : struct, IStructEnumerator<TSelectManyCollectionItem>
//        where TSelectManyBridger : struct, IStructBridger<TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyProjectedEnumerator>
//        => CommonImplementation.Zip<TOutItem, int, TSelectManyOutItem, RangeEnumerable, RangeEnumerator, SelectManyCollectionIndexedBridgeEnumerable<TSelectManyInItem, TSelectManyOutItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>, SelectManyCollectionIndexedBridgeEnumerator<TSelectManyInItem, TSelectManyOutItem, TSelectManyCollectionItem, TSelectManyBridgeType, TSelectManyBridger, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerator>>(ref source, ref second, resultSelector);

//        public static ZipEnumerable<TOutItem, int, TSelectManyOutItem, RangeEnumerable, RangeEnumerator, SelectManyCollectionEnumerable<TSelectManyInItem, TSelectManyOutItem, TSelectManyCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>, SelectManyCollectionEnumerator<TSelectManyInItem, TSelectManyOutItem, TSelectManyCollectionItem, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>> Zip<TOutItem, TSelectManyInItem, TSelectManyOutItem, TSelectManyCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyCollectionEnumerable<TSelectManyInItem, TSelectManyOutItem, TSelectManyCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator> second, Func<int, TSelectManyOutItem, TOutItem> resultSelector)
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectManyInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectManyInItem>
//        where TSelectManyProjectedEnumerable : struct, IStructEnumerable<TSelectManyCollectionItem, TSelectManyProjectedEnumerator>
//        where TSelectManyProjectedEnumerator : struct, IStructEnumerator<TSelectManyCollectionItem>
//        => CommonImplementation.Zip<TOutItem, int, TSelectManyOutItem, RangeEnumerable, RangeEnumerator, SelectManyCollectionEnumerable<TSelectManyInItem, TSelectManyOutItem, TSelectManyCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>, SelectManyCollectionEnumerator<TSelectManyInItem, TSelectManyOutItem, TSelectManyCollectionItem, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>>(ref source, ref second, resultSelector);

//        public static ZipEnumerable<TOutItem, int, TSelectManyOutItem, RangeEnumerable, RangeEnumerator, SelectManyCollectionIndexedEnumerable<TSelectManyInItem, TSelectManyOutItem, TSelectManyCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>, SelectManyCollectionIndexedEnumerator<TSelectManyInItem, TSelectManyOutItem, TSelectManyCollectionItem, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>> Zip<TOutItem, TSelectManyInItem, TSelectManyOutItem, TSelectManyCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>(this RangeEnumerable source, SelectManyCollectionIndexedEnumerable<TSelectManyInItem, TSelectManyOutItem, TSelectManyCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator> second, Func<int, TSelectManyOutItem, TOutItem> resultSelector)
//        where TSelectManyInnerEnumerable : struct, IStructEnumerable<TSelectManyInItem, TSelectManyInnerEnumerator>
//        where TSelectManyInnerEnumerator : struct, IStructEnumerator<TSelectManyInItem>
//        where TSelectManyProjectedEnumerable : struct, IStructEnumerable<TSelectManyCollectionItem, TSelectManyProjectedEnumerator>
//        where TSelectManyProjectedEnumerator : struct, IStructEnumerator<TSelectManyCollectionItem>
//        => CommonImplementation.Zip<TOutItem, int, TSelectManyOutItem, RangeEnumerable, RangeEnumerator, SelectManyCollectionIndexedEnumerable<TSelectManyInItem, TSelectManyOutItem, TSelectManyCollectionItem, TSelectManyInnerEnumerable, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>, SelectManyCollectionIndexedEnumerator<TSelectManyInItem, TSelectManyOutItem, TSelectManyCollectionItem, TSelectManyInnerEnumerator, TSelectManyProjectedEnumerable, TSelectManyProjectedEnumerator>>(ref source, ref second, resultSelector);

//        public static ZipEnumerable<TOutItem, int, TSkipOutItem, RangeEnumerable, RangeEnumerator, SkipEnumerable<TSkipOutItem, TSkipInnerEnumerable, TSkipInnerEnumerator>, SkipEnumerator<TSkipOutItem, TSkipInnerEnumerator>> Zip<TOutItem, TSkipOutItem, TSkipInnerEnumerable, TSkipInnerEnumerator>(this RangeEnumerable source, SkipEnumerable<TSkipOutItem, TSkipInnerEnumerable, TSkipInnerEnumerator> second, Func<int, TSkipOutItem, TOutItem> resultSelector)
//        where TSkipInnerEnumerable : struct, IStructEnumerable<TSkipOutItem, TSkipInnerEnumerator>
//        where TSkipInnerEnumerator : struct, IStructEnumerator<TSkipOutItem>
//        => CommonImplementation.Zip<TOutItem, int, TSkipOutItem, RangeEnumerable, RangeEnumerator, SkipEnumerable<TSkipOutItem, TSkipInnerEnumerable, TSkipInnerEnumerator>, SkipEnumerator<TSkipOutItem, TSkipInnerEnumerator>>(ref source, ref second, resultSelector);

//        public static ZipEnumerable<TOutItem, int, TSkipOutItem, RangeEnumerable, RangeEnumerator, SkipWhileEnumerable<TSkipOutItem, TSkipInnerEnumerable, TSkipInnerEnumerator>, SkipWhileEnumerator<TSkipOutItem, TSkipInnerEnumerator>> Zip<TOutItem, TSkipOutItem, TSkipInnerEnumerable, TSkipInnerEnumerator>(this RangeEnumerable source, SkipWhileEnumerable<TSkipOutItem, TSkipInnerEnumerable, TSkipInnerEnumerator> second, Func<int, TSkipOutItem, TOutItem> resultSelector)
//        where TSkipInnerEnumerable : struct, IStructEnumerable<TSkipOutItem, TSkipInnerEnumerator>
//        where TSkipInnerEnumerator : struct, IStructEnumerator<TSkipOutItem>
//        => CommonImplementation.Zip<TOutItem, int, TSkipOutItem, RangeEnumerable, RangeEnumerator, SkipWhileEnumerable<TSkipOutItem, TSkipInnerEnumerable, TSkipInnerEnumerator>, SkipWhileEnumerator<TSkipOutItem, TSkipInnerEnumerator>>(ref source, ref second, resultSelector);

//        public static ZipEnumerable<TOutItem, int, TSkipOutItem, RangeEnumerable, RangeEnumerator, SkipWhileIndexedEnumerable<TSkipOutItem, TSkipInnerEnumerable, TSkipInnerEnumerator>, SkipWhileIndexedEnumerator<TSkipOutItem, TSkipInnerEnumerator>> Zip<TOutItem, TSkipOutItem, TSkipInnerEnumerable, TSkipInnerEnumerator>(this RangeEnumerable source, SkipWhileIndexedEnumerable<TSkipOutItem, TSkipInnerEnumerable, TSkipInnerEnumerator> second, Func<int, TSkipOutItem, TOutItem> resultSelector)
//        where TSkipInnerEnumerable : struct, IStructEnumerable<TSkipOutItem, TSkipInnerEnumerator>
//        where TSkipInnerEnumerator : struct, IStructEnumerator<TSkipOutItem>
//        => CommonImplementation.Zip<TOutItem, int, TSkipOutItem, RangeEnumerable, RangeEnumerator, SkipWhileIndexedEnumerable<TSkipOutItem, TSkipInnerEnumerable, TSkipInnerEnumerator>, SkipWhileIndexedEnumerator<TSkipOutItem, TSkipInnerEnumerator>>(ref source, ref second, resultSelector);

//        public static ZipEnumerable<TOutItem, int, TTakeOutItem, RangeEnumerable, RangeEnumerator, TakeEnumerable<TTakeOutItem, TTakeInnerEnumerable, TTakeInnerEnumerator>, TakeEnumerator<TTakeOutItem, TTakeInnerEnumerator>> Zip<TOutItem, TTakeOutItem, TTakeInnerEnumerable, TTakeInnerEnumerator>(this RangeEnumerable source, TakeEnumerable<TTakeOutItem, TTakeInnerEnumerable, TTakeInnerEnumerator> second, Func<int, TTakeOutItem, TOutItem> resultSelector)
//        where TTakeInnerEnumerable : struct, IStructEnumerable<TTakeOutItem, TTakeInnerEnumerator>
//        where TTakeInnerEnumerator : struct, IStructEnumerator<TTakeOutItem>
//        => CommonImplementation.Zip<TOutItem, int, TTakeOutItem, RangeEnumerable, RangeEnumerator, TakeEnumerable<TTakeOutItem, TTakeInnerEnumerable, TTakeInnerEnumerator>, TakeEnumerator<TTakeOutItem, TTakeInnerEnumerator>>(ref source, ref second, resultSelector);

//        public static ZipEnumerable<TOutItem, int, TTakeOutItem, RangeEnumerable, RangeEnumerator, TakeWhileEnumerable<TTakeOutItem, TTakeInnerEnumerable, TTakeInnerEnumerator>, TakeWhileEnumerator<TTakeOutItem, TTakeInnerEnumerator>> Zip<TOutItem, TTakeOutItem, TTakeInnerEnumerable, TTakeInnerEnumerator>(this RangeEnumerable source, TakeWhileEnumerable<TTakeOutItem, TTakeInnerEnumerable, TTakeInnerEnumerator> second, Func<int, TTakeOutItem, TOutItem> resultSelector)
//        where TTakeInnerEnumerable : struct, IStructEnumerable<TTakeOutItem, TTakeInnerEnumerator>
//        where TTakeInnerEnumerator : struct, IStructEnumerator<TTakeOutItem>
//        => CommonImplementation.Zip<TOutItem, int, TTakeOutItem, RangeEnumerable, RangeEnumerator, TakeWhileEnumerable<TTakeOutItem, TTakeInnerEnumerable, TTakeInnerEnumerator>, TakeWhileEnumerator<TTakeOutItem, TTakeInnerEnumerator>>(ref source, ref second, resultSelector);

//        public static ZipEnumerable<TOutItem, int, TTakeOutItem, RangeEnumerable, RangeEnumerator, TakeWhileIndexedEnumerable<TTakeOutItem, TTakeInnerEnumerable, TTakeInnerEnumerator>, TakeWhileIndexedEnumerator<TTakeOutItem, TTakeInnerEnumerator>> Zip<TOutItem, TTakeOutItem, TTakeInnerEnumerable, TTakeInnerEnumerator>(this RangeEnumerable source, TakeWhileIndexedEnumerable<TTakeOutItem, TTakeInnerEnumerable, TTakeInnerEnumerator> second, Func<int, TTakeOutItem, TOutItem> resultSelector)
//        where TTakeInnerEnumerable : struct, IStructEnumerable<TTakeOutItem, TTakeInnerEnumerator>
//        where TTakeInnerEnumerator : struct, IStructEnumerator<TTakeOutItem>
//        => CommonImplementation.Zip<TOutItem, int, TTakeOutItem, RangeEnumerable, RangeEnumerator, TakeWhileIndexedEnumerable<TTakeOutItem, TTakeInnerEnumerable, TTakeInnerEnumerator>, TakeWhileIndexedEnumerator<TTakeOutItem, TTakeInnerEnumerator>>(ref source, ref second, resultSelector);

//        public static ZipEnumerable<TOutItem, int, TWhereOutItem, RangeEnumerable, RangeEnumerator, WhereEnumerable<TWhereOutItem, TWhereInnerEnumerable, TWhereInnerEnumerator>, WhereEnumerator<TWhereOutItem, TWhereInnerEnumerator>> Zip<TOutItem, TWhereOutItem, TWhereInnerEnumerable, TWhereInnerEnumerator>(this RangeEnumerable source, WhereEnumerable<TWhereOutItem, TWhereInnerEnumerable, TWhereInnerEnumerator> second, Func<int, TWhereOutItem, TOutItem> resultSelector)
//        where TWhereInnerEnumerable : struct, IStructEnumerable<TWhereOutItem, TWhereInnerEnumerator>
//        where TWhereInnerEnumerator : struct, IStructEnumerator<TWhereOutItem>
//        => CommonImplementation.Zip<TOutItem, int, TWhereOutItem, RangeEnumerable, RangeEnumerator, WhereEnumerable<TWhereOutItem, TWhereInnerEnumerable, TWhereInnerEnumerator>, WhereEnumerator<TWhereOutItem, TWhereInnerEnumerator>>(ref source, ref second, resultSelector);

//        public static ZipEnumerable<TOutItem, int, TWhereOutItem, RangeEnumerable, RangeEnumerator, WhereIndexedEnumerable<TWhereOutItem, TWhereInnerEnumerable, TWhereInnerEnumerator>, WhereIndexedEnumerator<TWhereOutItem, TWhereInnerEnumerator>> Zip<TOutItem, TWhereOutItem, TWhereInnerEnumerable, TWhereInnerEnumerator>(this RangeEnumerable source, WhereIndexedEnumerable<TWhereOutItem, TWhereInnerEnumerable, TWhereInnerEnumerator> second, Func<int, TWhereOutItem, TOutItem> resultSelector)
//        where TWhereInnerEnumerable : struct, IStructEnumerable<TWhereOutItem, TWhereInnerEnumerator>
//        where TWhereInnerEnumerator : struct, IStructEnumerator<TWhereOutItem>
//        => CommonImplementation.Zip<TOutItem, int, TWhereOutItem, RangeEnumerable, RangeEnumerator, WhereIndexedEnumerable<TWhereOutItem, TWhereInnerEnumerable, TWhereInnerEnumerator>, WhereIndexedEnumerator<TWhereOutItem, TWhereInnerEnumerator>>(ref source, ref second, resultSelector);

//        public static ZipEnumerable<TOutItem, int, TZipOutItem, RangeEnumerable, RangeEnumerator, ZipEnumerable<TZipOutItem, TZipFirstItem, TZipSecondItem, TZipFirstEnumerable, TZipFirstEnumerator, TZipSecondEnumerable, TZipSecondEnumerator>, ZipEnumerator<TZipOutItem, TZipFirstItem, TZipSecondItem, TZipFirstEnumerator, TZipSecondEnumerator>> Zip<TOutItem, TZipOutItem, TZipFirstItem, TZipSecondItem, TZipFirstEnumerable, TZipFirstEnumerator, TZipSecondEnumerable, TZipSecondEnumerator>(this RangeEnumerable source, ZipEnumerable<TZipOutItem, TZipFirstItem, TZipSecondItem, TZipFirstEnumerable, TZipFirstEnumerator, TZipSecondEnumerable, TZipSecondEnumerator> second, Func<int, TZipOutItem, TOutItem> resultSelector)
//        where TZipFirstEnumerable : struct, IStructEnumerable<TZipFirstItem, TZipFirstEnumerator>
//        where TZipFirstEnumerator : struct, IStructEnumerator<TZipFirstItem>
//        where TZipSecondEnumerable : struct, IStructEnumerable<TZipSecondItem, TZipSecondEnumerator>
//        where TZipSecondEnumerator : struct, IStructEnumerator<TZipSecondItem>
//        => CommonImplementation.Zip<TOutItem, int, TZipOutItem, RangeEnumerable, RangeEnumerator, ZipEnumerable<TZipOutItem, TZipFirstItem, TZipSecondItem, TZipFirstEnumerable, TZipFirstEnumerator, TZipSecondEnumerable, TZipSecondEnumerator>, ZipEnumerator<TZipOutItem, TZipFirstItem, TZipSecondItem, TZipFirstEnumerator, TZipSecondEnumerator>>(ref source, ref second, resultSelector);

//        public static ZipEnumerable<TOutItem, int, TSelectOutItem, RangeEnumerable, RangeEnumerator, SelectSelectEnumerable<TSelectOutItem, TSelectInnerItem, TSelectInnerEnumerable, TSelectInnerEnumerator, TSelectProjection>, SelectSelectEnumerator<TSelectOutItem, TSelectInnerItem, TSelectInnerEnumerator, TSelectProjection>> Zip<TOutItem, TSelectOutItem, TSelectInnerItem, TSelectInnerEnumerable, TSelectInnerEnumerator, TSelectProjection>(this RangeEnumerable source, SelectSelectEnumerable<TSelectOutItem, TSelectInnerItem, TSelectInnerEnumerable, TSelectInnerEnumerator, TSelectProjection> second, Func<int, TSelectOutItem, TOutItem> resultSelector)
//        where TSelectInnerEnumerable : struct, IStructEnumerable<TSelectInnerItem, TSelectInnerEnumerator>
//        where TSelectInnerEnumerator : struct, IStructEnumerator<TSelectInnerItem>
//        where TSelectProjection : struct, IStructProjection<TSelectOutItem, TSelectInnerItem>
//        => CommonImplementation.Zip<TOutItem, int, TSelectOutItem, RangeEnumerable, RangeEnumerator, SelectSelectEnumerable<TSelectOutItem, TSelectInnerItem, TSelectInnerEnumerable, TSelectInnerEnumerator, TSelectProjection>, SelectSelectEnumerator<TSelectOutItem, TSelectInnerItem, TSelectInnerEnumerator, TSelectProjection>>(ref source, ref second, resultSelector);

//        public static ZipEnumerable<TOutItem, int, TSelectOutItem, RangeEnumerable, RangeEnumerator, SelectWhereEnumerable<TSelectOutItem, TSelectInnerItem, TSelectInnerEnumerable, TSelectInnerEnumerator, TSelectProjection, TSelectPredicate>, SelectWhereEnumerator<TSelectOutItem, TSelectInnerItem, TSelectInnerEnumerator, TSelectProjection, TSelectPredicate>> Zip<TOutItem, TSelectOutItem, TSelectInnerItem, TSelectInnerEnumerable, TSelectInnerEnumerator, TSelectProjection, TSelectPredicate>(this RangeEnumerable source, SelectWhereEnumerable<TSelectOutItem, TSelectInnerItem, TSelectInnerEnumerable, TSelectInnerEnumerator, TSelectProjection, TSelectPredicate> second, Func<int, TSelectOutItem, TOutItem> resultSelector)
//        where TSelectInnerEnumerable : struct, IStructEnumerable<TSelectInnerItem, TSelectInnerEnumerator>
//        where TSelectInnerEnumerator : struct, IStructEnumerator<TSelectInnerItem>
//        where TSelectProjection : struct, IStructProjection<TSelectOutItem, TSelectInnerItem>
//        where TSelectPredicate : struct, IStructPredicate<TSelectOutItem>
//        => CommonImplementation.Zip<TOutItem, int, TSelectOutItem, RangeEnumerable, RangeEnumerator, SelectWhereEnumerable<TSelectOutItem, TSelectInnerItem, TSelectInnerEnumerable, TSelectInnerEnumerator, TSelectProjection, TSelectPredicate>, SelectWhereEnumerator<TSelectOutItem, TSelectInnerItem, TSelectInnerEnumerator, TSelectProjection, TSelectPredicate>>(ref source, ref second, resultSelector);

//        public static ZipEnumerable<TOutItem, int, TWhereOutItem, RangeEnumerable, RangeEnumerator, WhereWhereEnumerable<TWhereOutItem, TWhereInnerEnumerable, TWhereInnerEnumerator, TWherePredicate>, WhereWhereEnumerator<TWhereOutItem, TWhereInnerEnumerator, TWherePredicate>> Zip<TOutItem, TWhereOutItem, TWhereInnerEnumerable, TWhereInnerEnumerator, TWherePredicate>(this RangeEnumerable source, WhereWhereEnumerable<TWhereOutItem, TWhereInnerEnumerable, TWhereInnerEnumerator, TWherePredicate> second, Func<int, TWhereOutItem, TOutItem> resultSelector)
//        where TWhereInnerEnumerable : struct, IStructEnumerable<TWhereOutItem, TWhereInnerEnumerator>
//        where TWhereInnerEnumerator : struct, IStructEnumerator<TWhereOutItem>
//        where TWherePredicate : struct, IStructPredicate<TWhereOutItem>
//        => CommonImplementation.Zip<TOutItem, int, TWhereOutItem, RangeEnumerable, RangeEnumerator, WhereWhereEnumerable<TWhereOutItem, TWhereInnerEnumerable, TWhereInnerEnumerator, TWherePredicate>, WhereWhereEnumerator<TWhereOutItem, TWhereInnerEnumerator, TWherePredicate>>(ref source, ref second, resultSelector);

//        public static ZipEnumerable<TOutItem, int, TWhereOutItem, RangeEnumerable, RangeEnumerator, WhereSelectEnumerable<TWhereOutItem, TWhereInnerItem, TWhereInnerEnumerable, TWhereInnerEnumerator, TWherePredicate, TWhereProjection>, WhereSelectEnumerator<TWhereOutItem, TWhereInnerItem, TWhereInnerEnumerator, TWherePredicate, TWhereProjection>> Zip<TOutItem, TWhereOutItem, TWhereInnerItem, TWhereInnerEnumerable, TWhereInnerEnumerator, TWherePredicate, TWhereProjection>(this RangeEnumerable source, WhereSelectEnumerable<TWhereOutItem, TWhereInnerItem, TWhereInnerEnumerable, TWhereInnerEnumerator, TWherePredicate, TWhereProjection> second, Func<int, TWhereOutItem, TOutItem> resultSelector)
//        where TWhereInnerEnumerable : struct, IStructEnumerable<TWhereInnerItem, TWhereInnerEnumerator>
//        where TWhereInnerEnumerator : struct, IStructEnumerator<TWhereInnerItem>
//        where TWherePredicate : struct, IStructPredicate<TWhereInnerItem>
//        where TWhereProjection : struct, IStructProjection<TWhereOutItem, TWhereInnerItem>
//        => CommonImplementation.Zip<TOutItem, int, TWhereOutItem, RangeEnumerable, RangeEnumerator, WhereSelectEnumerable<TWhereOutItem, TWhereInnerItem, TWhereInnerEnumerable, TWhereInnerEnumerator, TWherePredicate, TWhereProjection>, WhereSelectEnumerator<TWhereOutItem, TWhereInnerItem, TWhereInnerEnumerator, TWherePredicate, TWhereProjection>>(ref source, ref second, resultSelector);

//        public static ZipEnumerable<TOutItem, int, TDistinctOutItem, RangeEnumerable, RangeEnumerator, DistinctDefaultEnumerable<TDistinctOutItem, TDistinctInnerEnumerable, TDistinctInnerEnumerator>, DistinctDefaultEnumerator<TDistinctOutItem, TDistinctInnerEnumerator>> Zip<TOutItem, TDistinctOutItem, TDistinctInnerEnumerable, TDistinctInnerEnumerator>(this RangeEnumerable source, DistinctDefaultEnumerable<TDistinctOutItem, TDistinctInnerEnumerable, TDistinctInnerEnumerator> second, Func<int, TDistinctOutItem, TOutItem> resultSelector)
//        where TDistinctInnerEnumerable : struct, IStructEnumerable<TDistinctOutItem, TDistinctInnerEnumerator>
//        where TDistinctInnerEnumerator : struct, IStructEnumerator<TDistinctOutItem>
//        => CommonImplementation.Zip<TOutItem, int, TDistinctOutItem, RangeEnumerable, RangeEnumerator, DistinctDefaultEnumerable<TDistinctOutItem, TDistinctInnerEnumerable, TDistinctInnerEnumerator>, DistinctDefaultEnumerator<TDistinctOutItem, TDistinctInnerEnumerator>>(ref source, ref second, resultSelector);

//        public static ZipEnumerable<TOutItem, int, TDistinctOutItem, RangeEnumerable, RangeEnumerator, DistinctSpecificEnumerable<TDistinctOutItem, TDistinctInnerEnumerable, TDistinctInnerEnumerator>, DistinctSpecificEnumerator<TDistinctOutItem, TDistinctInnerEnumerator>> Zip<TOutItem, TDistinctOutItem, TDistinctInnerEnumerable, TDistinctInnerEnumerator>(this RangeEnumerable source, DistinctSpecificEnumerable<TDistinctOutItem, TDistinctInnerEnumerable, TDistinctInnerEnumerator> second, Func<int, TDistinctOutItem, TOutItem> resultSelector)
//        where TDistinctInnerEnumerable : struct, IStructEnumerable<TDistinctOutItem, TDistinctInnerEnumerator>
//        where TDistinctInnerEnumerator : struct, IStructEnumerator<TDistinctOutItem>
//        => CommonImplementation.Zip<TOutItem, int, TDistinctOutItem, RangeEnumerable, RangeEnumerator, DistinctSpecificEnumerable<TDistinctOutItem, TDistinctInnerEnumerable, TDistinctInnerEnumerator>, DistinctSpecificEnumerator<TDistinctOutItem, TDistinctInnerEnumerator>>(ref source, ref second, resultSelector);

//        public static EmptyEnumerable<TOutItem> Zip<TOutItem, TEmptyOrderedItem>(this RangeEnumerable source, EmptyOrderedEnumerable<TEmptyOrderedItem> second, Func<int, TEmptyOrderedItem, TOutItem> resultSelector)
//        {
//            if (source.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(source));
//            if (second.IsDefaultValue()) throw CommonImplementation.Uninitialized(nameof(second));
//            if (resultSelector == null) throw CommonImplementation.ArgumentNull(nameof(resultSelector));

//            return EmptyCache<TOutItem>.Empty;
//        }

//        public static ZipEnumerable<TOutItem, int, TExceptOutItem, RangeEnumerable, RangeEnumerator, ExceptDefaultEnumerable<TExceptOutItem, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>, ExceptDefaultEnumerator<TExceptOutItem, TExceptFirstEnumerator, TExceptSecondEnumerator>> Zip<TOutItem, TExceptOutItem, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>(this RangeEnumerable source, ExceptDefaultEnumerable<TExceptOutItem, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator> second, Func<int, TExceptOutItem, TOutItem> resultSelector)
//        where TExceptFirstEnumerable : struct, IStructEnumerable<TExceptOutItem, TExceptFirstEnumerator>
//        where TExceptFirstEnumerator : struct, IStructEnumerator<TExceptOutItem>
//        where TExceptSecondEnumerable : struct, IStructEnumerable<TExceptOutItem, TExceptSecondEnumerator>
//        where TExceptSecondEnumerator : struct, IStructEnumerator<TExceptOutItem>
//        => CommonImplementation.Zip<TOutItem, int, TExceptOutItem, RangeEnumerable, RangeEnumerator, ExceptDefaultEnumerable<TExceptOutItem, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>, ExceptDefaultEnumerator<TExceptOutItem, TExceptFirstEnumerator, TExceptSecondEnumerator>>(ref source, ref second, resultSelector);

//        public static ZipEnumerable<TOutItem, int, TExceptOutItem, RangeEnumerable, RangeEnumerator, ExceptSpecificEnumerable<TExceptOutItem, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>, ExceptSpecificEnumerator<TExceptOutItem, TExceptFirstEnumerator, TExceptSecondEnumerator>> Zip<TOutItem, TExceptOutItem, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>(this RangeEnumerable source, ExceptSpecificEnumerable<TExceptOutItem, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator> second, Func<int, TExceptOutItem, TOutItem> resultSelector)
//        where TExceptFirstEnumerable : struct, IStructEnumerable<TExceptOutItem, TExceptFirstEnumerator>
//        where TExceptFirstEnumerator : struct, IStructEnumerator<TExceptOutItem>
//        where TExceptSecondEnumerable : struct, IStructEnumerable<TExceptOutItem, TExceptSecondEnumerator>
//        where TExceptSecondEnumerator : struct, IStructEnumerator<TExceptOutItem>
//        => CommonImplementation.Zip<TOutItem, int, TExceptOutItem, RangeEnumerable, RangeEnumerator, ExceptSpecificEnumerable<TExceptOutItem, TExceptFirstEnumerable, TExceptFirstEnumerator, TExceptSecondEnumerable, TExceptSecondEnumerator>, ExceptSpecificEnumerator<TExceptOutItem, TExceptFirstEnumerator, TExceptSecondEnumerator>>(ref source, ref second, resultSelector);

//        public static ZipEnumerable<TOutItem, int, TIntersectOutItem, RangeEnumerable, RangeEnumerator, IntersectDefaultEnumerable<TIntersectOutItem, TIntersectFirstEnumerable, TIntersectFirstEnumerator, TIntersectSecondEnumerable, TIntersectSecondEnumerator>, IntersectDefaultEnumerator<TIntersectOutItem, TIntersectFirstEnumerator, TIntersectSecondEnumerator>> Zip<TOutItem, TIntersectOutItem, TIntersectFirstEnumerable, TIntersectFirstEnumerator, TIntersectSecondEnumerable, TIntersectSecondEnumerator>(this RangeEnumerable source, IntersectDefaultEnumerable<TIntersectOutItem, TIntersectFirstEnumerable, TIntersectFirstEnumerator, TIntersectSecondEnumerable, TIntersectSecondEnumerator> second, Func<int, TIntersectOutItem, TOutItem> resultSelector)
//        where TIntersectFirstEnumerable : struct, IStructEnumerable<TIntersectOutItem, TIntersectFirstEnumerator>
//        where TIntersectFirstEnumerator : struct, IStructEnumerator<TIntersectOutItem>
//        where TIntersectSecondEnumerable : struct, IStructEnumerable<TIntersectOutItem, TIntersectSecondEnumerator>
//        where TIntersectSecondEnumerator : struct, IStructEnumerator<TIntersectOutItem>
//        => CommonImplementation.Zip<TOutItem, int, TIntersectOutItem, RangeEnumerable, RangeEnumerator, IntersectDefaultEnumerable<TIntersectOutItem, TIntersectFirstEnumerable, TIntersectFirstEnumerator, TIntersectSecondEnumerable, TIntersectSecondEnumerator>, IntersectDefaultEnumerator<TIntersectOutItem, TIntersectFirstEnumerator, TIntersectSecondEnumerator>>(ref source, ref second, resultSelector);

//        public static ZipEnumerable<TOutItem, int, TIntersectOutItem, RangeEnumerable, RangeEnumerator, IntersectSpecificEnumerable<TIntersectOutItem, TIntersectFirstEnumerable, TIntersectFirstEnumerator, TIntersectSecondEnumerable, TIntersectSecondEnumerator>, IntersectSpecificEnumerator<TIntersectOutItem, TIntersectFirstEnumerator, TIntersectSecondEnumerator>> Zip<TOutItem, TIntersectOutItem, TIntersectFirstEnumerable, TIntersectFirstEnumerator, TIntersectSecondEnumerable, TIntersectSecondEnumerator>(this RangeEnumerable source, IntersectSpecificEnumerable<TIntersectOutItem, TIntersectFirstEnumerable, TIntersectFirstEnumerator, TIntersectSecondEnumerable, TIntersectSecondEnumerator> second, Func<int, TIntersectOutItem, TOutItem> resultSelector)
//        where TIntersectFirstEnumerable : struct, IStructEnumerable<TIntersectOutItem, TIntersectFirstEnumerator>
//        where TIntersectFirstEnumerator : struct, IStructEnumerator<TIntersectOutItem>
//        where TIntersectSecondEnumerable : struct, IStructEnumerable<TIntersectOutItem, TIntersectSecondEnumerator>
//        where TIntersectSecondEnumerator : struct, IStructEnumerator<TIntersectOutItem>
//        => CommonImplementation.Zip<TOutItem, int, TIntersectOutItem, RangeEnumerable, RangeEnumerator, IntersectSpecificEnumerable<TIntersectOutItem, TIntersectFirstEnumerable, TIntersectFirstEnumerator, TIntersectSecondEnumerable, TIntersectSecondEnumerator>, IntersectSpecificEnumerator<TIntersectOutItem, TIntersectFirstEnumerator, TIntersectSecondEnumerator>>(ref source, ref second, resultSelector);

//        public static ZipEnumerable<TOutItem, int, TUnionOutItem, RangeEnumerable, RangeEnumerator, UnionDefaultEnumerable<TUnionOutItem, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator>, UnionDefaultEnumerator<TUnionOutItem, TUnionFirstEnumerator, TUnionSecondEnumerator>> Zip<TOutItem, TUnionOutItem, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator>(this RangeEnumerable source, UnionDefaultEnumerable<TUnionOutItem, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator> second, Func<int, TUnionOutItem, TOutItem> resultSelector)
//        where TUnionFirstEnumerable : struct, IStructEnumerable<TUnionOutItem, TUnionFirstEnumerator>
//        where TUnionFirstEnumerator : struct, IStructEnumerator<TUnionOutItem>
//        where TUnionSecondEnumerable : struct, IStructEnumerable<TUnionOutItem, TUnionSecondEnumerator>
//        where TUnionSecondEnumerator : struct, IStructEnumerator<TUnionOutItem>
//        => CommonImplementation.Zip<TOutItem, int, TUnionOutItem, RangeEnumerable, RangeEnumerator, UnionDefaultEnumerable<TUnionOutItem, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator>, UnionDefaultEnumerator<TUnionOutItem, TUnionFirstEnumerator, TUnionSecondEnumerator>>(ref source, ref second, resultSelector);

//        public static ZipEnumerable<TOutItem, int, TUnionOutItem, RangeEnumerable, RangeEnumerator, UnionSpecificEnumerable<TUnionOutItem, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator>, UnionSpecificEnumerator<TUnionOutItem, TUnionFirstEnumerator, TUnionSecondEnumerator>> Zip<TOutItem, TUnionOutItem, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator>(this RangeEnumerable source, UnionSpecificEnumerable<TUnionOutItem, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator> second, Func<int, TUnionOutItem, TOutItem> resultSelector)
//        where TUnionFirstEnumerable : struct, IStructEnumerable<TUnionOutItem, TUnionFirstEnumerator>
//        where TUnionFirstEnumerator : struct, IStructEnumerator<TUnionOutItem>
//        where TUnionSecondEnumerable : struct, IStructEnumerable<TUnionOutItem, TUnionSecondEnumerator>
//        where TUnionSecondEnumerator : struct, IStructEnumerator<TUnionOutItem>
//        => CommonImplementation.Zip<TOutItem, int, TUnionOutItem, RangeEnumerable, RangeEnumerator, UnionSpecificEnumerable<TUnionOutItem, TUnionFirstEnumerable, TUnionFirstEnumerator, TUnionSecondEnumerable, TUnionSecondEnumerator>, UnionSpecificEnumerator<TUnionOutItem, TUnionFirstEnumerator, TUnionSecondEnumerator>>(ref source, ref second, resultSelector);

//        public static ZipEnumerable<TOutItem, int, TGroupedOutItem, RangeEnumerable, RangeEnumerator, GroupedEnumerable<TGroupedKey, TGroupedOutItem>, GroupedEnumerator<TGroupedOutItem>> Zip<TOutItem, TGroupedKey, TGroupedOutItem>(this RangeEnumerable source, GroupedEnumerable<TGroupedKey, TGroupedOutItem> second, Func<int, TGroupedOutItem, TOutItem> resultSelector)
//        => CommonImplementation.Zip<TOutItem, int, TGroupedOutItem, RangeEnumerable, RangeEnumerator, GroupedEnumerable<TGroupedKey, TGroupedOutItem>, GroupedEnumerator<TGroupedOutItem>>(ref source, ref second, resultSelector);

//        public static ZipEnumerable<TOutItem, int, TGroupedOutItem, RangeEnumerable, RangeEnumerator, GroupingEnumerable<TGroupedKey, TGroupedOutItem>, GroupingEnumerator<TGroupedOutItem>> Zip<TOutItem, TGroupedKey, TGroupedOutItem>(this RangeEnumerable source, GroupingEnumerable<TGroupedKey, TGroupedOutItem> second, Func<int, TGroupedOutItem, TOutItem> resultSelector)
//        => CommonImplementation.Zip<TOutItem, int, TGroupedOutItem, RangeEnumerable, RangeEnumerator, GroupingEnumerable<TGroupedKey, TGroupedOutItem>, GroupingEnumerator<TGroupedOutItem>>(ref source, ref second, resultSelector);

//        public static ZipEnumerable<TOutItem, int, TGroupJoinOutItem, RangeEnumerable, RangeEnumerator, GroupJoinDefaultEnumerable<TGroupJoinOutItem, TGroupJoinKeyItem, TGroupJoinLeftItem, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRightItem, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator>, GroupJoinDefaultEnumerator<TGroupJoinOutItem, TGroupJoinKeyItem, TGroupJoinLeftItem, TGroupJoinLeftEnumerator, TGroupJoinRightItem, TGroupJoinRightEnumerator>> Zip<TOutItem, TGroupJoinOutItem, TGroupJoinKeyItem, TGroupJoinLeftItem, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRightItem, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator>(this RangeEnumerable source, GroupJoinDefaultEnumerable<TGroupJoinOutItem, TGroupJoinKeyItem, TGroupJoinLeftItem, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRightItem, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator> second, Func<int, TGroupJoinOutItem, TOutItem> resultSelector)
//        where TGroupJoinLeftEnumerable : struct, IStructEnumerable<TGroupJoinLeftItem, TGroupJoinLeftEnumerator>
//        where TGroupJoinLeftEnumerator : struct, IStructEnumerator<TGroupJoinLeftItem>
//        where TGroupJoinRightEnumerable : struct, IStructEnumerable<TGroupJoinRightItem, TGroupJoinRightEnumerator>
//        where TGroupJoinRightEnumerator : struct, IStructEnumerator<TGroupJoinRightItem>
//        => CommonImplementation.Zip<TOutItem, int, TGroupJoinOutItem, RangeEnumerable, RangeEnumerator, GroupJoinDefaultEnumerable<TGroupJoinOutItem, TGroupJoinKeyItem, TGroupJoinLeftItem, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRightItem, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator>, GroupJoinDefaultEnumerator<TGroupJoinOutItem, TGroupJoinKeyItem, TGroupJoinLeftItem, TGroupJoinLeftEnumerator, TGroupJoinRightItem, TGroupJoinRightEnumerator>>(ref source, ref second, resultSelector);

//        public static ZipEnumerable<TOutItem, int, TGroupJoinOutItem, RangeEnumerable, RangeEnumerator, GroupJoinSpecificEnumerable<TGroupJoinOutItem, TGroupJoinKeyItem, TGroupJoinLeftItem, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRightItem, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator>, GroupJoinSpecificEnumerator<TGroupJoinOutItem, TGroupJoinKeyItem, TGroupJoinLeftItem, TGroupJoinLeftEnumerator, TGroupJoinRightItem, TGroupJoinRightEnumerator>> Zip<TOutItem, TGroupJoinOutItem, TGroupJoinKeyItem, TGroupJoinLeftItem, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRightItem, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator>(this RangeEnumerable source, GroupJoinSpecificEnumerable<TGroupJoinOutItem, TGroupJoinKeyItem, TGroupJoinLeftItem, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRightItem, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator> second, Func<int, TGroupJoinOutItem, TOutItem> resultSelector)
//        where TGroupJoinLeftEnumerable : struct, IStructEnumerable<TGroupJoinLeftItem, TGroupJoinLeftEnumerator>
//        where TGroupJoinLeftEnumerator : struct, IStructEnumerator<TGroupJoinLeftItem>
//        where TGroupJoinRightEnumerable : struct, IStructEnumerable<TGroupJoinRightItem, TGroupJoinRightEnumerator>
//        where TGroupJoinRightEnumerator : struct, IStructEnumerator<TGroupJoinRightItem>
//        => CommonImplementation.Zip<TOutItem, int, TGroupJoinOutItem, RangeEnumerable, RangeEnumerator, GroupJoinSpecificEnumerable<TGroupJoinOutItem, TGroupJoinKeyItem, TGroupJoinLeftItem, TGroupJoinLeftEnumerable, TGroupJoinLeftEnumerator, TGroupJoinRightItem, TGroupJoinRightEnumerable, TGroupJoinRightEnumerator>, GroupJoinSpecificEnumerator<TGroupJoinOutItem, TGroupJoinKeyItem, TGroupJoinLeftItem, TGroupJoinLeftEnumerator, TGroupJoinRightItem, TGroupJoinRightEnumerator>>(ref source, ref second, resultSelector);

//        public static ZipEnumerable<TOutItem, int, TJoinOutItem, RangeEnumerable, RangeEnumerator, JoinDefaultEnumerable<TJoinOutItem, TJoinKeyItem, TJoinLeftItem, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRightItem, TJoinRightEnumerable, TJoinRightEnumerator>, JoinDefaultEnumerator<TJoinOutItem, TJoinKeyItem, TJoinLeftItem, TJoinLeftEnumerator, TJoinRightItem, TJoinRightEnumerator>> Zip<TOutItem, TJoinOutItem, TJoinKeyItem, TJoinLeftItem, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRightItem, TJoinRightEnumerable, TJoinRightEnumerator>(this RangeEnumerable source, JoinDefaultEnumerable<TJoinOutItem, TJoinKeyItem, TJoinLeftItem, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRightItem, TJoinRightEnumerable, TJoinRightEnumerator> second, Func<int, TJoinOutItem, TOutItem> resultSelector)
//        where TJoinLeftEnumerable : struct, IStructEnumerable<TJoinLeftItem, TJoinLeftEnumerator>
//        where TJoinLeftEnumerator : struct, IStructEnumerator<TJoinLeftItem>
//        where TJoinRightEnumerable : struct, IStructEnumerable<TJoinRightItem, TJoinRightEnumerator>
//        where TJoinRightEnumerator : struct, IStructEnumerator<TJoinRightItem>
//        => CommonImplementation.Zip<TOutItem, int, TJoinOutItem, RangeEnumerable, RangeEnumerator, JoinDefaultEnumerable<TJoinOutItem, TJoinKeyItem, TJoinLeftItem, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRightItem, TJoinRightEnumerable, TJoinRightEnumerator>, JoinDefaultEnumerator<TJoinOutItem, TJoinKeyItem, TJoinLeftItem, TJoinLeftEnumerator, TJoinRightItem, TJoinRightEnumerator>>(ref source, ref second, resultSelector);

//        public static ZipEnumerable<TOutItem, int, TJoinOutItem, RangeEnumerable, RangeEnumerator, JoinSpecificEnumerable<TJoinOutItem, TJoinKeyItem, TJoinLeftItem, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRightItem, TJoinRightEnumerable, TJoinRightEnumerator>, JoinSpecificEnumerator<TJoinOutItem, TJoinKeyItem, TJoinLeftItem, TJoinLeftEnumerator, TJoinRightItem, TJoinRightEnumerator>> Zip<TOutItem, TJoinOutItem, TJoinKeyItem, TJoinLeftItem, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRightItem, TJoinRightEnumerable, TJoinRightEnumerator>(this RangeEnumerable source, JoinSpecificEnumerable<TJoinOutItem, TJoinKeyItem, TJoinLeftItem, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRightItem, TJoinRightEnumerable, TJoinRightEnumerator> second, Func<int, TJoinOutItem, TOutItem> resultSelector)
//        where TJoinLeftEnumerable : struct, IStructEnumerable<TJoinLeftItem, TJoinLeftEnumerator>
//        where TJoinLeftEnumerator : struct, IStructEnumerator<TJoinLeftItem>
//        where TJoinRightEnumerable : struct, IStructEnumerable<TJoinRightItem, TJoinRightEnumerator>
//        where TJoinRightEnumerator : struct, IStructEnumerator<TJoinRightItem>
//        => CommonImplementation.Zip<TOutItem, int, TJoinOutItem, RangeEnumerable, RangeEnumerator, JoinSpecificEnumerable<TJoinOutItem, TJoinKeyItem, TJoinLeftItem, TJoinLeftEnumerable, TJoinLeftEnumerator, TJoinRightItem, TJoinRightEnumerable, TJoinRightEnumerator>, JoinSpecificEnumerator<TJoinOutItem, TJoinKeyItem, TJoinLeftItem, TJoinLeftEnumerator, TJoinRightItem, TJoinRightEnumerator>>(ref source, ref second, resultSelector);

//        public static ZipEnumerable<TOutItem, int, TOrderByOutItem, RangeEnumerable, RangeEnumerator, OrderByEnumerable<TOrderByOutItem, TOrderByKey, TOrderByInnerEnumerable, TOrderByInnerEnumerator, TOrderByComparer>, OrderByEnumerator<TOrderByOutItem, TOrderByKey, TOrderByInnerEnumerator, TOrderByComparer>> Zip<TOutItem, TOrderByKey, TOrderByOutItem, TOrderByInnerEnumerable, TOrderByInnerEnumerator, TOrderByComparer>(this RangeEnumerable source, OrderByEnumerable<TOrderByOutItem, TOrderByKey, TOrderByInnerEnumerable, TOrderByInnerEnumerator, TOrderByComparer> second, Func<int, TOrderByOutItem, TOutItem> resultSelector)
//        where TOrderByInnerEnumerable : struct, IStructEnumerable<TOrderByOutItem, TOrderByInnerEnumerator>
//        where TOrderByInnerEnumerator : struct, IStructEnumerator<TOrderByOutItem>
//        where TOrderByComparer : struct, IStructComparer<TOrderByOutItem, TOrderByKey>
//        => CommonImplementation.Zip<TOutItem, int, TOrderByOutItem, RangeEnumerable, RangeEnumerator, OrderByEnumerable<TOrderByOutItem, TOrderByKey, TOrderByInnerEnumerable, TOrderByInnerEnumerator, TOrderByComparer>, OrderByEnumerator<TOrderByOutItem, TOrderByKey, TOrderByInnerEnumerator, TOrderByComparer>>(ref source, ref second, resultSelector);

//        public static ZipEnumerable<TOutItem, int, TReverseOutItem, RangeEnumerable, RangeEnumerator, ReverseEnumerable<TReverseOutItem, TReverseEnumerable, TReverseEnumerator>, ReverseEnumerator<TReverseOutItem>> Zip<TOutItem, TReverseOutItem, TReverseEnumerable, TReverseEnumerator>(this RangeEnumerable source, ReverseEnumerable<TReverseOutItem, TReverseEnumerable, TReverseEnumerator> second, Func<int, TReverseOutItem, TOutItem> resultSelector)
//        where TReverseEnumerable : struct, IStructEnumerable<TReverseOutItem, TReverseEnumerator>
//        where TReverseEnumerator : struct, IStructEnumerator<TReverseOutItem>
//        => CommonImplementation.Zip<TOutItem, int, TReverseOutItem, RangeEnumerable, RangeEnumerator, ReverseEnumerable<TReverseOutItem, TReverseEnumerable, TReverseEnumerator>, ReverseEnumerator<TReverseOutItem>>(ref source, ref second, resultSelector);

//        public static ZipEnumerable<TOutItem, int, TGroupByOutItem, RangeEnumerable, RangeEnumerator, GroupByCollectionDefaultEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByOutItem, TGroupByEnumerable, TGroupByEnumerator>, GroupByCollectionDefaultEnumerator<TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByOutItem, TGroupByEnumerator>> Zip<TOutItem, TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByOutItem, TGroupByEnumerable, TGroupByEnumerator>(this RangeEnumerable source, GroupByCollectionDefaultEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByOutItem, TGroupByEnumerable, TGroupByEnumerator> second, Func<int, TGroupByOutItem, TOutItem> resultSelector)
//        where TGroupByEnumerable : struct, IStructEnumerable<TGroupByInItem, TGroupByEnumerator>
//        where TGroupByEnumerator : struct, IStructEnumerator<TGroupByInItem>
//        => CommonImplementation.Zip<TOutItem, int, TGroupByOutItem, RangeEnumerable, RangeEnumerator, GroupByCollectionDefaultEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByOutItem, TGroupByEnumerable, TGroupByEnumerator>, GroupByCollectionDefaultEnumerator<TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByOutItem, TGroupByEnumerator>>(ref source, ref second, resultSelector);

//        public static ZipEnumerable<TOutItem, int, TGroupByOutItem, RangeEnumerable, RangeEnumerator, GroupByCollectionSpecificEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByOutItem, TGroupByEnumerable, TGroupByEnumerator>, GroupByCollectionSpecificEnumerator<TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByOutItem, TGroupByEnumerator>> Zip<TOutItem, TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByOutItem, TGroupByEnumerable, TGroupByEnumerator>(this RangeEnumerable source, GroupByCollectionSpecificEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByOutItem, TGroupByEnumerable, TGroupByEnumerator> second, Func<int, TGroupByOutItem, TOutItem> resultSelector)
//        where TGroupByEnumerable : struct, IStructEnumerable<TGroupByInItem, TGroupByEnumerator>
//        where TGroupByEnumerator : struct, IStructEnumerator<TGroupByInItem>
//        => CommonImplementation.Zip<TOutItem, int, TGroupByOutItem, RangeEnumerable, RangeEnumerator, GroupByCollectionSpecificEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByOutItem, TGroupByEnumerable, TGroupByEnumerator>, GroupByCollectionSpecificEnumerator<TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByOutItem, TGroupByEnumerator>>(ref source, ref second, resultSelector);

//        public static ZipEnumerable<TOutItem, int, GroupingEnumerable<TGroupByKey, TGroupByElement>, RangeEnumerable, RangeEnumerator, GroupByDefaultEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByEnumerable, TGroupByEnumerator>, GroupByDefaultEnumerator<TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByEnumerator>> Zip<TOutItem, TGroupByKey, TGroupByElement, TGroupByInItem, TGroupByEnumerable, TGroupByEnumerator>(this RangeEnumerable source, GroupByDefaultEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByEnumerable, TGroupByEnumerator> second, Func<int, GroupingEnumerable<TGroupByKey, TGroupByElement>, TOutItem> resultSelector)
//        where TGroupByEnumerable : struct, IStructEnumerable<TGroupByInItem, TGroupByEnumerator>
//        where TGroupByEnumerator : struct, IStructEnumerator<TGroupByInItem>
//        => CommonImplementation.Zip<TOutItem, int, GroupingEnumerable<TGroupByKey, TGroupByElement>, RangeEnumerable, RangeEnumerator, GroupByDefaultEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByEnumerable, TGroupByEnumerator>, GroupByDefaultEnumerator<TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByEnumerator>>(ref source, ref second, resultSelector);

//        public static ZipEnumerable<TOutItem, int, GroupingEnumerable<TGroupByKey, TGroupByElement>, RangeEnumerable, RangeEnumerator, GroupBySpecificEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByEnumerable, TGroupByEnumerator>, GroupBySpecificEnumerator<TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByEnumerator>> Zip<TOutItem, TGroupByKey, TGroupByElement, TGroupByInItem, TGroupByEnumerable, TGroupByEnumerator>(this RangeEnumerable source, GroupBySpecificEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByEnumerable, TGroupByEnumerator> second, Func<int, GroupingEnumerable<TGroupByKey, TGroupByElement>, TOutItem> resultSelector)
//        where TGroupByEnumerable : struct, IStructEnumerable<TGroupByInItem, TGroupByEnumerator>
//        where TGroupByEnumerator : struct, IStructEnumerator<TGroupByInItem>
//        => CommonImplementation.Zip<TOutItem, int, GroupingEnumerable<TGroupByKey, TGroupByElement>, RangeEnumerable, RangeEnumerator, GroupBySpecificEnumerable<TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByEnumerable, TGroupByEnumerator>, GroupBySpecificEnumerator<TGroupByInItem, TGroupByKey, TGroupByElement, TGroupByEnumerator>>(ref source, ref second, resultSelector);

//        public static ZipEnumerable<TOutItem, int, GroupingEnumerable<TLookupKey, TLookupElement>, RangeEnumerable, RangeEnumerator, LookupDefaultEnumerable<TLookupKey, TLookupElement>, LookupDefaultEnumerator<TLookupKey, TLookupElement>> Zip<TOutItem, TLookupKey, TLookupElement>(this RangeEnumerable source, LookupDefaultEnumerable<TLookupKey, TLookupElement> second, Func<int, GroupingEnumerable<TLookupKey, TLookupElement>, TOutItem> resultSelector)
//        => CommonImplementation.Zip<TOutItem, int, GroupingEnumerable<TLookupKey, TLookupElement>, RangeEnumerable, RangeEnumerator, LookupDefaultEnumerable<TLookupKey, TLookupElement>, LookupDefaultEnumerator<TLookupKey, TLookupElement>>(ref source, ref second, resultSelector);

//        public static ZipEnumerable<TOutItem, int, GroupingEnumerable<TLookupKey, TLookupElement>, RangeEnumerable, RangeEnumerator, LookupSpecificEnumerable<TLookupKey, TLookupElement>, LookupSpecificEnumerator<TLookupKey, TLookupElement>> Zip<TOutItem, TLookupKey, TLookupElement>(this RangeEnumerable source, LookupSpecificEnumerable<TLookupKey, TLookupElement> second, Func<int, GroupingEnumerable<TLookupKey, TLookupElement>, TOutItem> resultSelector)
//        => CommonImplementation.Zip<TOutItem, int, GroupingEnumerable<TLookupKey, TLookupElement>, RangeEnumerable, RangeEnumerator, LookupSpecificEnumerable<TLookupKey, TLookupElement>, LookupSpecificEnumerator<TLookupKey, TLookupElement>>(ref source, ref second, resultSelector);

//        public static ZipEnumerable<TOutItem, int, TInnerItem, RangeEnumerable, RangeEnumerator, OneItemDefaultEnumerable<TInnerItem>, OneItemDefaultEnumerator<TInnerItem>> Zip<TInnerItem, TOutItem>(this RangeEnumerable source, OneItemDefaultEnumerable<TInnerItem> second, Func<int, TInnerItem, TOutItem> resultSelector)
//        => CommonImplementation.Zip<TOutItem, int, TInnerItem, RangeEnumerable, RangeEnumerator, OneItemDefaultEnumerable<TInnerItem>, OneItemDefaultEnumerator<TInnerItem>>(ref source, ref second, resultSelector);

//        public static ZipEnumerable<TOutItem, int, TInnerItem, RangeEnumerable, RangeEnumerator, OneItemSpecificEnumerable<TInnerItem>, OneItemSpecificEnumerator<TInnerItem>> Zip<TInnerItem, TOutItem>(this RangeEnumerable source, OneItemSpecificEnumerable<TInnerItem> second, Func<int, TInnerItem, TOutItem> resultSelector)
//        => CommonImplementation.Zip<TOutItem, int, TInnerItem, RangeEnumerable, RangeEnumerator, OneItemSpecificEnumerable<TInnerItem>, OneItemSpecificEnumerator<TInnerItem>>(ref source, ref second, resultSelector);

//        public static ZipEnumerable<TOutItem, int, TInnerItem, RangeEnumerable, RangeEnumerator, OneItemDefaultOrderedEnumerable<TInnerItem>, OneItemDefaultOrderedEnumerator<TInnerItem>> Zip<TInnerItem, TOutItem>(this RangeEnumerable source, OneItemDefaultOrderedEnumerable<TInnerItem> second, Func<int, TInnerItem, TOutItem> resultSelector)
//        => CommonImplementation.Zip<TOutItem, int, TInnerItem, RangeEnumerable, RangeEnumerator, OneItemDefaultOrderedEnumerable<TInnerItem>, OneItemDefaultOrderedEnumerator<TInnerItem>>(ref source, ref second, resultSelector);

//        public static ZipEnumerable<TOutItem, int, TInnerItem, RangeEnumerable, RangeEnumerator, OneItemSpecificOrderedEnumerable<TInnerItem>, OneItemSpecificOrderedEnumerator<TInnerItem>> Zip<TInnerItem, TOutItem>(this RangeEnumerable source, OneItemSpecificOrderedEnumerable<TInnerItem> second, Func<int, TInnerItem, TOutItem> resultSelector)
//        => CommonImplementation.Zip<TOutItem, int, TInnerItem, RangeEnumerable, RangeEnumerator, OneItemSpecificOrderedEnumerable<TInnerItem>, OneItemSpecificOrderedEnumerator<TInnerItem>>(ref source, ref second, resultSelector);

//        public static ZipEnumerable<TOutItem, int, TInnerItem, RangeEnumerable, RangeEnumerator, SkipLastEnumerable<TInnerItem, TSkipEnumerable, TSkipEnumerator>, SkipLastEnumerator<TInnerItem, TSkipEnumerator>> Zip<TInnerItem, TOutItem, TSkipEnumerable, TSkipEnumerator>(this RangeEnumerable source, SkipLastEnumerable<TInnerItem, TSkipEnumerable, TSkipEnumerator> second, Func<int, TInnerItem, TOutItem> resultSelector)
//        where TSkipEnumerable : struct, IStructEnumerable<TInnerItem, TSkipEnumerator>
//        where TSkipEnumerator : struct, IStructEnumerator<TInnerItem>
//        => CommonImplementation.Zip<TOutItem, int, TInnerItem, RangeEnumerable, RangeEnumerator, SkipLastEnumerable<TInnerItem, TSkipEnumerable, TSkipEnumerator>, SkipLastEnumerator<TInnerItem, TSkipEnumerator>>(ref source, ref second, resultSelector);

//        public static ZipEnumerable<TOutItem, int, TInnerItem, RangeEnumerable, RangeEnumerator, TakeLastEnumerable<TInnerItem, TTakeEnumerable, TTakeEnumerator>, TakeLastEnumerator<TInnerItem, TTakeEnumerator>> Zip<TInnerItem, TOutItem, TTakeEnumerable, TTakeEnumerator>(this RangeEnumerable source, TakeLastEnumerable<TInnerItem, TTakeEnumerable, TTakeEnumerator> second, Func<int, TInnerItem, TOutItem> resultSelector)
//        where TTakeEnumerable : struct, IStructEnumerable<TInnerItem, TTakeEnumerator>
//        where TTakeEnumerator : struct, IStructEnumerator<TInnerItem>
//        => CommonImplementation.Zip<TOutItem, int, TInnerItem, RangeEnumerable, RangeEnumerator, TakeLastEnumerable<TInnerItem, TTakeEnumerable, TTakeEnumerator>, TakeLastEnumerator<TInnerItem, TTakeEnumerator>>(ref source, ref second, resultSelector);

//        public static ZipEnumerable<TOutItem, int, TInnerItem, RangeEnumerable, RangeEnumerator, AppendEnumerable<TInnerItem, TAppendEnumerable, TAppendEnumerator>, AppendEnumerator<TInnerItem, TAppendEnumerator>> Zip<TInnerItem, TOutItem, TAppendEnumerable, TAppendEnumerator>(this RangeEnumerable source, AppendEnumerable<TInnerItem, TAppendEnumerable, TAppendEnumerator> second, Func<int, TInnerItem, TOutItem> resultSelector)
//        where TAppendEnumerable : struct, IStructEnumerable<TInnerItem, TAppendEnumerator>
//        where TAppendEnumerator : struct, IStructEnumerator<TInnerItem>
//        => CommonImplementation.Zip<TOutItem, int, TInnerItem, RangeEnumerable, RangeEnumerator, AppendEnumerable<TInnerItem, TAppendEnumerable, TAppendEnumerator>, AppendEnumerator<TInnerItem, TAppendEnumerator>>(ref source, ref second, resultSelector);

//        public static ZipEnumerable<TOutItem, int, TInnerItem, RangeEnumerable, RangeEnumerator, PrependEnumerable<TInnerItem, TPrependEnumerable, TPrependEnumerator>, PrependEnumerator<TInnerItem, TPrependEnumerator>> Zip<TInnerItem, TOutItem, TPrependEnumerable, TPrependEnumerator>(this RangeEnumerable source, PrependEnumerable<TInnerItem, TPrependEnumerable, TPrependEnumerator> second, Func<int, TInnerItem, TOutItem> resultSelector)
//        where TPrependEnumerable : struct, IStructEnumerable<TInnerItem, TPrependEnumerator>
//        where TPrependEnumerator : struct, IStructEnumerator<TInnerItem>
//        => CommonImplementation.Zip<TOutItem, int, TInnerItem, RangeEnumerable, RangeEnumerator, PrependEnumerable<TInnerItem, TPrependEnumerable, TPrependEnumerator>, PrependEnumerator<TInnerItem, TPrependEnumerator>>(ref source, ref second, resultSelector);

//        public static ZipEnumerable<TOutItem, int, int, RangeEnumerable, RangeEnumerator, RangeEnumerable, RangeEnumerator> Zip<TOutItem>(this RangeEnumerable source, RangeEnumerable second, Func<int, int, TOutItem> resultSelector)
//        => CommonImplementation.Zip<TOutItem, int, int, RangeEnumerable, RangeEnumerator, RangeEnumerable, RangeEnumerator>(ref source, ref second, resultSelector);

//        public static ZipEnumerable<TOutItem, int, int, RangeEnumerable, RangeEnumerator, ReverseRangeEnumerable, ReverseRangeEnumerator> Zip<TOutItem>(this RangeEnumerable source, ReverseRangeEnumerable second, Func<int, int, TOutItem> resultSelector)
//        => CommonImplementation.Zip<TOutItem, int, int, RangeEnumerable, RangeEnumerator, ReverseRangeEnumerable, ReverseRangeEnumerator>(ref source, ref second, resultSelector);
    }
}